<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>不客观和非爱情</title>
    <link href="/2024/12/28/%E4%B8%8D%E5%AE%A2%E8%A7%82%E5%92%8C%E9%9D%9E%E7%88%B1%E6%83%85/"/>
    <url>/2024/12/28/%E4%B8%8D%E5%AE%A2%E8%A7%82%E5%92%8C%E9%9D%9E%E7%88%B1%E6%83%85/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="不客观和非爱情">不客观和非爱情</h1><p><em>“一无所知的人也就一无所爱，什么都不做的人也就什么都不懂。什么都不懂的人是没有价值的。懂得事理的人也懂得爱、观察、发现……对事物本质了解得越多，也就越钟爱……设想所有水果和草莓同时成熟得人，对葡萄一无所知。”</em></p><p>如果成熟的果实才是甘甜的，那么青涩是不是毫无意义？不懂得事理、懵懂的时期，值得纪念吗？</p><p>灵动的眼神，清澈的声音，活跃的表情，身上总是香香。我对她心怀爱慕，却羞于启齿。</p><p>我的第一次爱慕也是最后一次爱慕始于我懵懂的初中时期，说是爱慕未免有些言重，更说明白一点就是小孩子对美好事物的感知、尝试吧。暂不提其中多多少少的曲折，只是宽度这段关系便横跨我的中学和大学两端，占据了我少年到青年的全部过程。从两米的距离拉长到一千一百公里，从单一的时刻错分成日日夜夜。我本人时常容易激起强烈兴趣，熊熊自我燃烧，而后这烈火又会飞速下降衰退。但这份不知名的感情从起始寄生在稚嫩的个体里，循环缠绕，蜷缩又舒张，如同一棵坚韧的植物，在春天和冬天螺旋往复，不断死去又复生。</p><p>初中那时我和她是同班同学，但不似寻常故事一见钟情。入学时我还未配眼镜，小学时隐隐约约就有些近视的感觉了，但我身材瘦小加上成绩不错便总被安排在前排位置，也惧怕被父母批评，虽说黑板边角细细微微字痕还是看不清晰，也没提过近视的事情。</p><p>不凑巧的是，升学那天我是最后晚到教室的，后门进入一眼看去座位上已经全是人了，扫视一圈看到最后几排有几个空位没想太多就入座了，同桌和后桌同是女生。这对我来说是一个挑战，从更小到初中，被长辈“夸奖”最多的就是内向、安静，作为一个男孩缺少一些阳光和活力，但最终也没弄懂是怎么养成。表面毫不在意，但暗地里我早就竖起耳朵听着同桌和后桌来回讲话嬉笑，心中也悄悄的笑。等到上课我才知道我的近视已经成为无法忽略的问题了。从我所在的倒数第二排到看向黑板，全是黑黑白白的斑点，惨兮兮，看不清一点字痕。第二天我就去配对眼镜了，从此就多了一个新的固定装扮。</p><p>我和她第一次相识是英语课的问答，或是某一次换桌后的邻座，或是数学题的讨教，但记忆中总找不到一个精确的端点。后来我才知道，我和她第一次的交集就在开学的那天，她帮助老师统计学生信息，唯独缺少我迟来的那份。她早早记下我的名字，我却毫无印象，于是我如偿还般不断地在人生铭刻，心底留下缺口，将她填充。我对爱的认识很浅，或者说对爱没有概念。无论是起起落落书写的此刻还是过去，我始终觉得我并不懂爱是什么，也看过一些书籍，但更加疑惑。现在回想起来很多事都已经模糊了，甚至当时那份感情、那份潮湿又炙热的幻想也记不清了。就像一个个默默的夏天，让人想起的时候就已经过去，那时闷热但心动，现在却只是汗流。</p><p>中学时期印象深刻的事情不多，心中浮现的总是反反复复的几件，但总模模糊糊的记不清晰，像梦后醒来一样，在现实和现实之上，间隔着一层薄薄的水，偶尔波浪浮动，可幸运记起的那些事情像是真实的又像是美好的幻想，让人恼火。</p><p>我和她都尤为喜爱初二时的英语老师，她在课上严肃认真，但私下却总是微笑，很是让人安心，教导起来耐心又仔细，帮助我搭建了很不错的英语基础。另一方面，这位严肃、严格、严厉的老师也很喜欢我和她，班上两个课代表便是我俩了，她时常叫我俩回答或者帮忙讲解问题，还将我们分为一组同学，坐在一起，一男一女。这让我对她更有好感。但当时却是不知，只觉得那时心中欣喜难言，直让内怯的人更讲不出话来。我和她各饰一角，演绎课本中的对话，我站在讲台不敢面向下方的同学，但更不敢看她的眼睛，她则大大方方、坦坦荡荡。虽然觉得尴尬，但每每英语课前我心中暗暗总有些期待，小小的两人组合让我窃喜，觉得有些特殊，有些契合。我从这平淡中也能尝出甜蜜。这次也会提问的吧？又能和她一起了？她也一定是这样想的吧？</p><p>我还记得我们做同桌的时候。我对她心中极为好奇和仰慕，但现实中反而不敢靠近，离她远远的，仿若靠近便是玷污和伤害。记得有次她问我数学题目，我在角落扫了一眼呜呼吐出几个不连贯的句子，便不再加以回应。当时只觉紧张又羞赧，我不敢去看她的表情，但想来定是十分困惑吧，当时羞于追问，现在也无处问询了。</p><p>抱有极大的好奇，我慢慢、远远、悄悄地靠近。仔细想想那时候，一切就像是被规定的推着向前，没有自我的想法，只是每天照常的生活着、学习中，突然之间就注意到另一个个体，此前她与其他人毫无不同，但恰在某一时刻就突然变得生动了、活泼了，仿佛一下拉近了许多，好像整个世界多了一些除了自己之外的东西，增加了许多生机。原来他人也和自己一样有趣。于是自一个小小的个体封闭的内心，枝芽伸出，以此为契机、养料慢慢地生长。对于那时来看，这份感情说是爱未免太过隆重，分为喜欢似也不妥，更多的也许是成长中对外界的好奇或者说渴望一个知己，希望了解，希望被了解。</p><p>也正如我想要的，她的存在满足了我的一切需要，替换了长久陪伴我的影子。我和她关系的进步是在初三时期。要分班了。团聚时我不能鼓起的勇气，在离散后反而从全身各处涌现，我和她表白了。在周末的傍晚或是下午，诉以衷肠。</p><p>她说她想要遇到和她默契的人，我自是不满足条件的。对一个只有课上公共必要的交流，私下却毫不了解的人，何谈默契与否？我默默将“默契”一词记录心中，仍怀揣着些美好的幻想。让人开心的是，这是我们交流的伊始，我那时自视不说甚高也是很高，中二也有几分幼稚的浪漫。结果是我们之间无话不谈。家庭问题，学业问题，处于青春时期的我们异质却又统一。升入高中我们进入不同学校，但关系并未远离，一经放假便兴奋的拿起手机，看看，听听，那些她所在，所经历的环境和事情。虽然从未亲身经历，但仅看着那些文字，相思、喜悦就要溢出心头。</p><p>但情况却愈是急转直下。对我来说，我以为我们足够了解了，每天不间断的聊天，也有了默契和心照不宣。我说：这就是喜欢吧，但可惜的是，对她来说不是。我们关系的破碎就以此为基础，现在想来不过无聊的争论，但那时却是万分紧急、性命攸关。我迫切地想要寻求我内心向往的恋情和虚荣，而她回应以我冷静。反讽的是，我们一边怀揣着不同的认知，一边更加依靠对方的支撑。</p><p>我的恋情是失败的。</p><p>如果这错综复杂的关系也如同寻常故事一般，以暗恋为始，只一个人在角落暗自欢喜，最后又以暗恋消散为终，那也算得上一段青春的美谈。但这一切逐渐超出两人能控制的边界，慢慢地沉入幼小年龄无法感知的深度，我只是懵懂着就做出了决定，做了想做和不想做的事情，做对了或者做错了。对她也是同样吧。我不断地向她逼近，不再满足于仍隔着一层的关系，而她则是略有懊恼地委婉回绝。自我最起始没有按捺住孤独，向她伸出感知的触角时，一切的恶果就已埋下。一如那没能送出的木簪，我削削打磨，留下的却只有木屑和刀痕。我们两个人的丝线相互缠绕，传输着一言一语，思想交融，但也形成一个厚茧，让我们变得与外界分离，与其他一切遮上一团迷雾，阻挡着各自真实的视线，各自宽慰愚弄自己，视而也不见。我们仍挣扎着靠近，一边倾诉着心声，一边又狂躁地激起矛盾。就仿佛互相寄生着，我们之间的距离越来越近，但也越来越难以呼吸。也许这失败有许多因素，但当时只是争辩着、震怒着，然后坠落、眼泪、破碎。回想起来，很多事情、很多感情都难以理解，但对于那时来讲，都是呕心沥血的拥抱、真真切切的伤害罢。</p><p>之所以说我的恋情是失败的，并非是说我们的结果是分开。失败，因为这段漫长顽固的关系带给我、我们的有青春的欢喜和倾诉，但更多的是疼痛，它以一种无法洞察的形式伴随我们自身的生长，奠定了对恋爱、对人生的态度。我不够平庸，不甘心落得泯然众人的下场，所以不能像轻易地拿起那样轻易放下，切断后又纠缠；我不够出色，不能像手执火剑的天使，扫清面前、未来的障碍，所以维持不了这段关系长久完整，纠缠后又切断。也许我并不懂责任和尊重，只是固执地追求一个结果，不间断不考虑地靠近和逼迫，于是那一切就类似于控制、占有一般，侵蚀她的自由，以及我的自由。而我置身其中，深陷泥潭，进退不得。仿佛有一个暗中蛰伏的魔鬼将我的灵魂分割，其中一部分脱离我的躯壳，却牢牢的被困在她的身体里，于是有一种令人痴迷的魔力，驱使着我忍受空虚和饥饿，不断追赶和徘徊。</p><p>迷离月影，捉月水中。我和她分分合合有过许多次，高中是最高亢也是矛盾最激烈的时期。归根结底，我们对于爱的理解不同，对于人际关系的认识不同。这本身没什么坏的，但当我们靠得太近，纠缠太深，这便化成一条无形的绳索，拆绕两人的脖颈，无情地将其挂在绞刑台，若是挣扎不舍，越是痛苦窒息。即使如此，这绳索也让人如此着迷，不舍离开。</p><p>结束无声无息地降临于寂静和分离。于是我真正明白了默契的含义。在我们最终背道而驰后，我落入了虚无主义的深渊，但这又好像一种救赎，获得了内心的平静，我失去了一些感知，但也不再挣扎、痛苦。我仍然内心空洞，无力却已无需去填充，她面无表情地离开，找到新的寄托。回忆起来，那些时光就好像多年前阳台洒落的阳光，闪耀着光芒，但陈旧、模糊，又似一条粘稠又甜蜜的河，不断流动在我的身体，沉溺的灵魂在其中滚动起伏。我竭力回想，仍记不起她的样貌、话语。欢喜、悔恨、不甘、迷恋，都已逝去，存留于我身体的只有一种来自过去的回响，一种朦朦的感觉。夜晚仍照旧降临，熟悉的名称和身影却偶尔在梦中才有所接触。只是闲暇时候，幻象般的记忆还是会闪回，那时我们同坐在一间教室，余光是黑板上未抹净的白晕，我张嘴说着什么，周围有陌生的同学身影晃动，窗外透来几缕夕阳的光。</p><p>灵动的眼神，清澈的声音，活跃的表情，身上总是香香的。我对她心怀爱慕，却难以启齿。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回忆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>孤夜山行</title>
    <link href="/2024/12/08/%E5%AD%A4%E5%A4%9C%E5%B1%B1%E8%A1%8C/"/>
    <url>/2024/12/08/%E5%AD%A4%E5%A4%9C%E5%B1%B1%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>孤夜山行</center><center>繁云絮雨萦孤月，淡雾疏星隐夜明。</center><center>寂坐幽岩山欲语，徒归空路影虚行。</center>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>七绝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mengzi-t5微调古诗生成模型</title>
    <link href="/2024/12/08/mengzi-t5%E5%BE%AE%E8%B0%83%E5%8F%A4%E8%AF%97%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/12/08/mengzi-t5%E5%BE%AE%E8%B0%83%E5%8F%A4%E8%AF%97%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="mengzi-t5预训练模型">mengzi-t5预训练模型</h3><p>首先在huggingface下载mengzi-t5-base模型以便后续训练。因为huggingface在国内下载速度较慢，可以使用代理下载，或者直接下载到本地再上传到服务器。这里使用<ahref="https://www.hf-mirror.com">镜像网站</a>下载。<br /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">!curl -L -O https://hf-mirror.com/Langboat/mengzi-t5-base/resolve/main/pytorch_model.bin?download=True<br>!curl -L -O https://hf-mirror.com/Langboat/mengzi-t5-base/resolve/main/config.json?download=true<br>!curl -L -O https://hf-mirror.com/Langboat/mengzi-t5-base/resolve/main/spiece.vocab?download=true<br>!curl -L -O https://hf-mirror.com/Langboat/mengzi-t5-base/resolve/main/spiece.model?download=true<br></code></pre></td></tr></table></figure></p><h3 id="数据准备">数据准备</h3><h4 id="数据集下载">数据集下载</h4><p>这里的数据是使用<ahref="https://github.com/chinese-poetry/chinese-poetry">chinese-poetry</a>收集的唐诗宋词，由于飞桨平台已经内置该数据集，所以我们只需添加进来就可以了，这里是解压缩数据。<br /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">!unzip -n ./data/data70759/poems_json.zip<br></code></pre></td></tr></table></figure></p><h4 id="数据处理">数据处理</h4><p>由于数据集中的诗词是繁体，使用chinese-converter库将繁体转换为简体。<br /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">!pip install chinese-converter<br></code></pre></td></tr></table></figure></p><p>导入库。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-comment"># from tqdm.notebook import tqdm</span><br><span class="hljs-keyword">import</span> chinese_converter  <span class="hljs-comment"># 繁体到简体需要</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># IS_TEST_FLOW = True</span><br>IS_TEST_FLOW = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure></p><p>使用IS_TEST_FLOW作为测试和训练的标志，如果是测试则只处理少量数据。<br />数据集格式为json，每个json文件有1000首诗，格式如下：<br /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;太宗皇帝&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;paragraphs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;秦川雄帝宅，函谷壯皇居。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;綺殿千尋起，離宮百雉餘。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;連甍遙接漢，飛觀迥凌虛。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;雲日隱層闕，風煙出綺疎。&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;note&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;帝京篇十首 一&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></p><p>处理json文件，创建df_list列表，每个元素是一个dataframe，最后使用pd.concat合并。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">POEM_CONTENT = &#123;<br>    <span class="hljs-string">&#x27;tang&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;total&#x27;</span>: <span class="hljs-number">58</span>,<br>        <span class="hljs-string">&#x27;pattern&#x27;</span>: <span class="hljs-string">&quot;./poems_json/poet.tang.&#123;0&#125;.json&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;song&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;total&#x27;</span>: <span class="hljs-number">255</span>,<br>        <span class="hljs-string">&#x27;pattern&#x27;</span>: <span class="hljs-string">&quot;./poems_json/poet.song.&#123;0&#125;.json&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_poems</span>(<span class="hljs-params">is_test=<span class="hljs-literal">True</span>, verbose=<span class="hljs-literal">True</span></span>):<br>  df_list = []<br>  <span class="hljs-keyword">for</span> dynasty <span class="hljs-keyword">in</span> POEM_CONTENT:<br>    size = <span class="hljs-number">3</span> <span class="hljs-keyword">if</span> is_test <span class="hljs-keyword">else</span> POEM_CONTENT[dynasty][<span class="hljs-string">&#x27;total&#x27;</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size):<br>      url = POEM_CONTENT[dynasty][<span class="hljs-string">&#x27;pattern&#x27;</span>].<span class="hljs-built_in">format</span>(i * <span class="hljs-number">1000</span>)<br>      <span class="hljs-keyword">if</span> verbose:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;load <span class="hljs-subst">&#123;url&#125;</span> now&quot;</span>)<br>      df_list.append(pd.read_json(url))<br>  <span class="hljs-keyword">return</span> pd.concat(df_list)<br></code></pre></td></tr></table></figure></p><p>使用df.apply将繁体转换为简体。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">df = get_poems(is_test=IS_TEST_FLOW, verbose=<span class="hljs-literal">True</span>)<br>df[<span class="hljs-string">&#x27;concat_paragraphs&#x27;</span>] = [<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, l)) <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> df[<span class="hljs-string">&#x27;paragraphs&#x27;</span>]]<br>df = df[[<span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;concat_paragraphs&#x27;</span>]]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_schinese</span>(<span class="hljs-params">tchinese</span>):<br>  <span class="hljs-keyword">return</span> chinese_converter.to_simplified(tchinese)<br><br>df[<span class="hljs-string">&#x27;s_content&#x27;</span>] = df.apply(<span class="hljs-keyword">lambda</span> row: convert_schinese(<span class="hljs-string">&#x27;&#x27;</span>.join(row.concat_paragraphs)), axis=<span class="hljs-number">1</span>)<br>df[<span class="hljs-string">&#x27;s_title&#x27;</span>] = df.apply(<span class="hljs-keyword">lambda</span> row: convert_schinese(<span class="hljs-string">&#x27;&#x27;</span>.join(row.title)), axis=<span class="hljs-number">1</span>)<br>df[<span class="hljs-string">&#x27;s_author&#x27;</span>] = df.apply(<span class="hljs-keyword">lambda</span> row: convert_schinese(<span class="hljs-string">&#x27;&#x27;</span>.join(row.author)), axis=<span class="hljs-number">1</span>)<br><br>my_df = df<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my_df size&quot;</span>, <span class="hljs-built_in">len</span>(my_df))<br></code></pre></td></tr></table></figure></p><p>创建trim函数，替换掉一些特殊字符，限制作者、标题、内容的长度。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">MAX_AUTHOR_CHAR = <span class="hljs-number">4</span><br>MAX_TITLE_CHAR = <span class="hljs-number">12</span><br>MIN_CONTENT_CHAR = <span class="hljs-number">20</span><br>MAX_CONTENT_CHAR = <span class="hljs-number">32</span><br>BAD_TOKENS = <span class="hljs-string">&quot; ()[]《》（）□&#123;&#125;abcdefgxyz一&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trim_author_fn</span>(<span class="hljs-params">row</span>):<br>  <span class="hljs-keyword">return</span> row.s_author[:MAX_AUTHOR_CHAR]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trim_title_fn</span>(<span class="hljs-params">row</span>):<br>  trimed_title = row.s_title[:MAX_TITLE_CHAR]<br>  <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> BAD_TOKENS:<br>    trimed_title = trimed_title.replace(b, <span class="hljs-string">&quot;&quot;</span>)<br>  <span class="hljs-keyword">return</span> trimed_title<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trim_content_fn</span>(<span class="hljs-params">row</span>):<br>  trimed_content = row.s_content[:MAX_CONTENT_CHAR]<br>  <span class="hljs-comment"># # End with a period to avoid partial ending to confuse model</span><br>  <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> BAD_TOKENS:<br>    trimed_content = trimed_content.replace(b, <span class="hljs-string">&quot;&quot;</span>)<br>  last_period = trimed_content.rfind(<span class="hljs-string">&quot;。&quot;</span>)<br>  <span class="hljs-keyword">return</span> trimed_content[:last_period+<span class="hljs-number">1</span>]<br>  <span class="hljs-comment"># return trimed_content</span><br><br><span class="hljs-comment"># Trim the size, a soft copy to avoid the view/copy conflict warning</span><br>my_df[<span class="hljs-string">&#x27;s_author_trim&#x27;</span>] = my_df.copy().apply(trim_author_fn, axis=<span class="hljs-number">1</span>)<br>my_df[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>] = my_df.copy().apply(trim_title_fn, axis=<span class="hljs-number">1</span>)<br>my_df[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>] = my_df.copy().apply(trim_content_fn, axis=<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my_df size&quot;</span>, <span class="hljs-built_in">len</span>(my_df))<br></code></pre></td></tr></table></figure></p><p>过滤掉一些无效数据，比如标题为空、内容太短、无正文等。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Title cannot be empty</span><br>empty_title_mask = (my_df[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>].<span class="hljs-built_in">str</span>.<span class="hljs-built_in">len</span>() == <span class="hljs-number">0</span>)<br>too_short_cotent_mask = (my_df[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>].<span class="hljs-built_in">str</span>.<span class="hljs-built_in">len</span>() &lt;= MIN_CONTENT_CHAR)<br>invalid_mask = ((<span class="hljs-string">&#x27;无正文&#x27;</span> == my_df[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>]) | (<span class="hljs-string">&#x27;无正文&#x27;</span> == my_df[<span class="hljs-string">&#x27;s_author_trim&#x27;</span>]))<br>too_short_mask =  empty_title_mask | too_short_cotent_mask | invalid_mask<br><span class="hljs-comment"># filtered_my_df = my_df.loc[too_short_mask]</span><br><span class="hljs-comment"># filtered_my_df</span><br><br>my_df = my_df.loc[~too_short_mask][[<br>  <span class="hljs-string">&#x27;s_author_trim&#x27;</span>, <span class="hljs-string">&#x27;s_title_trim&#x27;</span>, <span class="hljs-string">&#x27;s_content_trim&#x27;</span>]]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my_df size&quot;</span>, <span class="hljs-built_in">len</span>(my_df))<br></code></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>result_dict = &#123;<br>    <span class="hljs-string">&#x27;s_author_trim&#x27;</span>: [],<br>    <span class="hljs-string">&#x27;s_title_trim&#x27;</span>: [],<br>    <span class="hljs-string">&#x27;s_content_trim&#x27;</span>: [],<br>&#125;<br><span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> my_df.iterrows():<br>  c = row[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>]<br>  snippets = <span class="hljs-built_in">list</span>(re.split(<span class="hljs-string">&#x27;，|。|？&#x27;</span>, c))<br>  lens = [<span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> snippets <span class="hljs-keyword">if</span> s.strip() != <span class="hljs-string">&#x27;&#x27;</span>]<br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">max</span>(lens) != <span class="hljs-built_in">min</span>(lens) <span class="hljs-keyword">or</span> <span class="hljs-built_in">max</span>(lens) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>]:<br>    <span class="hljs-keyword">continue</span><br>  result_dict[<span class="hljs-string">&#x27;s_author_trim&#x27;</span>].append(row[<span class="hljs-string">&#x27;s_author_trim&#x27;</span>])<br>  result_dict[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>].append(row[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>])<br>  result_dict[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>].append(c)<br><span class="hljs-comment"># print(&quot;get rid of &quot;, sum(bad_items))</span><br>my_df = pd.DataFrame(data=result_dict)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;left&quot;</span>, <span class="hljs-built_in">len</span>(my_df))<br></code></pre></td></tr></table></figure><h4 id="构建数据集">构建数据集</h4><p>构建数据集，包括source_text和target_text。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">AUTHOR_PROMPT = <span class="hljs-string">&quot;模仿：&quot;</span><br>TITLE_PROMPT = <span class="hljs-string">&quot;作诗：&quot;</span><br>EOS_TOKEN = <span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_dataset_df</span>(<span class="hljs-params">df, include_author=<span class="hljs-literal">True</span></span>):<br>  dfc = df.copy()<br>  <span class="hljs-keyword">if</span> include_author:<br>    dfc[<span class="hljs-string">&#x27;source_text&#x27;</span>] = TITLE_PROMPT + df[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>] + EOS_TOKEN + AUTHOR_PROMPT + df[<span class="hljs-string">&#x27;s_author_trim&#x27;</span>]<br>  <span class="hljs-keyword">else</span>:<br>    dfc[<span class="hljs-string">&#x27;source_text&#x27;</span>] = TITLE_PROMPT + df[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>]<br>  dfc[<span class="hljs-string">&#x27;target_text&#x27;</span>] = df[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>]<br>  dfc = dfc[[<span class="hljs-string">&#x27;source_text&#x27;</span>, <span class="hljs-string">&#x27;target_text&#x27;</span>]]<br>  <span class="hljs-keyword">return</span> dfc<br></code></pre></td></tr></table></figure></p><p>带有作者的数据集。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df_author_title_content = build_dataset_df(my_df, <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></p><p>不带作者的数据集。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df_title_content = build_dataset_df(my_df, <span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure></p><p>合并数据集。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">merged_df = pd.concat([df_author_title_content, df_title_content])<br>merged_df = merged_df.sample(frac=<span class="hljs-number">1.</span>)<br></code></pre></td></tr></table></figure> 这里的frac=1.表示打乱数据集。</p><h3 id="训练">训练</h3><p>安装一下torch, simplet5等必要库。<br /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">!pip install torch<br>!pip install simplet5<br>import torch<br>from simplet5 import SimpleT5<br>from transformers import T5Tokenizer, T5ForConditionalGeneration<br></code></pre></td></tr></table></figure></p><h4 id="定义模型">定义模型</h4><p>定义模型类，继承SimpleT5，加载mengzi-t5-base模型。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.cuda.empty_cache()<br><br><span class="hljs-comment"># 指定本地模型路径</span><br><span class="hljs-comment"># local_model_path = &quot;./mengzi_t5_base&quot;</span><br>local_model_path = <span class="hljs-string">&quot;./MengziT5_base&quot;</span><br><br><span class="hljs-comment"># 定义 extra_ids 数量</span><br>extra_ids = <span class="hljs-number">100</span><br><br><span class="hljs-comment"># 创建包含所有 extra_ids 的特殊标记列表</span><br>additional_special_tokens = [<span class="hljs-string">f&quot;&lt;extra_id_<span class="hljs-subst">&#123;i&#125;</span>&gt;&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(extra_ids)]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MengziSimpleT5</span>(<span class="hljs-title class_ inherited__">SimpleT5</span>):<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">super</span>().__init__()<br>    <span class="hljs-variable language_">self</span>.device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_my_model</span>(<span class="hljs-params">self, use_gpu: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    <span class="hljs-comment"># self.tokenizer = T5Tokenizer.from_pretrained(local_model_path,</span><br>    <span class="hljs-comment"># extra_ids=extra_ids,</span><br>    <span class="hljs-comment"># additional_special_tokens=additional_special_tokens)</span><br>    <span class="hljs-variable language_">self</span>.tokenizer = T5Tokenizer.from_pretrained(local_model_path)<br>    <span class="hljs-variable language_">self</span>.model = T5ForConditionalGeneration.from_pretrained(local_model_path)<br><br>model = MengziSimpleT5()<br>model.load_my_model()<br>model.model = model.model.to(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br></code></pre></td></tr></table></figure></p><h4 id="划分数据集">划分数据集</h4><p>将数据集以0.98, 0.02的比例划分为训练集和验证集。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br>merged_df = merged_df.sample(frac=<span class="hljs-number">1</span>) <span class="hljs-comment"># Shuffle</span><br>train_df, eval_df = train_test_split(merged_df, test_size=<span class="hljs-number">0.02</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-built_in">len</span>(train_df), <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-built_in">len</span>(eval_df))<br></code></pre></td></tr></table></figure></p><h4 id="训练模型">训练模型</h4><p>训练模型，使用train_df训练，eval_df验证。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">model.train(train_df=train_df,<br>            eval_df=eval_df,<br>            source_max_token_len=(<span class="hljs-built_in">len</span>(TITLE_PROMPT) + MAX_TITLE_CHAR +  <span class="hljs-number">1</span> + <span class="hljs-built_in">len</span>(AUTHOR_PROMPT) + MAX_AUTHOR_CHAR),<br>            target_max_token_len=MAX_CONTENT_CHAR,<br>            batch_size=<span class="hljs-number">256</span>,<br>            max_epochs=<span class="hljs-number">5</span>,<br>            use_gpu=<span class="hljs-literal">True</span>,<br>            outputdir=<span class="hljs-string">&quot;./Models/t5-poem-v2.1&quot;</span>)<br></code></pre></td></tr></table></figure></p><h4 id="测试模型">测试模型</h4><p>使用模型生成诗词。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">poem</span>(<span class="hljs-params">title_str, opt_author=<span class="hljs-literal">None</span>, model=model,</span><br><span class="hljs-params">         is_input_traditional_chinese=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">         num_beams=<span class="hljs-number">2</span></span>):<br>  model.model = model.model.to(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br>  <span class="hljs-keyword">if</span> opt_author:<br>    in_request = TITLE_PROMPT + title_str[:MAX_TITLE_CHAR] + EOS_TOKEN + AUTHOR_PROMPT + opt_author[:MAX_AUTHOR_CHAR]<br>  <span class="hljs-keyword">else</span>:<br>    in_request = TITLE_PROMPT + title_str[:MAX_TITLE_CHAR]<br>  <span class="hljs-keyword">if</span> is_input_traditional_chinese:<br>    in_request = chinese_converter.to_simplified(in_request)<br>  out = model.predict(in_request,<br>                      max_length=MAX_CONTENT_CHAR,<br>                      num_beams=num_beams)[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;，&quot;</span>)<br>  <span class="hljs-keyword">if</span> is_input_traditional_chinese:<br>    out = chinese_converter.to_traditional(out)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;標題： <span class="hljs-subst">&#123;in_request.replace(<span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)&#125;</span>\n詩歌： <span class="hljs-subst">&#123;out&#125;</span>&quot;</span>)<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;标题： <span class="hljs-subst">&#123;in_request.replace(<span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)&#125;</span>\n诗歌： <span class="hljs-subst">&#123;out&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>测试模型。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;秋思&#x27;</span>, <span class="hljs-string">&quot;百花&quot;</span>, <span class="hljs-string">&#x27;佳人有约&#x27;</span>]:<br>  <span class="hljs-comment"># Empty author means general style</span><br>  <span class="hljs-keyword">for</span> author <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&quot;杜甫&quot;</span>, <span class="hljs-string">&quot;李白&quot;</span>, <span class="hljs-string">&quot;李清照&quot;</span>, <span class="hljs-string">&quot;苏轼&quot;</span>]:<br>    poem(title, author)<br>  <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure></p><p>使用不同的num_beams测试模型。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;冬雪&#x27;</span>]:<br>  <span class="hljs-keyword">for</span> author <span class="hljs-keyword">in</span>  [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&quot;杜甫&quot;</span>]:<br>    <span class="hljs-keyword">for</span> num_beams <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>):<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;num beams: <span class="hljs-subst">&#123;num_beams&#125;</span>&quot;</span>)<br>      poem(title, author, num_beams=num_beams)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure></p><h3 id="使用模型">使用模型</h3><p>使用模型生成诗词。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LogitsProcessor<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LogitsProcessorList<br><br><span class="hljs-comment"># 具体代码</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> simplet5 <span class="hljs-keyword">import</span> SimpleT5<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> T5Tokenizer, T5ForConditionalGeneration<br><span class="hljs-keyword">import</span> chinese_converter<br><br>MODEL_PATH = <span class="hljs-string">&quot;./Models/t5-poem-v2.1/simplet5-epoch-4-train-loss-3.4329-val-loss-3.4315&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PoemModel</span>(<span class="hljs-title class_ inherited__">SimpleT5</span>):<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">super</span>().__init__()<br>    <span class="hljs-variable language_">self</span>.device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_my_model</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-variable language_">self</span>.tokenizer = T5Tokenizer.from_pretrained(MODEL_PATH)<br>    <span class="hljs-variable language_">self</span>.model = T5ForConditionalGeneration.from_pretrained(MODEL_PATH)<br></code></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 有一些预先设定参数</span><br>AUTHOR_PROMPT = <span class="hljs-string">&quot;模仿：&quot;</span><br>TITLE_PROMPT = <span class="hljs-string">&quot;作诗：&quot;</span><br>EOS_TOKEN = <span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span><br><br>poem_model = PoemModel()<br>poem_model.load_my_model()<br>poem_model.model = poem_model.model.to(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br><br>MAX_AUTHOR_CHAR = <span class="hljs-number">4</span><br>MAX_TITLE_CHAR = <span class="hljs-number">12</span><br>MIN_CONTENT_CHAR = <span class="hljs-number">10</span><br>MAX_CONTENT_CHAR = <span class="hljs-number">64</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">poem</span>(<span class="hljs-params">title_str, opt_author=<span class="hljs-literal">None</span>, model=poem_model,</span><br><span class="hljs-params">         is_input_traditional_chinese=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">         num_beams=<span class="hljs-number">100</span></span>):<br>  model.model = model.model.to(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br>  <span class="hljs-keyword">if</span> opt_author:<br>    in_request = TITLE_PROMPT + title_str[:MAX_TITLE_CHAR] + EOS_TOKEN + AUTHOR_PROMPT + opt_author[:MAX_AUTHOR_CHAR]<br>  <span class="hljs-keyword">else</span>:<br>    in_request = TITLE_PROMPT + title_str[:MAX_TITLE_CHAR]<br>  <span class="hljs-keyword">if</span> is_input_traditional_chinese:<br>    in_request = chinese_converter.to_simplified(in_request)<br>  out = model.predict(in_request,<br>                      max_length=MAX_CONTENT_CHAR,<br>                      num_beams=num_beams)[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;，&quot;</span>)<br>                      <span class="hljs-comment"># logits_processor=LogitsProcessorList([rhyme_processor]))[0].replace(&quot;,&quot;, &quot;，&quot;)</span><br><br>  <br>  <span class="hljs-keyword">if</span> is_input_traditional_chinese:<br>    out = chinese_converter.to_traditional(out)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;標題： <span class="hljs-subst">&#123;in_request.replace(<span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)&#125;</span>\n詩歌： <span class="hljs-subst">&#123;out&#125;</span>&quot;</span>)<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;标题： <span class="hljs-subst">&#123;in_request.replace(<span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)&#125;</span>\n诗歌： <span class="hljs-subst">&#123;out&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;秋思&#x27;</span>, <span class="hljs-string">&#x27;佳人&#x27;</span>, <span class="hljs-string">&#x27;相思&#x27;</span>,<span class="hljs-string">&quot;幽梦&quot;</span>]:<br>  <span class="hljs-comment"># Empty author means general style</span><br>  <span class="hljs-keyword">for</span> author <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&quot;杜甫&quot;</span>, <span class="hljs-string">&quot;李白&quot;</span>, <span class="hljs-string">&quot;李清照&quot;</span>, <span class="hljs-string">&quot;苏轼&quot;</span>]:<br>    poem(title, author)<br>  <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>微调mengzi-t5模型，使用唐诗宋词数据集训练了古诗生成模型，实现古诗生成。</p><p>slide见<ahref="https://github.com/symcreg/poem_generate/blob/main/slide.pptx">这里</a>。<br />实现效果在<ahref="https://github.com/symcreg/poem_generate/blob/main/presentation.mp4">这里</a>。<br />github地址：<ahref="https://github.com/symcreg/poem_generate">poem_generate</a><br />飞桨地址：<ahref="https://aistudio.baidu.com/projectdetail/8620151">test</a><br />主要参考（抄）了<ahref="https://github.com/hululuzhu/chinese-ai-writing-share">chinese-ai-writing-share</a></p><h3 id="参考">参考</h3><ol start="0" type="1"><li><a href="https://aistudio.baidu.com/overview">aistudio</a></li><li><ahref="https://github.com/chinese-poetry/chinese-poetry">chinese-poetry</a><br /></li><li><a href="https://hf-mirror.com">hf-mirror</a><br /></li><li><ahref="https://github.com/hululuzhu/chinese-ai-writing-share">chinese-ai-writing-share</a><br /></li><li><ahref="https://github.com/wangjiezju1988/aichpoem">aichpoem</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模型训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔记梦</title>
    <link href="/2024/11/26/%E9%9A%8F%E7%AC%94%E8%AE%B0%E6%A2%A6/"/>
    <url>/2024/11/26/%E9%9A%8F%E7%AC%94%E8%AE%B0%E6%A2%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="随笔记梦">随笔记梦</h1><p>霎时天摇地动，乾翻坤覆，六合迫临，四野俱寂。日及天心，耀光极明，若金虹贯空，若烈焰腾舞，五色斑斓，七彩绚烂，万象为之失辉。余心振荡不怡，魂惊魄散，神骇思移，恍惚兮若行至云端，缥缈兮如坠入乱流；迷离兮若踏及夜明，惶惑兮如置身于幻海茫茫。悚怛而起，余已涕泪满面。</p><p>梦者，真伪难辨；迷途，虚实莫测。天旋地转间，觉一切如镜中花，水中月，虽近在咫尺，却不可触。怔然滞目，心中寂寂。</p><h2 id="section">2024-11-30</h2><p>清风拂面，细雨如织。凄凄芳草，曳曳江荻。转眄无聚，步履无依。徙倚彷徨，洎乎幽苑。门阍轻掩，玉砌呈前。方至其间，见珠帘翠影，闻琴瑟悠悠。音符清丽，芳影翩翩。却听耳畔幽幽轻叹：“歧路兮莫徘徊，迷途兮何眷恋？君至此，奈所何？此生已矣，来世再续。”语毕，愁云蔽日，悲雨霏霏。弦断琴残，珠泪纵流。余顾盼身侧，空余烟波。萧萧风雨，独自凄凄。九天浩浩，无以容此身；宙宇茫茫，无以载此心。</p><p>于是天摇地动，乾翻坤覆，六合迫临，四野俱寂。日及天心，耀光极明，若金虹贯空，若烈焰腾舞，五色斑斓，七彩绚烂，万象失辉，应星不煜。余心振荡不怡兮，身战栗而局躅。魂惊魄摇，神骇精移，恍惚兮若行至云端，缥缈兮如坠入乱流；迷离兮若踏及夜明，惶惑兮如置身于幻海茫茫。镜中花碎，水底月沉。悚怛而起，余已涕泪满面。怔然滞目，心中寂寂。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记梦</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>月堕阳升</title>
    <link href="/2024/11/24/%E6%9C%88%E5%A0%95%E9%98%B3%E5%8D%87/"/>
    <url>/2024/11/24/%E6%9C%88%E5%A0%95%E9%98%B3%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>月堕阳升</center><center>瞑夜昇晨晓，垂珠染霁虹。</center><center>新芽抽嫩柳，宿鸟望春风。</center><center>幽梦遗窗冷，残灯泣室空。</center><center>吟蛙愁月堕，舞燕盼阳升。</center>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>五律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逐影随波</title>
    <link href="/2024/11/23/%E9%80%90%E5%BD%B1%E9%9A%8F%E6%B3%A2/"/>
    <url>/2024/11/23/%E9%80%90%E5%BD%B1%E9%9A%8F%E6%B3%A2/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>逐影随波</center><center>去雁急逐影，浮萍任系波。</center><center>喧台常众和，何日静独歌？</center>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>五绝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>旧梦新寒</title>
    <link href="/2024/11/22/%E6%97%A7%E6%A2%A6%E6%96%B0%E5%AF%92/"/>
    <url>/2024/11/22/%E6%97%A7%E6%A2%A6%E6%96%B0%E5%AF%92/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>旧梦新寒</center><center>几缕云烟散，一支孤叶来。</center><center>新寒侵旧梦，寂月隐空台。</center>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>五绝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>诗词格律</title>
    <link href="/2024/11/22/%E8%AF%97%E8%AF%8D%E6%A0%BC%E5%BE%8B/"/>
    <url>/2024/11/22/%E8%AF%97%E8%AF%8D%E6%A0%BC%E5%BE%8B/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="诗的类别">诗的类别</h2><p>诗可以分为古诗、律诗、绝句三种。古诗、律诗、绝句又各分为五言、七言。五言就是每句五个字，七言就是每句七个字。</p><p>古体诗时按照古代的诗体来写的，没有一定的标准，可以说，凡是不受近体格律舒服的，都是古体诗。古体诗除了押韵之外不受任何格律的束缚，这是一种半自由体的诗。</p><p>近体诗以律诗为代表。律诗的韵、平仄、对仗都有许多讲究。有以下四个特点：<br />* 每首限定八句；<br />* 押平声韵；<br />* 每句的平仄都有规定；<br />* 每篇必须有对仗，对仗的位置也有规定。</p><p>超过八句的律诗，称为长律，长律也时近体诗。</p><p>绝句比律诗的字数少一半，即四句一首。</p><h2 id="律诗的韵">律诗的韵</h2><p>古人写律诗，时严格依照韵书来押韵的。在韵书里，平声分为上平声、下平声。平声字多，所以分为两卷，等于说平声上卷，平声下卷，没有别的意思。<br />上平声15韵：<br />　一东二冬三江四支五微六鱼七虞八齐九佳十灰十一真十二文十三元十四寒十五删</p><p>下平声15韵：<br />　一先二萧三肴四豪五歌六麻七阳八庚九青十蒸十一尤十二侵十三覃十三盐十五咸</p><p>东冬等字都只是韵的代表字。</p><p>五律第一句多数时不押韵的；七律第一句，多数是押韵的。由于第一句押韵与否是自由的，所以第一句的韵脚也可以不太严格，用邻近的韵也行。今天我们如果也写律诗，就不必拘泥古人的诗韵。不但首句用邻韵，就是其他的韵脚用邻韵，只要朗诵起来谐和，都是可以的。</p><h2 id="律诗的平仄">律诗的平仄</h2><p>平仄，这是律诗中最重要的因素。律诗的平仄规则，一直应用到后代的词曲。我们讲诗词的格律，主要就是讲平仄。</p><h3 id="一五律的平仄">（一）五律的平仄</h3><h4 id="仄起式">（1）仄起式</h4><h5 id="基本式">1 基本式</h5><p>仄仄平平仄，平平仄仄平。<br />平平平仄仄，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。<br />平平平仄仄，仄仄仄平平。</p><h5 id="变式">2 变式</h5><p>将1的首句改为仄仄仄平平，其余不变即是仄起变式。<br />仄仄仄平平，平平仄仄平。<br />平平平仄仄，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。<br />平平平仄仄，仄仄仄平平。</p><h4 id="平起式">（2）平起式</h4><h5 id="基本式-1">1 基本式</h5><p>平平平仄仄，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。<br />平平平仄仄，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。</p><h5 id="变式-1">2 变式</h5><p>将1的首句改为平平仄仄平，其余不变即是平起变式，但这种情况较少。<br />平平仄仄平，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。<br />平平平仄仄，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。</p><h3 id="二七律的平仄">（二）七律的平仄</h3><p>七律是五律的扩展，扩展的办法是在五字句的上面加一个两字的头。仄上加平，平上加仄。</p><h4 id="平仄脚">平仄脚</h4><p>五言仄起仄收： o o 仄仄平平仄<br />七言平起仄收：平平仄仄平平仄</p><h4 id="仄平脚">仄平脚</h4><p>五言平起平收： o o 平平仄仄平<br />七言仄起平收：仄仄平平仄仄平</p><h4 id="仄仄脚">仄仄脚</h4><p>五言平起仄收： o o 平平平仄仄<br />七言仄起仄收：仄仄平平平仄仄</p><h4 id="平平脚">平平脚</h4><p>五言仄起平收： o o 仄仄仄平平<br />七言平起平收：平平仄仄仄平平</p><p>由这四种类型的平仄错综变化，可以换成七律的四种格式。其实只有两种基本格式，其余两种不过在基本格式的基础上稍有变化罢了。</p><h4 id="仄起式-1">（1）仄起式</h4><h5 id="基本式-2">1 基本式</h5><p>仄仄平平仄仄平，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。</p><h5 id="变式-2">2 变式</h5><p>第一句改为仄仄平平平仄仄，其余不变。<br />仄仄平平平仄仄，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。</p><h4 id="平起式-1">（2）平起式</h4><h5 id="基本式-3">1 基本式</h5><p>平平仄仄仄平平，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。</p><h5 id="变式-3">2 变式</h5><p>第一句改为平平仄仄平平仄，其余不变。<br />平平仄仄平平仄，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。</p><h3 id="三粘对">（三）粘对</h3><p>对，就是平对仄，仄对平。也就是上文所说的：在对句中，平仄是对立的。五律的"对"，只有两副对联的形式，即：<br />（1 ）仄仄平平仄，平平仄仄平。<br />（2 ）平平平仄仄，仄仄仄平平。</p><p>七律的"对"，也只有两副对联的形式，即： （1）平平仄仄平平仄，仄仄平平仄仄平。<br />（2 ）仄仄平平平仄仄，平平仄仄仄平平。</p><p>如果首句用韵，则首联的平仄就不是完全对立的。由于韵脚的限制，也只能这样办.。这样，五律的首联成为：<br />（1 ）仄仄仄平平，平平仄仄平。或者是：<br />（2 ）平平仄仄平，仄仄仄平平。<br />七律的首联成为：<br />（1 ）平平仄仄仄平平，仄仄平平仄仄平。或者是：<br />（2 ）仄仄平平仄仄平，平平仄仄仄平平。</p><p>粘，就是平粘平，仄粘仄；后联出句第二字的平仄要跟前联对句第二字相一致。具体说来，要使第三句跟第二句相粘，第五句跟第四句相粘，第七句跟第六句相粘。<br />违反了粘的规则，叫做失粘；违反了对的规则，叫做失对。</p><h3 id="四孤平">（四）孤平</h3><p>孤平是律诗（包括长律、律绝）的大忌，所以诗人们在写律诗的时候，注意避免孤平。在词曲中用到同类句子的时候，也注意避免孤平。</p><p>在五言"平平仄仄平"这个句型中，第一字必须用平声；如果用了仄声字，就是犯了孤平。因为除了韵脚之外，只剩一个平声字了。七言是五言的扩展，所以在"仄仄平平仄仄平"这个句型中，第三字如果用了仄声，也叫犯孤平。</p><h3 id="五特定的一种平仄格式">（五）特定的一种平仄格式</h3><p>在五言"平平平仄仄"这个句型中，可以使用另一个格式，就是"平平仄平仄"；七言是五言的扩展，所以在七言"仄仄平平平仄仄"这个句型中，也可以使用另一个格式，就是"仄仄平平仄平仄"。这种格式的特点是：五言第三四两字的平仄互换位置，七言第五六两字的平仄互换位置。注意：在这种情况下，五言第一字、七言第三字必须用平声，不再是可平可仄的了。</p><h3 id="六拗救">（六）拗救</h3><p>凡平仄不依常格的句子，叫做拗句。律诗中如果多用拗句，就变成了古风式的律诗。前面一字用拗，后面还必须用"救"。所谓"救"，就是补偿。一般说来，前面该用平声的地方用了仄声，后面必须在适当的位置上补偿一个平声。下面的三种情况是比较常见的：<br />（a）在该用"平平仄仄平"的地方，第一字用了仄声，第三字补偿一个平声，以免犯孤平。这样就变成了"仄平平仄平"。七言则是由"仄仄平平仄仄平"换成"仄仄仄平平仄平"。这是本句自救。<br />（b）在该用"仄仄平平仄"的地方，第四字用了仄声（或三四两字都用了仄声），就在对句的第三字改用了平声来补偿。这样就成为"仄仄平仄仄，平平平仄平"。七言则成为"平平仄仄平仄仄，仄仄平平平仄平"。这是对句相救。<br />（c）在该用"仄仄平平仄"的地方，第四字没有用仄声，只是第三字用了仄声。七言则是第五字用了仄声。这是半拗，可救可不救，和（a ）（b ）的严格性稍有不同。</p><p>诗人们在运用（a ）的同时，常常在出句用（b ）或（c）。这样既构成本句自救，又构成对句相救。</p><h2 id="律诗的对仗">律诗的对仗</h2><p>词的分类是对仗的基础。古代诗人们在应用对仗时所分的词类，和今天语法上所分的词类大同小异，不过当时诗人们并没有给它们起一些语法术语罢了。依照律诗的对仗概括起来，词大约可以分为下列的九类：<br />1、名词 2、形容词 3、数词（数目字）4、颜色词 5、方位词6、动词 7、副词8、虚词 9、代词<br />同类的词相为对仗。我们应该特别注意四点：<br />（a ）数目自成一类，"孤""半"等字也算是数目。<br />（b ）颜色自成一类。<br />（c ）方位自成一类，主要是"东""西""南""北"等字。这三类词很少跟别的词相对。（d ）不及物动词常常跟形容词相对。<br />连绵字只能跟连绵字相对。连绵字当中又再分为名词连绵字（鸳鸯、鹦鹉等）。不同词性的连绵字一般还是不能相对。<br />专名只能与专名相对，最好是人名对人名，地名对地名。</p><p>古人把律诗的第一二两句叫做首联，第三四两句叫做颔联，第五六两句叫做颈联，第七八两句叫做尾联。对仗一般用在颔联和颈联，即第三四句和第五六句。首联的对仗是可用可不用的。首联用了对仗，并不因此减少中两联的对仗。</p>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>格律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>experiment of socket</title>
    <link href="/2024/11/21/experiment-of-socket/"/>
    <url>/2024/11/21/experiment-of-socket/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>Sincerely recommend read this article on my <ahref="https://symcreg.github.io/2024/11/21/experiment-of-socket/">Blog</a>,the Blog will have a better reading experience.</p><p>And the code is on my <ahref="https://github.com/symcreg/experiment_socket">Github</a></p><h3 id="a.-the-experiment-purpose">A. The experiment purpose</h3><p>two computer hosts as server and client communicate with eachother.<br />With socket programmning respectively with TCP and UDP, realize thefollowing application:<br />1. client reads a line of characters (data) from its keyboard and sendsdata to server<br />2. server receives the data<br />3. server converts lowercase letters to uppercase letters , and sendsthe data to client<br />4. client receives the data and displays line on its screen</p><figure><img src="/img/experiment-of-socket/process.png" alt="process" /><figcaption aria-hidden="true">process</figcaption></figure><h3 id="b.-materials">B. Materials</h3><p>Hardware: Lenovo Legion R7000<br />Software: Windows11, Ubuntu18.04, Clion, Pycharm,VMware Workstation,c++, python<br />Network Configuration: Bridge Mode between virtual machine and physicalmachine</p><h3 id="c.-procedure">C. Procedure</h3><h4id="first-we-need-to-figure-out-the-ip-address-of-the-server-and-client.">0.First, we need to figure out the IP address of the server andclient.</h4><p>In windows, we can use 'ipconfig' to get the IP address of the serverand client while in linux, we can use ifconfig to get the IP address ofthe server and client.(In this experiment, the server is the physicalmachine and the client is the virtual machine, and the network mode isbridge mode)</p><p><img src="/img/experiment-of-socket/ipconfig.png"alt="ipconfig" /><br /><img src="/img/experiment-of-socket/ifconfig.png" alt="ifconfig" /></p><p>in this experiment, the IP address of the server is:10.136.12.124</p><p>and the IP address of the client is: 192.168.58.130</p><p>we choose 8080 as the port of the server.</p><p>use ping to check the connection between the server and theclient.</p><figure><img src="/img/experiment-of-socket/ping.png" alt="ping" /><figcaption aria-hidden="true">ping</figcaption></figure><p>if the ping is successful, we can start the socket programming.</p><h4 id="server-side">1. Server side</h4><h5 id="create-a-socket-with-the-socket-system-call.">1.1. Create asocket with the socket() system call.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++">WORD version = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA data;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(version, &amp;data) != <span class="hljs-number">0</span>) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to start WSA&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;port_ = port;<br><span class="hljs-comment">//protocol: 0 means TCP, 1 means UDP</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;server_fd_ = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;server_fd_ = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;server_fd_ == <span class="hljs-number">-1</span>) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to create socket&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_family = AF_INET; <span class="hljs-comment">//sin means socket internet</span><br><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_addr.s_addr = INADDR_ANY;<br><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-keyword">this</span>-&gt;port_);<br><br></code></pre></td></tr></table></figure><p>we set the verstion of the socket to 2.2, and start the WSA, thencreate a socket with the socket() system call. We can choose theprotocol of the socket, 0 means TCP, 1 means UDP.</p><p>parameters of the socket() system call:<br />- domain: AF_INET(ipv4), AF_INET6, AF_UNIX, AF_UNSPEC<br />- type: SOCK_STREAM(tcp), SOCK_DGRAM(udp), SOCK_RAW,SOCK_SEQPACKET<br />- protocol: 0 means auto choose the protocol</p><p>Then we set the server address, the family is AF_INET, the address isINADDR_ANY, and the port is the port we choose(8080).</p><p>fd means file descriptor, which is an integer that is used to accessthe socket.</p><h5id="bind-the-socket-to-an-address-using-the-bind-system-call.-for-a-server-socket-on-the-internet-an-address-consists-of-a-port-number-on-the-host-machine.">1.2.Bind the socket to an address using the bind() system call. For a serversocket on the Internet, an address consists of a port number on the hostmachine.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_family = AF_INET; <span class="hljs-comment">//sin means socket internet</span><br><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_addr.s_addr = INADDR_ANY;<br><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-keyword">this</span>-&gt;port_);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;server_addr_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;server_addr_)) &lt; <span class="hljs-number">0</span>) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to bind socket&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">this</span>-&gt;client_addr_len_ = <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;client_addr_);<br></code></pre></td></tr></table></figure><p>we set the server address again, then bind the socket to the addresswe set before. If the bind() system call fails, we will exit theprogram.</p><h5 id="listen-for-connections-with-the-listen-system-call.">1.3. Listenfor connections with the listen() system call.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;[TCP]&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, <span class="hljs-number">10</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to listen&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;[UDP]&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Server started on port &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;port_ &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>if the protocol is TCP, we will listen for connections with thelisten() system call, the second parameter is the maximum length of thequeue of pending connections, if the queue is full, the client will berefused to connect.</p><p>if the protocol is UDP, we will just print "[UDP]" because UDP isconnectionless.</p><h5id="accept-a-connection-with-the-accept-system-call.-this-call-typically-blocks-until-a-client-connects-with-the-server.">1.4.Accept a connection with the accept() system call. This call typicallyblocks until a client connects with the server.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;UDP does not support accept&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;client_fd_ = ::<span class="hljs-built_in">accept</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_len_);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;client_fd_ &lt; <span class="hljs-number">0</span>) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to accept client&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Client connected&quot;</span> &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>UDP does not support accept, so we will exit the program if theprotocol is UDP.</p><p>if the protocol is TCP, we will accept a connection with the accept()system call, the second parameter is the address of the client, thethird parameter is the length of the address of the client.</p><h5 id="send-and-receive-data.">1.5. Send and receive data.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (::<span class="hljs-built_in">send</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to send message&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sendto</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;client_addr_)) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to send message&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>if the protocol is TCP, we will use send() to send the message to theclient.</p><p>if the protocol is UDP, we will use sendto() to send the message tothe client.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">memset</span>(<span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_));<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recv</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_, <span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_), <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to receive message&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recvfrom</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, <span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_len_) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to receive message&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;buffer_size_ = <span class="hljs-built_in">strlen</span>(<span class="hljs-keyword">this</span>-&gt;buffer_);<br><span class="hljs-keyword">return</span> buffer_size_;<br></code></pre></td></tr></table></figure><p>if the protocol is TCP, we will use recv() to receive the messagefrom the client.</p><p>if the protocol is UDP, we will use recvfrom() to receive the messagefrom the client.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">Server::GetBuffer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;buffer_;<br>&#125;<br></code></pre></td></tr></table></figure><p>we will return the buffer pointer to the client for stringprocessing.</p><h5 id="close-the-connection.">1.6. Close the connection.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Server::Close</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">closesocket</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_);<br>    <span class="hljs-built_in">closesocket</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_);<br>    <span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>Just close the client_fd and server_fd, and cleanup the WSA.</p><h4 id="main-function">~ main function</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;server.h&quot;</span></span><br><br><span class="hljs-type">int</span> protocol = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Lowercase2Uppercase</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; str[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>            str[i] -= <span class="hljs-number">32</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Server <span class="hljs-title">server</span><span class="hljs-params">(<span class="hljs-number">8080</span>, protocol)</span></span>;<br>    server.<span class="hljs-built_in">Start</span>();<br>    <span class="hljs-type">int</span> msg_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(protocol == <span class="hljs-number">0</span>)&#123;<br>            server.<span class="hljs-built_in">Accept</span>();<br>        &#125;<br>        msg_size = server.<span class="hljs-built_in">Receive</span>();<br>        <span class="hljs-keyword">if</span>(msg_size)&#123;<br>            <span class="hljs-keyword">if</span>(server.<span class="hljs-built_in">GetBuffer</span>()[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;q&#x27;</span> &amp;&amp; server.<span class="hljs-built_in">GetBuffer</span>()[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Client: &quot;</span> &lt;&lt; server.<span class="hljs-built_in">GetBuffer</span>() &lt;&lt; std::endl;<br>            <span class="hljs-built_in">Lowercase2Uppercase</span>(server.<span class="hljs-built_in">GetBuffer</span>());<br>            server.<span class="hljs-built_in">Send</span>(server.<span class="hljs-built_in">GetBuffer</span>());<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Server: &quot;</span> &lt;&lt; server.<span class="hljs-built_in">GetBuffer</span>() &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>    server.<span class="hljs-built_in">Close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>we create a server object with the port and protocol we choose, thenstart the server.</p><p>then we use a while loop to receive the message from the client, ifthe message is 'q', we will break the loop.</p><p>if the message is not 'q', we will print the message from the client,convert the lowercase letters to uppercase letters, send the message tothe client, and print the message from the server.</p><p>finally, we close the server.</p><h4 id="client-side">2.Client side</h4><p>We have just finished the server side with c++, now we will start theclient side with python.</p><h5 id="create-a-socket-with-the-socket-system-call.-1">2.1. Create asocket with the socket() system call.</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># protocol = socket.SOCK_STREAM # TCP</span><br>protocol = socket.SOCK_DGRAM <span class="hljs-comment"># UDP</span><br>server = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>port = <span class="hljs-number">8080</span><br><br>s = socket.socket(socket.AF_INET, protocol)<br><span class="hljs-keyword">if</span> protocol == socket.SOCK_STREAM:<br>    s.connect((server, port))<br></code></pre></td></tr></table></figure><p>we can choose the protocol of the socket, socket.SOCK_STREAM meansTCP, socket.SOCK_DGRAM means UDP.</p><p>Then we create a socket with the socket() system call, the firstparameter is the family of the socket, the second parameter is theprotocol of the socket.</p><p>if the protocol is TCP, we will connect to the server with theconnect() system call.</p><h5 id="send-and-receive-data.-1">2.2. Send and receive data.</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter your message: &#x27;</span>)<br><span class="hljs-keyword">if</span> protocol == socket.SOCK_DGRAM:<br>    s.sendto(message.encode(), (server, port))<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    response, addr = s.recvfrom(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;server: &#x27;</span>+response.decode())<br>    <span class="hljs-keyword">continue</span><br>s.send(message.encode())<br><span class="hljs-keyword">if</span> message == <span class="hljs-string">&#x27;q&#x27;</span>:<br>    <span class="hljs-keyword">break</span><br>response = s.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;server: &#x27;</span>+response.decode())<br></code></pre></td></tr></table></figure><p>if the protocol is UDP, we will use sendto() to send the message tothe server, and use recvfrom() to receive the message from theserver.</p><p>if the protocol is TCP, we will use send() to send the message to theserver, and use recv() to receive the message from the server.</p><h5 id="close-the-connection.-1">2.3. Close the connection.</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s.close()<br></code></pre></td></tr></table></figure><p>Just close the socket.</p><h3 id="d.-results-and-analysis">D. Results and Analysis</h3><h4 id="tcp">1. TCP</h4><h5 id="server-side-1">1.1. Server side</h5><figure><img src="/img/experiment-of-socket/server.png" alt="server" /><figcaption aria-hidden="true">server</figcaption></figure><h5 id="client-side-1">1.2. Client side</h5><figure><img src="/img/experiment-of-socket/client.png" alt="client" /><figcaption aria-hidden="true">client</figcaption></figure><h4 id="udp">2. UDP</h4><h5 id="server-side-2">2.1. Server side</h5><figure><img src="/img/experiment-of-socket/server-udp.png" alt="server-udp" /><figcaption aria-hidden="true">server-udp</figcaption></figure><h5 id="client-side-2">2.2. Client side</h5><figure><img src="/img/experiment-of-socket/client-udp.png" alt="client-udp" /><figcaption aria-hidden="true">client-udp</figcaption></figure><h3 id="e.-conclusion">E. Conclusion</h3><p>In this experiment, we have realized the communication between theserver and the client with socket programming.</p><p>We have used TCP and UDP respectively, and the results show that thecommunication is successful.</p><h3 id="f.-code">F. Code</h3><p>you can find the code <ahref="https://github.com/symcreg/experiment_socket">here</a>.</p><p>or the code is as follows:</p><h4 id="server.h">server.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by symc on 2024/11/21.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NET_SOCKET_SERVER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NET_SOCKET_SERVER_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> protocol_;<br>    <span class="hljs-type">int</span> port_; <span class="hljs-comment">// server port_</span><br>    <span class="hljs-type">int</span> server_fd_; <span class="hljs-comment">// server file descriptor</span><br>    <span class="hljs-type">int</span> client_fd_; <span class="hljs-comment">// client file descriptor</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> server_addr_;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> client_addr_;<br>    <span class="hljs-type">int</span> client_addr_len_;<br>    <span class="hljs-type">char</span> buffer_[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> buffer_size_ = <span class="hljs-number">1024</span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Server</span>(<span class="hljs-type">int</span> port = <span class="hljs-number">8080</span>, <span class="hljs-type">int</span> protocal = <span class="hljs-number">0</span>);<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Start</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Accept</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Send</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Receive</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">GetBuffer</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>;<br>    ~<span class="hljs-built_in">Server</span>()&#123;<br>        <span class="hljs-built_in">Close</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//NET_SOCKET_SERVER_H</span></span><br></code></pre></td></tr></table></figure><h4 id="server.cpp">server.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by symc on 2024/11/21.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;server.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><br>Server::<span class="hljs-built_in">Server</span>(<span class="hljs-type">int</span> port, <span class="hljs-type">int</span> protocal) &#123;<br>    <span class="hljs-keyword">this</span>-&gt;protocol_ = protocal;<br>    WORD version = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    WSADATA data;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(version, &amp;data) != <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to start WSA&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">this</span>-&gt;port_ = port;<br>    <span class="hljs-comment">//protocol: 0 means TCP, 1 means UDP</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;server_fd_ = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;server_fd_ = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;server_fd_ == <span class="hljs-number">-1</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to create socket&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>-&gt;server_addr_.sin_family = AF_INET; <span class="hljs-comment">//sin means socket internet</span><br>    <span class="hljs-keyword">this</span>-&gt;server_addr_.sin_addr.s_addr = INADDR_ANY;<br>    <span class="hljs-keyword">this</span>-&gt;server_addr_.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-keyword">this</span>-&gt;port_);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;server_addr_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;server_addr_)) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to bind socket&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>-&gt;client_addr_len_ = <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;client_addr_);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Server::Start</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;[TCP]&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, <span class="hljs-number">10</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to listen&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;[UDP]&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Server started on port &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;port_ &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Server::Accept</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;UDP does not support accept&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">this</span>-&gt;client_fd_ = ::<span class="hljs-built_in">accept</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_len_);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;client_fd_ &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to accept client&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Client connected&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Server::Send</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (::<span class="hljs-built_in">send</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to send message&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sendto</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;client_addr_)) &lt; <span class="hljs-number">0</span>) &#123;<br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to send message&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Server::Receive</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(<span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recv</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_, <span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_), <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to receive message&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recvfrom</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, <span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_len_) &lt; <span class="hljs-number">0</span>) &#123;<br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to receive message&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">this</span>-&gt;buffer_size_ = <span class="hljs-built_in">strlen</span>(<span class="hljs-keyword">this</span>-&gt;buffer_);<br>    <span class="hljs-keyword">return</span> buffer_size_;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">Server::GetBuffer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;buffer_;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Server::Close</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">closesocket</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_);<br>    <span class="hljs-built_in">closesocket</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_);<br>    <span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="main.cpp">main.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;server.h&quot;</span></span><br><br><span class="hljs-type">int</span> protocol = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Lowercase2Uppercase</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; str[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>            str[i] -= <span class="hljs-number">32</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Server <span class="hljs-title">server</span><span class="hljs-params">(<span class="hljs-number">8080</span>, protocol)</span></span>;<br>    server.<span class="hljs-built_in">Start</span>();<br>    <span class="hljs-type">int</span> msg_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(protocol == <span class="hljs-number">0</span>)&#123;<br>            server.<span class="hljs-built_in">Accept</span>();<br>        &#125;<br>        msg_size = server.<span class="hljs-built_in">Receive</span>();<br>        <span class="hljs-keyword">if</span>(msg_size)&#123;<br>            <span class="hljs-keyword">if</span>(server.<span class="hljs-built_in">GetBuffer</span>()[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;q&#x27;</span> &amp;&amp; server.<span class="hljs-built_in">GetBuffer</span>()[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Client: &quot;</span> &lt;&lt; server.<span class="hljs-built_in">GetBuffer</span>() &lt;&lt; std::endl;<br>            <span class="hljs-built_in">Lowercase2Uppercase</span>(server.<span class="hljs-built_in">GetBuffer</span>());<br>            server.<span class="hljs-built_in">Send</span>(server.<span class="hljs-built_in">GetBuffer</span>());<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Server: &quot;</span> &lt;&lt; server.<span class="hljs-built_in">GetBuffer</span>() &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>    server.<span class="hljs-built_in">Close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>we should also add the ws2_32.lib in the CMakeLists.txt file.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">target_link_libraries</span>(net_socket ws2_32)<br></code></pre></td></tr></table></figure><h4 id="client.py">client.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-comment"># protocol = socket.SOCK_STREAM # TCP</span><br>protocol = socket.SOCK_DGRAM <span class="hljs-comment"># UDP</span><br>server = <span class="hljs-string">&#x27;10.136.12.124&#x27;</span><span class="hljs-comment"># 10.136.12.124</span><br>port = <span class="hljs-number">8080</span><br><br>s = socket.socket(socket.AF_INET, protocol)<br><span class="hljs-keyword">if</span> protocol == socket.SOCK_STREAM:<br>    s.connect((server, port))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter your message: &#x27;</span>)<br>    <span class="hljs-keyword">if</span> protocol == socket.SOCK_DGRAM:<br>        s.sendto(message.encode(), (server, port))<br>        <span class="hljs-keyword">if</span> message == <span class="hljs-string">&#x27;q&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        response, addr = s.recvfrom(<span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;server: &#x27;</span>+response.decode())<br>        <span class="hljs-keyword">continue</span><br>    s.send(message.encode())<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    response = s.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;server: &#x27;</span>+response.decode())<br><br>s.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>high order control barrier functions with time varying output constraints</title>
    <link href="/2024/09/28/high-order-control-barrier-functions-with-time-varying-output-constraints/"/>
    <url>/2024/09/28/high-order-control-barrier-functions-with-time-varying-output-constraints/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>记录一下拖了一周的HOCBF设计过程。</p><h2 id="问题描述">问题描述</h2><p>给定一个非线性系统：<br /><span class="math display">\[\dot{x} = f(x) + g(x)u\]</span></p><p>其中<spanclass="math inline">\(x\in\mathbb{R}^n\)</span>是系统状态，<spanclass="math inline">\(u\in\mathbb{R}^m\)</span>是控制输入，<spanclass="math inline">\(f(x)\)</span>和<spanclass="math inline">\(g(x)\)</span>是已知的连续函数。</p><p>CBF：<br /><span class="math display">\[h(x) \geq 0\]</span> 其约束为：<br /><span class="math display">\[L_fh(x) + L_gh(x)u \geq -\alpha(h(x))\]</span></p><p>其中<span class="math inline">\(h(x)\)</span>是已知的连续函数。</p><p>设h(t,x)是时间t的函数，其相关度为<spanclass="math inline">\(\lambda\)</span>，则HOCBF约束为：<br /><span class="math display">\[L_f^{\lambda}h(t,x) + L_gL_f^{\lambda-1}h(t,x)u +\frac{\partial^{\lambda} h(t,x)}{\partial t^{\lambda}} \geq-K_{\alpha}(\mu(t,x))\]</span> 其中：<br /><span class="math display">\[K_{\alpha} = \left[\begin{matrix} \alpha_0 &amp; \alpha_1 &amp; \cdots&amp; \alpha_{\lambda-1} \end{matrix} \right]\]</span> <span class="math display">\[\mu(t,x) = \left[\begin{matrix} h(t,x) &amp; L_fh(t,x)+\frac{\partialh(t,x)}{\partial t} &amp; \cdots &amp; L_f^{\lambda-1}h(t,x)+\frac{\partial^{\lambda-1} h(t,x)}{\partial t^{\lambda-1}} \end{matrix}\right]^T\]</span></p><p>确定<spanclass="math inline">\(\alpha_i\)</span>的值，使得HOCBF约束成立。</p><p><span class="math inline">\(\alpha_i\)</span>应满足：<br /><span class="math display">\[s^{\lambda} + \alpha_{\lambda-1}s^{\lambda-1} + \cdots + \alpha_1s +\alpha_0\]</span> <span class="math display">\[\gamma_i &lt; 0\]</span> 其中<spanclass="math inline">\(\gamma_i\)</span>是系统的特征值。</p><h2 id="设计过程">设计过程</h2><p>以三维空间的障碍物避障为例，系统状态为：<br /><span class="math display">\[x = \left[\begin{matrix} x &amp; y &amp; z \end{matrix}\right]^T\]</span> 仿射系统：<br /><span class="math display">\[\dot{x} = f(x) + g(x)u\]</span> 障碍物位置：<br /><span class="math display">\[p_{obs} = \left[\begin{matrix} x_{obs} &amp; y_{obs} &amp; z_{obs}\end{matrix}\right]^T\]</span> 定义CBF：<br /><span class="math display">\[h(x) = (x-x_{obs})^T(x-x_{obs}) - r^2\]</span> 其中r是障碍物半径。</p><p>设相关度<spanclass="math inline">\(\lambda=2\)</span>，则HOCBF约束为：<br /><span class="math display">\[L_f^{2}h(t,x) + L_gL_fh(t,x)u + \frac{\partial^{2} h(t,x)}{\partialt^{2}} \geq -K_{\alpha}(\mu(t,x))\]</span> 其中：<br /><span class="math display">\[K_{\alpha} = \left[\begin{matrix} \alpha_0 &amp; \alpha_1 \end{matrix}\right]\]</span> <span class="math display">\[\mu(t,x) = \left[\begin{matrix} h(t,x) &amp; L_fh(t,x)+\frac{\partialh(t,x)}{\partial t} \end{matrix} \right]^T\]</span></p><p>分别计算<span class="math inline">\(L_f^{2}h(t,x), L_gL_fh(t,x),\frac{\partial^{2} h(t,x)}{\partial t^{2}}\)</span>：<br /><span class="math display">\[L_fh(t,x) = \nabla h(x) \cdot f(x) = 2(x-x_{obs}) \cdot f(x)\]</span> <span class="math display">\[L_f^{2}h(t,x) = \nabla L_fh(x) \cdot f(x) = 2f(x) \cdot f(x) +2(x-x_{obs}) \cdot \nabla f(x) \cdot f(x)\]</span> <span class="math display">\[L_gL_fh(t,x) = \nabla L_fh(x) \cdot g(x) = 2f(x) \cdot g(x) +2(x-x_{obs}) \cdot \nabla f(x) \cdot g(x)\]</span> <span class="math display">\[\frac{\partial h(t,x)}{\partial t} = 2(x-x_{obs}) \cdot \dot{x}\]</span> <span class="math display">\[\frac{\partial^{2} h(t,x)}{\partial t^{2}} = 2(\dot{x} \cdot \dot{x} +(x-x_{obs}) \cdot \ddot{x})\]</span> 此处<span class="math inline">\(\cdot\)</span>都是点乘。</p><p>代入HOCBF约束中，得到：<br /><span class="math display">\[2f(x) \cdot f(x) + 2(x-x_{obs}) \cdot \nabla f(x) \cdot f(x) + 2f(x)\cdot g(x) + 2(x-x_{obs}) \cdot \nabla f(x) \cdot g(x) \cdot u +2(\dot{x} \cdot \dot{x} + (x-x_{obs}) \cdot \ddot{x}) \geq-K_{\alpha}(\mu(t,x))\]</span></p><h2 id="qp问题">QP问题</h2><p>标准QP问题：<br /><span class="math display">\[x = argmin \frac{1}{2}x^THx + F^Tx\]</span> <span class="math display">\[s.t. Ax \geq b\]</span> 将HOCBF约束转化为QP问题：<br /><span class="math display">\[u = argmin \frac{1}{2} ||u - u_{ref}||^2\]</span> <span class="math display">\[s.t. L_f^{2}h(t,x) + L_gL_fh(t,x)u + \frac{\partial^{2} h(t,x)}{\partialt^{2}} \geq -K_{\alpha}(\mu(t,x))\]</span> 其中<spanclass="math inline">\(u_{ref}\)</span>是控制输入的参考值。<br />对于正定矩阵H和常数项F，由于：<br /><span class="math display">\[||u - u_{ref}||^2 = (u - u_{ref})^T(u - u_{ref}) = u^Tu - 2u^Tu_{ref} +u_{ref}^Tu_{ref}\]</span> 忽略常数项，得到：<br /><span class="math display">\[H = I\]</span> <span class="math display">\[F = -2u_{ref}\]</span></p><p>再对QP进行求解，得到控制输入u。</p>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>franka cartesian impedance control example</title>
    <link href="/2024/09/18/franka-cartesian-impedance-control-example/"/>
    <url>/2024/09/18/franka-cartesian-impedance-control-example/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="代码">1.代码</h1><p>franka官方给出的笛卡尔空间下的阻抗控制例程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Copyright (c) 2023 Franka Robotics GmbH</span><br><span class="hljs-comment">// Use of this source code is governed by the Apache-2.0 license, see LICENSE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Eigen/Dense&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;franka/duration.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;franka/exception.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;franka/model.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;franka/robot.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;examples_common.h&quot;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>  <span class="hljs-comment">// Check whether the required arguments were passed</span><br>  <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; &lt;robot-hostname&gt;&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br> <br>  <span class="hljs-comment">// Compliance parameters</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> translational_stiffness&#123;<span class="hljs-number">150.0</span>&#125;;<br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> rotational_stiffness&#123;<span class="hljs-number">10.0</span>&#125;;<br>  <span class="hljs-function">Eigen::MatrixXd <span class="hljs-title">stiffness</span><span class="hljs-params">(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>)</span>, <span class="hljs-title">damping</span><span class="hljs-params">(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>)</span></span>;<br>  stiffness.<span class="hljs-built_in">setZero</span>();<br>  stiffness.<span class="hljs-built_in">topLeftCorner</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) &lt;&lt; translational_stiffness * Eigen::MatrixXd::<span class="hljs-built_in">Identity</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>  stiffness.<span class="hljs-built_in">bottomRightCorner</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) &lt;&lt; rotational_stiffness * Eigen::MatrixXd::<span class="hljs-built_in">Identity</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>  damping.<span class="hljs-built_in">setZero</span>();<br>  damping.<span class="hljs-built_in">topLeftCorner</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">2.0</span> * <span class="hljs-built_in">sqrt</span>(translational_stiffness) *<br>                                     Eigen::MatrixXd::<span class="hljs-built_in">Identity</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>  damping.<span class="hljs-built_in">bottomRightCorner</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">2.0</span> * <span class="hljs-built_in">sqrt</span>(rotational_stiffness) *<br>                                         Eigen::MatrixXd::<span class="hljs-built_in">Identity</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br> <br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// connect to robot</span><br>    <span class="hljs-function">franka::Robot <span class="hljs-title">robot</span><span class="hljs-params">(argv[<span class="hljs-number">1</span>])</span></span>;<br>    <span class="hljs-built_in">setDefaultBehavior</span>(robot);<br>    <span class="hljs-comment">// load the kinematics and dynamics model</span><br>    franka::Model model = robot.<span class="hljs-built_in">loadModel</span>();<br> <br>    franka::RobotState initial_state = robot.<span class="hljs-built_in">readOnce</span>();<br> <br>    <span class="hljs-comment">// equilibrium point is the initial position</span><br>    <span class="hljs-function">Eigen::Affine3d <span class="hljs-title">initial_transform</span><span class="hljs-params">(Eigen::Matrix4d::Map(initial_state.O_T_EE.data()))</span></span>;<br>    <span class="hljs-function">Eigen::Vector3d <span class="hljs-title">position_d</span><span class="hljs-params">(initial_transform.translation())</span></span>;<br>    <span class="hljs-function">Eigen::Quaterniond <span class="hljs-title">orientation_d</span><span class="hljs-params">(initial_transform.rotation())</span></span>;<br> <br>    <span class="hljs-comment">// set collision behavior</span><br>    robot.<span class="hljs-built_in">setCollisionBehavior</span>(&#123;&#123;<span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>&#125;&#125;,<br>                               &#123;&#123;<span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>&#125;&#125;,<br>                               &#123;&#123;<span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>&#125;&#125;,<br>                               &#123;&#123;<span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>&#125;&#125;);<br> <br>    <span class="hljs-comment">// define callback for the torque control loop</span><br>    std::function&lt;franka::Torques(<span class="hljs-type">const</span> franka::RobotState&amp;, franka::Duration)&gt;<br>        impedance_control_callback = [&amp;](<span class="hljs-type">const</span> franka::RobotState&amp; robot_state,<br>                                         franka::Duration <span class="hljs-comment">/*duration*/</span>) -&gt; franka::Torques &#123;<br>      <span class="hljs-comment">// get state variables</span><br>      std::array&lt;<span class="hljs-type">double</span>, <span class="hljs-number">7</span>&gt; coriolis_array = model.<span class="hljs-built_in">coriolis</span>(robot_state);<br>      std::array&lt;<span class="hljs-type">double</span>, 42&gt; jacobian_array =<br>          model.<span class="hljs-built_in">zeroJacobian</span>(franka::Frame::kEndEffector, robot_state);<br> <br>      <span class="hljs-comment">// convert to Eigen</span><br>      Eigen::Map&lt;<span class="hljs-type">const</span> Eigen::Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>&gt;&gt; <span class="hljs-built_in">coriolis</span>(coriolis_array.<span class="hljs-built_in">data</span>());<br>      Eigen::Map&lt;<span class="hljs-type">const</span> Eigen::Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&gt;&gt; <span class="hljs-built_in">jacobian</span>(jacobian_array.<span class="hljs-built_in">data</span>());<br>      Eigen::Map&lt;<span class="hljs-type">const</span> Eigen::Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>&gt;&gt; <span class="hljs-built_in">q</span>(robot_state.q.<span class="hljs-built_in">data</span>());<br>      Eigen::Map&lt;<span class="hljs-type">const</span> Eigen::Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>&gt;&gt; <span class="hljs-built_in">dq</span>(robot_state.dq.<span class="hljs-built_in">data</span>());<br>      <span class="hljs-function">Eigen::Affine3d <span class="hljs-title">transform</span><span class="hljs-params">(Eigen::Matrix4d::Map(robot_state.O_T_EE.data()))</span></span>;<br>      <span class="hljs-function">Eigen::Vector3d <span class="hljs-title">position</span><span class="hljs-params">(transform.translation())</span></span>;<br>      <span class="hljs-function">Eigen::Quaterniond <span class="hljs-title">orientation</span><span class="hljs-params">(transform.rotation())</span></span>;<br> <br>      <span class="hljs-comment">// compute error to desired equilibrium pose</span><br>      <span class="hljs-comment">// position error</span><br>      Eigen::Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>&gt; error;<br>      error.<span class="hljs-built_in">head</span>(<span class="hljs-number">3</span>) &lt;&lt; position - position_d;<br> <br>      <span class="hljs-comment">// orientation error</span><br>      <span class="hljs-comment">// &quot;difference&quot; quaternion</span><br>      <span class="hljs-keyword">if</span> (orientation_d.<span class="hljs-built_in">coeffs</span>().<span class="hljs-built_in">dot</span>(orientation.<span class="hljs-built_in">coeffs</span>()) &lt; <span class="hljs-number">0.0</span>) &#123;<br>        orientation.<span class="hljs-built_in">coeffs</span>() &lt;&lt; -orientation.<span class="hljs-built_in">coeffs</span>();<br>      &#125;<br>      <span class="hljs-comment">// &quot;difference&quot; quaternion</span><br>      <span class="hljs-function">Eigen::Quaterniond <span class="hljs-title">error_quaternion</span><span class="hljs-params">(orientation.inverse() * orientation_d)</span></span>;<br>      error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>) &lt;&lt; error_quaternion.<span class="hljs-built_in">x</span>(), error_quaternion.<span class="hljs-built_in">y</span>(), error_quaternion.<span class="hljs-built_in">z</span>();<br>      <span class="hljs-comment">// Transform to base frame</span><br>      error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>) &lt;&lt; -transform.<span class="hljs-built_in">rotation</span>() * error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>);<br> <br>      <span class="hljs-comment">// compute control</span><br>      <span class="hljs-function">Eigen::VectorXd <span class="hljs-title">tau_task</span><span class="hljs-params">(<span class="hljs-number">7</span>)</span>, <span class="hljs-title">tau_d</span><span class="hljs-params">(<span class="hljs-number">7</span>)</span></span>;<br> <br>      <span class="hljs-comment">// Spring damper system with damping ratio=1</span><br>      tau_task &lt;&lt; jacobian.<span class="hljs-built_in">transpose</span>() * (-stiffness * error - damping * (jacobian * dq));<br>      tau_d &lt;&lt; tau_task + coriolis;<br> <br>      std::array&lt;<span class="hljs-type">double</span>, 7&gt; tau_d_array&#123;&#125;;<br>      Eigen::VectorXd::<span class="hljs-built_in">Map</span>(&amp;tau_d_array[<span class="hljs-number">0</span>], <span class="hljs-number">7</span>) = tau_d;<br>      <span class="hljs-keyword">return</span> tau_d_array;<br>    &#125;;<br> <br>    <span class="hljs-comment">// start real-time control loop</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;WARNING: Collision thresholds are set to high values. &quot;</span><br>              &lt;&lt; <span class="hljs-string">&quot;Make sure you have the user stop at hand!&quot;</span> &lt;&lt; std::endl<br>              &lt;&lt; <span class="hljs-string">&quot;After starting try to push the robot and see how it reacts.&quot;</span> &lt;&lt; std::endl<br>              &lt;&lt; <span class="hljs-string">&quot;Press Enter to continue...&quot;</span> &lt;&lt; std::endl;<br>    std::cin.<span class="hljs-built_in">ignore</span>();<br>    robot.<span class="hljs-built_in">control</span>(impedance_control_callback);<br> <br>  &#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> franka::Exception&amp; ex) &#123;<br>    <span class="hljs-comment">// print exception</span><br>    std::cout &lt;&lt; ex.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>  &#125;<br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="说明">2.说明</h1><p>记录一下关键代码的部分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">franka::Robot <span class="hljs-title">robot</span><span class="hljs-params">(argv[<span class="hljs-number">1</span>])</span></span>;<br><span class="hljs-built_in">setDefaultBehavior</span>(robot);<br><span class="hljs-comment">// load the kinematics and dynamics model</span><br>franka::Model model = robot.<span class="hljs-built_in">loadModel</span>();<br><br>franka::RobotState initial_state = robot.<span class="hljs-built_in">readOnce</span>();<br></code></pre></td></tr></table></figure><p>使用<code>franka::Robot</code>类初始化机械臂，设置默认行为，加载机械臂的运动学和动力学模型，读取机械臂的初始状态。<br />官方文档给的ip是172.16.0.2。<br />这里有个坑是，如果用apt安装libfranka和franka_ros库的话，examples_common.h头文件会找不到，需要在libfranka的GitHub仓库手动下载examples_common.h和对应的cpp文件，放到工程目录下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Eigen::Affine3d <span class="hljs-title">initial_transform</span><span class="hljs-params">(Eigen::Matrix4d::Map(initial_state.O_T_EE.data()))</span></span>;<br><span class="hljs-function">Eigen::Vector3d <span class="hljs-title">position_d</span><span class="hljs-params">(initial_transform.translation())</span></span>;<br><span class="hljs-function">Eigen::Quaterniond <span class="hljs-title">orientation_d</span><span class="hljs-params">(initial_transform.rotation())</span></span>;<br></code></pre></td></tr></table></figure><p>将机械臂的初始位姿转换为Eigen的Affine3d类型，分别提取出位置和四元数表示的姿态。<br />这里需要注意initial_state.O_T_EE.data()，libfranka提供的机械臂状态数据是全部是以列优先的array数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::function&lt;franka::Torques(<span class="hljs-type">const</span> franka::RobotState&amp;, franka::Duration)&gt;<br>    impedance_control_callback = [&amp;](<span class="hljs-type">const</span> franka::RobotState&amp; robot_state, franka::Duration <span class="hljs-comment">/*duration*/</span>) -&gt; franka::Torques &#123;&#125;<br></code></pre></td></tr></table></figure><p>前面的function是cpp11的函数容器，后面的lambda表达式是函数体。<br />简单说明function的用法，&lt;&gt;中间外层是函数的返回值类型，内层是参数类型（括号内）。<br />lambda表达式的写法是<code>[capture](parameters) -&gt; return_type &#123;body&#125;</code>。<br />其中capture是捕获列表，parameters是参数列表，return_type是返回值类型，body是函数体。<br />capture可以是<code>[]</code>，<code>[&amp;]</code>，<code>[=]</code>，<code>[this]</code>，<code>[&amp;a, b]</code>等。<br /><code>[&amp;]</code>表示引用捕获，<code>[=]</code>表示值捕获，<code>[this]</code>表示捕获当前对象的this指针。<br /><code>-&gt; return_type</code>是返回值类型，可以省略。<br /><code>&#123;body&#125;</code>是函数体，可以省略。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">error.<span class="hljs-built_in">head</span>(<span class="hljs-number">3</span>) &lt;&lt; position - position_d;<br></code></pre></td></tr></table></figure><p>对于位移的误差，直接相减即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// &quot;difference&quot; quaternion</span><br><span class="hljs-keyword">if</span> (orientation_d.<span class="hljs-built_in">coeffs</span>().<span class="hljs-built_in">dot</span>(orientation.<span class="hljs-built_in">coeffs</span>()) &lt; <span class="hljs-number">0.0</span>) &#123;<br>orientation.<span class="hljs-built_in">coeffs</span>() &lt;&lt; -orientation.<span class="hljs-built_in">coeffs</span>();<br>&#125;<br><span class="hljs-comment">// &quot;difference&quot; quaternion</span><br><span class="hljs-function">Eigen::Quaterniond <span class="hljs-title">error_quaternion</span><span class="hljs-params">(orientation.inverse() * orientation_d)</span></span>;<br>error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>) &lt;&lt; error_quaternion.<span class="hljs-built_in">x</span>(), error_quaternion.<span class="hljs-built_in">y</span>(), error_quaternion.<span class="hljs-built_in">z</span>();<br><span class="hljs-comment">// Transform to base frame</span><br>error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>) &lt;&lt; -transform.<span class="hljs-built_in">rotation</span>() * error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>首先判断两个四元数的点积是否小于0，如果小于0，说明两个四元数的方向相反，需要取反。</p><p>然后通过orientation.inverse() *orientation_d计算姿态误差，这里可以通过旋转矩阵来理解，以<spanclass="math inline">\(^{0}{R}_{c}\)</span>(代表当前姿态)和<spanclass="math inline">\(^{0}{R}_{d}\)</span>(代表目标姿态)举例，都是相对于基坐标系的表示，那么姿态误差可以表示为<spanclass="math inline">\(^{c}{R}_{d} = ^{0}{R}_{c}^{-1} \cdot^{0}{R}_{d}\)</span>，也就是目标姿态相对于当前姿态的表示，四元数应该也是一样（的吧？）。</p><p>最后通过左乘旋转矩阵将姿态误差转换到基坐标系下。</p><p>chatgpt给出了另一种做法：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Eigen::AngleAxisd <span class="hljs-title">angle_axis_error</span><span class="hljs-params">(error_quaternion)</span></span>;<br>error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>) &lt;&lt; angle_axis_error.<span class="hljs-built_in">axis</span>() * angle_axis_error.<span class="hljs-built_in">angle</span>();<br></code></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">tau_task &lt;&lt; jacobian.<span class="hljs-built_in">transpose</span>() * (-stiffness * error - damping * (jacobian * dq));<br>tau_d &lt;&lt; tau_task + coriolis;<br></code></pre></td></tr></table></figure><p>计算力矩，左乘雅可比矩阵的转置将末端力转换为关节力，然后计算阻抗控制力矩，最后加上科里奥利力。<br />这里的例子没有乘以质量矩阵，大概是为了简化。</p><h1 id="links">3. Links</h1><ul><li><ahref="https://frankaemika.github.io/docs/installation_linux.html">libfranka</a></li><li><ahref="https://frankaemika.github.io/docs/installation_linux.html">franka_ros</a></li><li><ahref="https://frankaemika.github.io/libfranka/0.14.1/examples.html">libfranka_examples</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>franka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置franka</title>
    <link href="/2024/09/12/%E9%85%8D%E7%BD%AEfranka/"/>
    <url>/2024/09/12/%E9%85%8D%E7%BD%AEfranka/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="创建catkin工作空间">0. 创建catkin工作空间</h1><p>创建一个新的catkin工作空间：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/catkin_franka_ws/src<br></code></pre></td></tr></table></figure> 切换到工作空间的src目录：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_franka_ws/src<br></code></pre></td></tr></table></figure> 初始化工作空间：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">catkin_init_workspace<br></code></pre></td></tr></table></figure> 编译一下：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_franka_ws<br>catkin_make -j$(<span class="hljs-built_in">nproc</span>)<br></code></pre></td></tr></table></figure></p><h1 id="安装libfranka和franka_ros">1. 安装libfranka和franka_ros</h1><p>根据<ahref="https://frankaemika.github.io/docs/installation_linux.html">官方文档</a>安装libfranka和franka_ros即可。<br />注意选择对应的版本。</p><p>实测在Ubuntu18.04下，可直接使用apt安装ros-melodic-libfranka和ros-melodic-franka-ros。</p><h1 id="创建新项目并配置">2. 创建新项目并配置</h1><h2 id="创建软件包">0. 创建软件包</h2><p>在工作空间的src目录下创建一个新的软件包：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_franka_ws/src<br>catkin_create_pkg symc_test<br></code></pre></td></tr></table></figure>理论上catkin_create_pkg需要给出软件包的依赖，但是我们可以后面手动在package.xml中添加依赖。</p><h2 id="添加依赖">1. 添加依赖</h2><p>在package.xml中添加依赖：<br /><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>symc_test<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>The symc_test package<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">maintainer</span> <span class="hljs-attr">email</span>=<span class="hljs-string">&quot;gsymcreg@gmail.com&quot;</span>&gt;</span>symc<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">license</span>&gt;</span>Apache 2.0<span class="hljs-tag">&lt;/<span class="hljs-name">license</span>&gt;</span><br><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">buildtool_depend</span>&gt;</span>catkin<span class="hljs-tag">&lt;/<span class="hljs-name">buildtool_depend</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build_depend</span>&gt;</span>message_generation<span class="hljs-tag">&lt;/<span class="hljs-name">build_depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build_depend</span>&gt;</span>eigen<span class="hljs-tag">&lt;/<span class="hljs-name">build_depend</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build_export_depend</span>&gt;</span>message_runtime<span class="hljs-tag">&lt;/<span class="hljs-name">build_export_depend</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>controller_interface<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>dynamic_reconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>eigen_conversions<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>franka_hw<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>franka_gripper<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>geometry_msgs<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>hardware_interface<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>joint_limits_interface<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>tf<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>tf_conversions<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>libfranka<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>pluginlib<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>realtime_tools<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>roscpp<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>urdf<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>visualization_msgs<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exec_depend</span>&gt;</span>franka_control<span class="hljs-tag">&lt;/<span class="hljs-name">exec_depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exec_depend</span>&gt;</span>franka_description<span class="hljs-tag">&lt;/<span class="hljs-name">exec_depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exec_depend</span>&gt;</span>message_runtime<span class="hljs-tag">&lt;/<span class="hljs-name">exec_depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exec_depend</span>&gt;</span>rospy<span class="hljs-tag">&lt;/<span class="hljs-name">exec_depend</span>&gt;</span><br><br><br>  <span class="hljs-comment">&lt;!-- The export tag contains other, unspecified, tags --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">export</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Other tools can request additional information be placed here --&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">export</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br></code></pre></td></tr></table></figure>主要变动是在depend中添加了libfranka和franka_ros的依赖，其他信息是对该软件包的描述。<br />这里build和exec的配置是从franka_ros的package.xml中抄过来的。</p><h2 id="编写cmakelists.txt">2. 编写CMakeLists.txt</h2><p>首先在src目录下创建一个symc_test_node.cpp文件。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_franka_ws/src/symc_test/src<br><span class="hljs-built_in">touch</span> symc_test_node.cpp<br></code></pre></td></tr></table></figure>然后编辑symc_test目录下的CMakeLists.txt文件： <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.0</span>.<span class="hljs-number">2</span>)<br><span class="hljs-keyword">project</span>(symc_test)<br><br><span class="hljs-keyword">find_package</span>(catkin REQUIRED COMPONENTS<br>  controller_interface<br>  dynamic_reconfigure<br>  eigen_conversions<br>  franka_hw<br>  franka_gripper<br>  geometry_msgs<br>  hardware_interface<br>  joint_limits_interface<br>  tf<br>  tf_conversions<br>  message_generation<br>  pluginlib<br>  realtime_tools<br>  urdf<br>  visualization_msgs<br>  roscpp<br>  rospy<br>  std_msgs<br>)<br><br><br><span class="hljs-keyword">find_package</span>(Eigen3 REQUIRED)<br><span class="hljs-keyword">find_package</span>(OsqpEigen REQUIRED)<br><span class="hljs-keyword">find_package</span>(Franka <span class="hljs-number">0.9</span>.<span class="hljs-number">0</span> QUIET)<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> Franka_FOUND)<br>  <span class="hljs-keyword">find_package</span>(Franka <span class="hljs-number">0.8</span>.<span class="hljs-number">0</span> REQUIRED)<br><span class="hljs-keyword">endif</span>()<br><br>list_insert_in_workspace_order(catkin_INCLUDE_DIRS <span class="hljs-variable">$&#123;Franka_INCLUDE_DIRS&#125;</span> <span class="hljs-variable">$&#123;catkin_INCLUDE_DIRS&#125;</span>)<br><br><br><span class="hljs-comment">###################################</span><br><span class="hljs-comment">## catkin specific configuration ##</span><br><span class="hljs-comment">###################################</span><br>catkin_package(<br>  INCLUDE_DIRS <span class="hljs-keyword">include</span><br>  LIBRARIES symc_test<br>  CATKIN_DEPENDS<br>    controller_interface<br>    dynamic_reconfigure<br>    eigen_conversions<br>    franka_hw<br>    franka_gripper<br>    geometry_msgs<br>    hardware_interface<br>    joint_limits_interface<br>    tf<br>    tf_conversions<br>    message_runtime<br>    pluginlib<br>    realtime_tools<br>    roscpp<br>    urdf<br>    visualization_msgs<br>  DEPENDS Franka<br>)<br><br><span class="hljs-comment">###########</span><br><span class="hljs-comment">## Build ##</span><br><span class="hljs-comment">###########</span><br><br><br><span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>_node src/symc_test_node.cpp)<br><br><span class="hljs-keyword">target_include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>_node PUBLIC<br>  <span class="hljs-variable">$&#123;catkin_INCLUDE_DIRS&#125;</span><br>)<br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>_node<br>  <span class="hljs-variable">$&#123;catkin_LIBRARIES&#125;</span><br>  <span class="hljs-variable">$&#123;Franka_LIBRARIES&#125;</span><br>  OsqpEigen::OsqpEigen<br>)<br><br></code></pre></td></tr></table></figure>同样是从franka_ros的CMakeLists.txt中抄过来的，主要是添加了Franka的依赖，但是另外加了OsqpEigen库。<br />要根据实际情况修改CMakeLists.txt中的内容，你也可以根据自己的需求添加其他的依赖。</p><p>这里的OsqpEigen库是用于求解QP问题的库，可以在<ahref="https://github.com/robotology/osqp-eigen">这里</a>找到。</p><h1 id="测试">3.测试</h1><h2 id="编辑symc_testsrcsymc_test_node.cpp文件">0.编辑symc_test/src/symc_test_node.cpp文件：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ros/ros.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;franka/robot.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;OsqpEigen/OsqpEigen.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    ros::<span class="hljs-built_in">init</span>(argc, argv, <span class="hljs-string">&quot;symc_test_node&quot;</span>);<br>    <span class="hljs-function">franka::Robot <span class="hljs-title">robot</span><span class="hljs-params">(<span class="hljs-string">&quot;robot_ip&quot;</span>)</span></span>;<br>    OsqpEigen::Solver solver;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, world!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的robot_ip是franka机器人控制柜的IP地址，官方文档给的示例是172.16.0.2，我们这里只是为了测试环境配置，所以随便写一个IP地址即可。</p><h2 id="编译">1. 编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_franka_ws<br>catkin_make -j$(<span class="hljs-built_in">nproc</span>)<br></code></pre></td></tr></table></figure><h2 id="运行">2. 运行</h2><p>打开一个终端，运行roscore：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">roscore<br></code></pre></td></tr></table></figure> 切换另一个终端，运行symc_test_node：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/catkin_franka_ws/devel/setup.bash<br>rosrun symc_test symc_test_node<br></code></pre></td></tr></table></figure> 其中source~/catkin_franka_ws/devel/setup.bash是为了加载环境变量，rosrun symc_testsymc_test_node是运行symc_test_node节点。<br />symc_test是软件包名，symc_test_node是节点名。</p><p>为了方便，可以将source<sub>/catkin_franka_ws/devel/setup.bash添加到</sub>/.bashrc文件中，这样每次打开终端都会自动加载环境变量。<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source ~/catkin_franka_ws/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure> 这样就可以直接运行rosrun symc_testsymc_test_node了。<br />上述代码运行时会报错，因为我们没有配置机器人的IP地址，这里只是为了测试环境配置是否成功，只要编译通过就可以了。<br />将franka::Robotrobot("robot_ip");注释掉或者修改为真实franka控制柜的IP地址即可正常运行输出HelloWorld!。</p><h1 id="optional">- Optional</h1><p>如果要用vscode进行开发，可以安装vscode的ros插件，这样可以方便的进行代码补全和调试。</p><p>另外如果不对vscode进行配置代码可能会报错无法找到头文件，也无法补全，我们需要手动配置：</p><p>在.vscode/c_cpp_properties.json中添加所需的头文件路径。<br />这里给出我的配置文件：<br /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;browse&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;databaseFilename&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;default&#125;&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;includePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-string">&quot;/home/symc/catkin_ws/devel/include/**&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;/opt/ros/melodic/include/**&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;/usr/include/**&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;/usr/local/include/**&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ROS&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;intelliSenseMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gcc-x64&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;compilerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gcc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gnu11&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cppStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c++14&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>/home/symc/catkin_ws/devel/include是我们的工作空间的include路径，/opt/ros/melodic/include是ros的include路径，其他的路径是系统的include路径。<br />通过apt安装的libfranka和franka_ros的头文件被安装在了/opt/ros/melodic/include/目录下，如果是源代码安装的则可能在其他目录下。</p><h1 id="links">4. Links</h1><ul><li><ahref="https://frankaemika.github.io/docs/installation_linux.html">libfranka</a></li><li><ahref="https://frankaemika.github.io/docs/installation_linux.html">franka_ros</a></li><li><ahref="https://github.com/robotology/osqp-eigen">osqp-eigen</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>franka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>impedance control</title>
    <link href="/2024/09/08/impedance-control/"/>
    <url>/2024/09/08/impedance-control/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9db11c8ebc96188606038206d5845b1a16946d5bc094fd614ad1fd7884ee90bc"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>仿真</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>impedance control with visp_ros</title>
    <link href="/2024/09/06/impedance-control-with-visp-ros/"/>
    <url>/2024/09/06/impedance-control-with-visp-ros/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="代码">代码</h2><p>先把代码贴上来，后面进行总结，同时结合chatgpt记录一下其中的数学原理。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;visp_ros/vpROSRobotFrankaCoppeliasim.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;base_tool_func.h&quot;</span></span><br><br>symc::SystemInfo sys_info;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span>&#123;<br>    symc::OptSettings opt_settings;<br>    <span class="hljs-keyword">if</span>(symc::<span class="hljs-built_in">ArgHandle</span>(argc, argv, opt_settings) == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>    &#125;<br>    symc::SignalManager::<span class="hljs-built_in">RegisterSignalHandlers</span>();<br>    vpROSRobotFrankaCoppeliasim robot;<br>    <span class="hljs-keyword">try</span>&#123;<br>        ros::<span class="hljs-built_in">init</span>(argc, argv, <span class="hljs-string">&quot;visp_ros&quot;</span>, ros::init_options::NoSigintHandler);<br>        ros::NodeHandlePtr n = boost::<span class="hljs-built_in">make_shared</span>&lt;ros::NodeHandle&gt;();<br>        <span class="hljs-function">ros::Rate <span class="hljs-title">loop_rate</span><span class="hljs-params">(<span class="hljs-number">1000</span>)</span></span>;<br>        ros::<span class="hljs-built_in">spinOnce</span>();<br>        robot.<span class="hljs-built_in">setVerbose</span>(opt_settings.verbose);<br>        robot.<span class="hljs-built_in">connect</span>();<br>        symc::<span class="hljs-built_in">ResetSimulation</span>(robot);<br><br>        <span class="hljs-function">vpColVector <span class="hljs-title">q_init</span><span class="hljs-params">( &#123; <span class="hljs-number">0</span>, vpMath::rad( <span class="hljs-number">-45</span> ), <span class="hljs-number">0</span>, vpMath::rad( <span class="hljs-number">-135</span> ), <span class="hljs-number">0</span>, vpMath::rad( <span class="hljs-number">90</span> ), vpMath::rad( <span class="hljs-number">45</span> ) &#125; )</span></span>;<br>        symc::<span class="hljs-built_in">InitRobotPosition</span>(robot, q_init);<br><br>        <span class="hljs-function">vpColVector <span class="hljs-title">q</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// joint position</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">q_dot</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// joint velocity</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">x_error</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// position error in cartesian space</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">x_dot_error</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// velocity error in cartesian space</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">x_dot_desired</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// desired cartesian velocity</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">x_dot_dot_desired</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// desired cartesian acceleration</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// Coriolis and centrifugal forces</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// friction forces</span><br><br>        <span class="hljs-function">vpColVector <span class="hljs-title">tau0</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// initial joint torque</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">tau</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// joint torque</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">tau_desired</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// desired joint torque</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">tau_cmd</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// joint torque command</span><br><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">fJe</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// Jacobian matrix in operational frame</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">Ja</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// Jacobian matrix in world frame</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">Ja_dot</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// Jacobian matrix derivative</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">Ja_old</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// old Jacobian matrix</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">B</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// joint space inertia matrix in cartesian space</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">I7</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// identity matrix</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">Ja_pinv_B_t</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">6</span>)</span></span>; <span class="hljs-comment">// pseudo-inverse of the Jacobian matrix multiplied by the inertia matrix</span><br>        I<span class="hljs-number">7.</span><span class="hljs-built_in">eye</span>();<br>        &#123;<br>            robot.<span class="hljs-built_in">getPosition</span>(vpRobot::JOINT_STATE, q);<br>            std::cout&lt;&lt;<span class="hljs-string">&quot;Initial joint position: &quot;</span>&lt;&lt;q.<span class="hljs-built_in">t</span>()&lt;&lt;std::endl;<br>        &#125;<br>        robot.<span class="hljs-built_in">setRobotState</span>(vpRobot::STATE_FORCE_TORQUE_CONTROL);<br>        robot.<span class="hljs-built_in">setCoppeliasimSyncMode</span>(opt_settings.coppeliasim_sync_mode);<br><br>        vpHomogeneousMatrix fMed, fMed0, fMe;<br>        fMed = fMed0 = robot.<span class="hljs-built_in">get_fMe</span>(); <span class="hljs-comment">// get end-effector pose</span><br><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">K</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>)</span></span>;<br>        <span class="hljs-function">vpMatrix <span class="hljs-title">D</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>)</span></span>;<br>        <span class="hljs-function">vpMatrix <span class="hljs-title">edVf</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>)</span></span>; <span class="hljs-comment">// rotation matrix from operational frame to world frame(linear velocity and angular velocity)</span><br><br>        <span class="hljs-type">double</span> wp = <span class="hljs-number">50.0</span>; <span class="hljs-comment">// position control gain</span><br>        <span class="hljs-type">double</span> wo = <span class="hljs-number">20.0</span>; <span class="hljs-comment">// orientation control gain</span><br><br>        K.<span class="hljs-built_in">diag</span>(&#123;wp*wp, wp*wp, wp*wp, wo*wo, wo*wo, wo*wo&#125;);<br>        D.<span class="hljs-built_in">diag</span>(&#123;<span class="hljs-number">2</span>*wp, <span class="hljs-number">2</span>*wp, <span class="hljs-number">2</span>*wp, <span class="hljs-number">2</span>*wo, <span class="hljs-number">2</span>*wo, <span class="hljs-number">2</span>*wo&#125;);<br>        <span class="hljs-type">double</span> mu = <span class="hljs-number">0.1</span>; <span class="hljs-comment">// friction coefficient</span><br><br>        std::cout&lt;&lt;<span class="hljs-string">&quot;--Init finished. Press ctrl c to exit--&quot;</span>&lt;&lt;std::endl;<br><br>        <span class="hljs-keyword">while</span>(!symc::SignalManager::<span class="hljs-built_in">ShouldExit</span>())&#123;<br>            robot.<span class="hljs-built_in">getPosition</span>(vpRobot::JOINT_STATE, q);<br>            robot.<span class="hljs-built_in">getVelocity</span>(vpRobot::JOINT_STATE, q_dot);<br>            robot.<span class="hljs-built_in">getMass</span>(B);<br>            robot.<span class="hljs-built_in">getCoriolis</span>(C);<br>            robot.<span class="hljs-built_in">getFriction</span>(F);<br>            robot.<span class="hljs-built_in">get_fJe</span>(fJe); <span class="hljs-comment">// get Jacobian matrix in operational frame</span><br>            robot.<span class="hljs-built_in">getForceTorque</span>(vpRobot::JOINT_STATE, tau);<br>            <br>            fMed[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] = fMed0[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] + (sys_info.is_trajectory_started_ ? ( <span class="hljs-number">0.1</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span> );<br>            fMed[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = fMed0[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] - (sys_info.is_trajectory_started_ ? ( <span class="hljs-number">0.05</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>            x_dot_desired[<span class="hljs-number">1</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">0.1</span> * <span class="hljs-built_in">cos</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>            x_dot_desired[<span class="hljs-number">2</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">-2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">0.05</span> * <span class="hljs-built_in">cos</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br><br>            x_dot_dot_desired[<span class="hljs-number">1</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">-2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">0.1</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>            x_dot_dot_desired[<span class="hljs-number">2</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">0.05</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br><br>            edVf.<span class="hljs-built_in">insert</span>(fMed.<span class="hljs-built_in">getRotationMatrix</span>().<span class="hljs-built_in">t</span>(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            edVf.<span class="hljs-built_in">insert</span>(fMed.<span class="hljs-built_in">getRotationMatrix</span>().<span class="hljs-built_in">t</span>(), <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>            <br><br>            fMe = robot.<span class="hljs-built_in">get_fMe</span>(); <span class="hljs-comment">// get end-effector pose</span><br>            vpPoseVector pose_error = <span class="hljs-built_in">static_cast</span>&lt;vpPoseVector&gt;(fMed.<span class="hljs-built_in">inverse</span>() * fMe); <span class="hljs-comment">// get error in cartesian space</span><br>            <br><br>            vpMatrix La = symc::<span class="hljs-built_in">Ta</span>(pose_error); <span class="hljs-comment">// compute Lie algebra</span><br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span>La*edVf is the matrix that can transform the velocity in operational frame to the velocity in world frame?</span><br>            Ja = La*edVf*fJe; <span class="hljs-comment">// compute Jacobian matrix in world frame</span><br>            <span class="hljs-keyword">if</span>(!symc::<span class="hljs-built_in">IsEqual</span>(sys_info.dt_, <span class="hljs-number">0</span>))&#123;<br>                Ja_dot = (Ja - Ja_old) / sys_info.dt_;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                Ja_dot = <span class="hljs-number">0</span>;<br>            &#125;<br>            Ja_old = Ja;<br>            <span class="hljs-comment">// weighted pseudo-inverse of the Jacobian matrix</span><br>            <span class="hljs-comment">// to optimize the control performance ?</span><br>            <span class="hljs-comment">// or to avoid singularity ?</span><br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>the formula is from the paper:</span><br>            Ja_pinv_B_t = (Ja * B.<span class="hljs-built_in">inverseByCholesky</span>()*Ja.<span class="hljs-built_in">t</span>()).<span class="hljs-built_in">inverseByCholesky</span>()*Ja*B.<span class="hljs-built_in">inverseByCholesky</span>();<br>            <br>            <span class="hljs-comment">// compute desired joint torque</span><br>            x_error = <span class="hljs-built_in">static_cast</span>&lt;vpColVector&gt;(pose_error); <span class="hljs-comment">// compute error in cartesian space</span><br>            x_dot_error = La*edVf*(x_dot_desired - fJe*q_dot); <span class="hljs-comment">// compute velocity error in cartesian space</span><br>            <span class="hljs-comment">// formula: tau = M(q)*q_dot_dot + C(q,q_dot) + F(q_dot) + G(q)</span><br>            <span class="hljs-comment">// Ja.pseudoInverse is the inverse of the Jacobian matrix</span><br>            <span class="hljs-comment">// which can transform cartesian space to joint space</span><br>            vpMatrix control_law = (-K*(x_error)+D*(x_dot_error)-Ja_dot*q_dot + x_dot_dot_desired);<br>            tau_desired = B*Ja.<span class="hljs-built_in">pseudoInverse</span>()* control_law + C + F - (I7 - Ja.<span class="hljs-built_in">t</span>()*Ja_pinv_B_t)*B*q_dot*<span class="hljs-number">100</span>;<br>            <span class="hljs-comment">// tau_desired = B*Ja.pseudoInverse()* control_law + C + F;</span><br>            <span class="hljs-keyword">if</span>(sys_info.is_first_)&#123;<br>                tau0 = tau_desired;<br>            &#125;<br>            tau_cmd = tau_desired - tau0*std::<span class="hljs-built_in">exp</span>(-mu*sys_info.time_current_ - sys_info.time_start_trajectory_);<br><br>            <span class="hljs-comment">// apply the desired joint torque</span><br>            robot.<span class="hljs-built_in">setForceTorque</span>(vpRobot::JOINT_STATE, tau_cmd);<br><br>            <span class="hljs-keyword">if</span>(opt_settings.verbose)&#123;<br>                std::cout&lt;&lt;<span class="hljs-string">&quot;dt: &quot;</span>&lt;&lt;sys_info.dt_&lt;&lt;std::endl;<br>            &#125;<br>            robot.<span class="hljs-built_in">wait</span>(sys_info.time_current_, <span class="hljs-number">0.001</span>); <span class="hljs-comment">// Sync loop at 1000 Hz (1 ms)</span><br>            sys_info.<span class="hljs-built_in">UpdateTime</span>(robot);<br>        &#125;<br>        symc::<span class="hljs-built_in">StopSimulation</span>(robot);<br>    &#125;<span class="hljs-built_in">catch</span>(<span class="hljs-type">const</span> vpException&amp; e)&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;Catch an exception: &quot;</span>&lt;&lt;e.<span class="hljs-built_in">what</span>()&lt;&lt;std::endl;<br>        symc::<span class="hljs-built_in">StopSimulation</span>(robot);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;--Exited--&quot;</span>&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="总结及推导">总结及推导</h2><h3 id="说明">说明</h3><p>这里直接跳过不太重要的部分，从字面意思即可理解其作用，重点说明while循环内的内容。</p><ul><li><p>下面以base frame指代基坐标系（位姿），end-effectorframe指代末端执行器坐标系（位姿），因为Homogeneous TransformationMatrix既可以表示变换也可以表示位姿，所以后面就不特意说明是位姿还是变换操作了。</p></li><li><p>用task space(cartesianspace)指代任务空间（也就是笛卡尔空间），用jointspace指代关节空间。</p></li></ul><p>下面逐行进行解释。</p><h3 id="初始化">初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">robot.<span class="hljs-built_in">getPosition</span>(vpRobot::JOINT_STATE, q);<br>robot.<span class="hljs-built_in">getVelocity</span>(vpRobot::JOINT_STATE, q_dot);<br>robot.<span class="hljs-built_in">getMass</span>(B);<br>robot.<span class="hljs-built_in">getCoriolis</span>(C);<br>robot.<span class="hljs-built_in">getFriction</span>(F);<br>robot.<span class="hljs-built_in">get_fJe</span>(fJe);<br>robot.<span class="hljs-built_in">getForceTorque</span>(vpRobot::JOINT_STATE, tau);<br><br></code></pre></td></tr></table></figure><p>这里通过调用visp_ros的接口获取franka的信息，其中：<br />* <em>getMass()</em> 指获取质量矩阵(inertia matrix, 惯性矩阵)<br />* <em>getCoriolis()</em> 指获取科里奥利力矩阵<br />* <em>getFriction()</em> 指获取摩擦力矩阵<br />* <em>get_fJe()</em> 指获取雅可比矩阵(Jacobianmatrix)，注意这里是关节空间下的雅可比矩阵</p><p>其他根据字面意思理解即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">fMed[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] = fMed0[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] + (sys_info.is_trajectory_started_ ? ( <span class="hljs-number">0.1</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span> );<br>fMed[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = fMed0[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] - (sys_info.is_trajectory_started_ ? ( <span class="hljs-number">0.05</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>x_dot_desired[<span class="hljs-number">1</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">0.1</span> * <span class="hljs-built_in">cos</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>x_dot_desired[<span class="hljs-number">2</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">-2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">0.05</span> * <span class="hljs-built_in">cos</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br><br>x_dot_dot_desired[<span class="hljs-number">1</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">-2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">0.1</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>x_dot_dot_desired[<span class="hljs-number">2</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">0.05</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br><br></code></pre></td></tr></table></figure><p>设定参考轨迹，也就是目标轨迹，fMed,fMed0均是<em>vpHomogeneousMatrix</em>类型fMed[4][4]的index先是行再是列，与矩阵表示习惯相同。<br />这里贴一下<em>vpHomogeneousMatrix</em>类型的部分源码注释：</p><p>The class provides a data structure for the homogeneous matrices aswell as a set of operations on these matrices.</p><p>The vpHomogeneousMatrix class is derived fromvpArray2D&lt;double&gt;.</p><p>An homogeneous matrix is 4x4 matrix defines as <spanclass="math display">\[\left[^a{\bf M}_b = \left(\begin{array}{cc}^a{\bf R}_b &amp; ^a{\bf t}_b \\{\bf 0}_{1\times 3} &amp; 1\end{array}\right)\right]\]</span><br />that defines the position of frame <em>b</em> in frame <em>a</em></p><p><span class="math inline">\(^a{R}_b\)</span> is a rotation matrix and<span class="math inline">\(^a{t}_b\)</span> is a translationvector.</p><h3 id="矩阵更新">矩阵更新</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">edVf.<span class="hljs-built_in">insert</span>(fMed.<span class="hljs-built_in">getRotationMatrix</span>().<span class="hljs-built_in">t</span>(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>edVf.<span class="hljs-built_in">insert</span>(fMed.<span class="hljs-built_in">getRotationMatrix</span>().<span class="hljs-built_in">t</span>(), <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>TODO:这个没懂是干啥的，后面待补充。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">fMe = robot.<span class="hljs-built_in">get_fMe</span>();<br>vpPoseVector pose_error = <span class="hljs-built_in">static_cast</span>&lt;vpPoseVector&gt;(fMed.<span class="hljs-built_in">inverse</span>() * fMe);<br></code></pre></td></tr></table></figure><p>通过 <em>get_fMe()</em> 获取franka的姿态(Homogeneous transformationmatrix)，然后计算与目标位姿的误差，fMed是上面设置的目标位姿。<br />为什么 <em>fMed.inverse() * fMe</em>得到的就是位姿误差？这里我的理解是fMed的形式应该是<spanclass="math inline">\(^{B}T_{D}\)</span>(目标位姿相对基坐标系)，fMe的形式<spanclass="math inline">\({B}T_{E}\)</span>(末端执行器位姿相对基坐标系)，通过左乘变换矩阵将fMe转换到目标坐标系下，即末端执行器相对目标坐标系的位姿表示，得到的即是位姿误差。<br />//TODO:这里理解可能是错误的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vpMatrix La = symc::<span class="hljs-built_in">Ta</span>(pose_error);<br>Ja = La*edVf*fJe;<br><span class="hljs-keyword">if</span>(!symc::<span class="hljs-built_in">IsEqual</span>(sys_info.dt_, <span class="hljs-number">0</span>))&#123;<br>    Ja_dot = (Ja - Ja_old) / sys_info.dt_;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    Ja_dot = <span class="hljs-number">0</span>;<br>&#125;<br>Ja_old = Ja;<br></code></pre></td></tr></table></figure><p>通过 <em>Ta</em>函数输入的齐次变换矩阵（代表末端执行器位姿），计算李代数，李代数是用来表示变换群（如SO(3)和SE(3)）的无穷小变换（即微分形式）。返回的是6x6 的李代数矩阵，它表示了当前末端执行器位姿对应的微分变换。<br /><strong>它的作用是用于将6维的刚体运动（速度、力）从一个坐标系转换到另一个坐标系</strong><br />然后计算雅可比矩阵（Ja），<strong>注意fJe是上面获取的关节空间下的雅可比矩阵</strong>，通过左乘La*edVf将其转换到笛卡尔空间下，得到笛卡尔空间下的雅可比矩阵Ja。<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Ja_pinv_B_t = (Ja * B.<span class="hljs-built_in">inverseByCholesky</span>()*Ja.<span class="hljs-built_in">t</span>()).<span class="hljs-built_in">inverseByCholesky</span>()*Ja*B.<span class="hljs-built_in">inverseByCholesky</span>();<br></code></pre></td></tr></table></figure></p><p>没看懂，根据chatgpt的说法，Ja_pinv_B_t是加权伪逆雅可比矩阵，其公式就是：<br /><span class="math display">\[Ja\_pinv\_B\_t=(Ja \cdot {B^{−1}}\cdotJa^{T})^{-1}\cdot Ja\cdot B^{-1}\]</span><br />贴一下它的解释：<br />这个表达式 Ja_pinv_B_t 是计算 加权伪逆雅可比矩阵的一种方式。加权伪逆（weightedpseudoinverse）是用于解决欠定或超定系统中的伪逆运算，其中矩阵不一定是方阵，且需要考虑特定权重。<br />伪逆雅可比矩阵在控制和运动学中用于求解欠定或冗余系统的逆运动学问题。在这种情况下，加权伪逆通过矩阵通过矩阵B引入了权重，使得解空间能够根据特定的权重进行优化。<br />加权伪逆的常见应用：<br />* 关节空间中的优化控制。<br />* 处理机器人冗余度时平衡关节的不同能量消耗或限制。<br />* 最小化在任务空间中实现运动时，关节空间中的力或速度。</p><p>该表达式通过Cholesky分解计算了加权伪逆雅可比矩阵。其目的是：<br />* 利用矩阵𝐵对雅可比矩阵进行加权，优化运动控制或冗余度处理。<br />* 使用Cholesky分解提升了计算效率，适用于正定对称矩阵𝐵的情境。</p><p>最终，Ja_pinv_B_t是雅可比矩阵的加权伪逆，它在机器人控制和运动学求解中用于优化和解决欠定或冗余问题。</p><h3 id="计算控制律">计算控制律</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">x_error = <span class="hljs-built_in">static_cast</span>&lt;vpColVector&gt;(pose_error);<br>x_dot_error = La*edVf*(x_dot_desired - fJe*q_dot);<br></code></pre></td></tr></table></figure><p>在笛卡尔空间计算位置姿态误差和速度误差。<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vpMatrix control_law = (-K*(x_error)+D*(x_dot_error)-Ja_dot*q_dot + x_dot_dot_desired);<br></code></pre></td></tr></table></figure> 通过阻抗控制计算控制律。<br />K项为刚度控制项，对位置误差施加恢复力，类似于弹簧的作用，推动机器人回到期望位置。<br />D项阻尼控制项，利用速度误差来增加阻尼，抑制振荡和不稳定行为。<br />-Ja_dot*q_dot雅可比矩阵的变化影响项，考虑了机器人关节速度和雅可比矩阵随时间变化的耦合效应。<br />x_dot_dot_desired期望加速度，直接给出系统应该达到的加速度目标。<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">tau_desired = B*Ja.<span class="hljs-built_in">pseudoInverse</span>()* control_law + C + F - (I7 - Ja.<span class="hljs-built_in">t</span>()*Ja_pinv_B_t)*B*q_dot*<span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure> 计算期望力矩，其公式为：<br /><span class="math display">\[\tau = M(q)\cdot \ddot{q} + C(q,\dot{q}) +F(\dot{q}) + G(q)\]</span><br />control_law左乘 <em>Ja.pseudoInverse()</em>是将control_law从笛卡尔空间转换到任务空间。<br />后面的-(I7 -Ja.t()*Ja_pinv_B_t)*B*q_dot*100根据chatgpt的解释是误差校正项，没看懂。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">tau_cmd = tau_desired - tau0*std::<span class="hljs-built_in">exp</span>(-mu*sys_info.time_current_ - sys_info.time_start_trajectory_);<br>robot.<span class="hljs-built_in">setForceTorque</span>(vpRobot::JOINT_STATE, tau_cmd);<br></code></pre></td></tr></table></figure><p>计算真正的控制力矩tau_cmd，后面加上exp指数项是为了在启动时控制力矩是光滑的。</p>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>仿真</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rotation Matrix</title>
    <link href="/2024/09/05/Rotation-Matrix/"/>
    <url>/2024/09/05/Rotation-Matrix/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="性质和结论">性质和结论</h2><p><strong>从B frame相对于A frame的旋转矩阵的转置即为A frame相对于Bframe的旋转矩阵，同时等于其逆矩阵：</strong> <spanclass="math display">\[^{A}_{B}R = ^{B}_{A}A^{T}=^{B}_{A}A^{-1}\]</span><strong>旋转矩阵可以将一个点(P)从一个frame(B)变换到另一个frame(A)：</strong><span class="math display">\[^{A}P=^{A}_{B}R \cdot ^{B}P\]</span><strong>用坐标轴绕参考坐标系旋转角度来确定旋转矩阵：</strong> <spanclass="math display">\[R_{Z_{A}}({\theta})=\left[\begin{matrix}cos{\theta} &amp; -sin\theta &amp; 0 \\ sin{\theta} &amp; cos{\theta}&amp; 0 \\ 0 &amp; 0 &amp; 1 \end{matrix}\right]=\left[\begin{matrix}c{\theta} &amp; -s\theta &amp; 0 \\ s{\theta} &amp; c{\theta} &amp; 0 \\0 &amp; 0 &amp; 1 \end{matrix}\right]\]</span> <spanclass="math display">\[R_{X_{A}}({\theta})=\left[\begin{matrix} 1 &amp;0 &amp; 0 \\ 0 &amp; cos{\theta} &amp; -sin{\theta} \\ 0 &amp;sin{\theta} &amp; cos{\theta} \end{matrix}\right]=\left[\begin{matrix} 1&amp; 0 &amp; 0 \\ 0 &amp; c{\theta} &amp; -s{\theta} \\ 0 &amp;s{\theta} &amp; c{\theta} \end{matrix}\right]\]</span> <spanclass="math display">\[R_{Y_{A}}({\theta})=\left[\begin{matrix}cos{\theta} &amp; 0 &amp; sin{\theta} \\ 0 &amp; 1 &amp; 0 \\-sin{\theta} &amp; 0 &amp; cos{\theta}\end{matrix}\right]=\left[\begin{matrix} c{\theta} &amp; 0 &amp;s{\theta} \\ 0 &amp; 1 &amp; 0 \\ -s{\theta} &amp; 0 &amp; c{\theta}\end{matrix}\right]\]</span> <em>A表示Aframe，参考坐标系，即世界坐标系，B表示Bodyframe，本地坐标系，即物体坐标系。</em></p><p><strong>描述一个frame(B)相对另一个frame(A)的姿态：</strong> <spanclass="math display">\[^{A}_{B}R=\left[\begin{matrix} | &amp; | &amp; |\\ ^{A}X_{B} &amp; ^{A}Y_{B} &amp; ^{A}Z_{B} \\ | &amp; | &amp; |\end{matrix}\right]\]</span> <em>其中<spanclass="math inline">\(^{A}X_{B}\)</span>，<spanclass="math inline">\(^{A}Y_{B}\)</span>，<spanclass="math inline">\(^{A}Z_{B}\)</span>分别代表B frame各坐标轴在Aframe投影的列向量。</em></p><h2 id="fixed-angles">Fixed Angles</h2><p><strong>针对空间中固定的坐标系XYZ进行旋转操作：</strong> <spanclass="math display">\[^{A}_{B}R_{XYZ}(\gamma,\beta,\alpha)=R_{Z}(\alpha)R_{Y}(\beta)R_{X}(\gamma)\]</span><span class="math display">\[=\left[\begin{matrix} c{\alpha} &amp;-s\alpha &amp; 0 \\ s{\alpha} &amp; c{\alpha} &amp; 0 \\ 0 &amp; 0 &amp;1 \end{matrix}\right]\left[\begin{matrix} c{\beta} &amp; 0 &amp;s{\beta} \\ 0 &amp; 1 &amp; 0 \\ -s{\beta} &amp; 0 &amp; c{\beta}\end{matrix}\right]\left[\begin{matrix} 1 &amp; 0 &amp; 0 \\ 0 &amp;c{\gamma} &amp; -s{\gamma} \\ 0 &amp; s{\gamma} &amp; c{\gamma}\end{matrix}\right]\]</span> <spanclass="math display">\[=\left[\begin{matrix}c{\alpha}c{\beta} &amp;c{\alpha}s{\beta}s{\gamma}-s{\alpha}c{\gamma} &amp;c{\alpha}s{\beta}c{\gamma}+s{\alpha}s{\gamma} \\ s{\alpha}c{\beta} &amp;s{\alpha}s{\beta}s{\gamma}+c{\alpha}c{\gamma} &amp;s{\alpha}s{\beta}c{\gamma}-c{\alpha}s{\gamma}  \\-s{\beta} &amp;c{\beta}s{\gamma} &amp;c{\beta}c{\gamma}\end{matrix}\right]=\left[\begin{matrix}r_{11} &amp;r_{12} &amp; r_{13} \\ r_{21} &amp; r_{22} &amp; r_{23} \\ r_{31} &amp;r_{32} &amp; r_{33}\end{matrix}\right]\]</span></p><p><em>先转的放在后面，转动的顺序（左乘）是不能互换的。</em></p><p><strong>通过R推算Angles：</strong> <spanclass="math display">\[^{A}_{B}R_{XYZ}(\gamma,\beta,\alpha)=\left[\begin{matrix}c{\alpha}c{\beta}&amp; c{\alpha}s{\beta}s{\gamma}-s{\alpha}c{\gamma} &amp;c{\alpha}s{\beta}c{\gamma}+s{\alpha}s{\gamma} \\ s{\alpha}c{\beta} &amp;s{\alpha}s{\beta}s{\gamma}+c{\alpha}c{\gamma} &amp;s{\alpha}s{\beta}c{\gamma}-c{\alpha}s{\gamma}  \\-s{\beta} &amp;c{\beta}s{\gamma} &amp;c{\beta}c{\gamma}\end{matrix}\right]=\left[\begin{matrix}r_{11} &amp;r_{12} &amp; r_{13} \\ r_{21} &amp; r_{22} &amp; r_{23} \\ r_{31} &amp;r_{32} &amp; r_{33}\end{matrix}\right]\]</span> <spanclass="math inline">\(if\space{\beta} \neq 90^{\circ}\)</span> <spanclass="math display">\[\beta=Atan2(-r_{31},\sqrt{r_{11}^2+r_{21}^2})\]</span><spanclass="math display">\[\alpha=Atan2(\frac{r_{21}}{c{\beta}},\frac{r_{11}}{c{\beta}})\]</span><spanclass="math display">\[\gamma=Atan2(\frac{r_{32}}{c{\beta}},\frac{r_{33}}{c{\beta}})\]</span><span class="math inline">\(if \space \beta=90^{\circ}\)</span> <spanclass="math display">\[\alpha=0^{\circ}\]</span> <spanclass="math display">\[\gamma=Atan2(r_{12},r_{22})\]</span> <spanclass="math inline">\(if \space \beta=-90^{\circ}\)</span> <spanclass="math display">\[\alpha=0^{\circ}\]</span> <spanclass="math display">\[\gamma=-Atan2(r_{12},r_{22})\]</span></p><h2 id="euler-angles">Euler Angles</h2><p><strong>Z-Y-X</strong> <spanclass="math display">\[^{A}_{B}R_{Z^{&#39;}Y^{&#39;}X^{&#39;}}(\alpha,\beta,\gamma)=^{A}_{B^{&#39;}}R^{B^{&#39;}}_{B^{&#39;&#39;}}R^{B^{&#39;&#39;}}_{B}R=R_{Z^{&#39;}}(\alpha)R_{Y^{&#39;}}(\beta)R_{X^{&#39;}}(\gamma)\]</span><em>先转的放在前面，转动的顺序（左乘）是不能互换的。</em> <em>对FixedAngle以XYZ的顺序转动，相当于对Euler Angle以ZYX的顺序转动。</em><em>Euler Angle的正转和Fixed Angle的反转会得到相同的解。</em></p><h2 id="刚体状态的表达">刚体状态的表达</h2><p><strong>Homogeneous transformation matrix (4x4):</strong> <spanclass="math display">\[^{A}_{B}T=\left[\begin{matrix}^{A}_{B}R_{3\times3}&amp; ^{A}P_{B_{org}3\times1} \\ 0_{1\times3} &amp;1\end{matrix}\right]\]</span> <spanclass="math display">\[=\left[\begin{matrix} | &amp; | &amp; | &amp; |\\ ^{A}X_{B} &amp; ^{A}Y_{B} &amp; ^{A}Z_{B} &amp; P_{B_{org}} \\ |&amp; | &amp; | &amp; | \\ 0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right]\]</span><em>左上角为旋转矩阵，右上角为移动状态。</em></p><p><strong>移动和转动复合运算：</strong> <spanclass="math display">\[^{A}P_{3\times1}=^{A}_{B}R^{B}P_{3\times1}+^{A}P_{B_{org}3\times1}\]</span><span class="math display">\[\left[\begin{matrix}^{A}P \\1\end{matrix}\right]=^{A}_{B}T\left[\begin{matrix}^{B}P \\1\end{matrix}\right]\]</span></p><p><strong>可连续操作：</strong> <spanclass="math display">\[^{A}_{B}T=^{A}_{C}T^{C}_{D}T^{D}_{B}T\]</span><em>"sequential transformation"</em></p><p><strong>Mapping and Operator:</strong></p><p>transformationmatrix既有Mapping（把向量从一个frame转换到另一个frame下来看）的功能也可当作Operator对向量（或点）进行移动或旋转（在同一个frame）。</p><p><span class="math display">\[\left[\begin{matrix}^{A}P_2 \\1\end{matrix}\right]=T\left[\begin{matrix}^{A}P_1 \\1\end{matrix}\right]\]</span></p><h2 id="homogeneous-transformation-matrix的三种用法">Homogeneoustransformation matrix的三种用法</h2><ol type="1"><li>描述一个frame（相对于另一个frame）的空间状态。 <spanclass="math display">\[^{A}_{B}T=\left[\begin{matrix} | &amp; | &amp; |&amp; | \\ ^{A}X_{B} &amp; ^{A}Y_{B} &amp; ^{A}Z_{B} &amp; P_{B_{org}}\\ | &amp; | &amp; | &amp; | \\ 0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right]\]</span></li><li>将point由某一个frame的表达转换到另一个frame来表达。 <spanclass="math display">\[\left[\begin{matrix}^{A}P \\1\end{matrix}\right]=^{A}_{B}T\left[\begin{matrix}^{B}P \\1\end{matrix}\right]\]</span></li><li>将point(vector)在同一个frame中进行移动和转动。 <spanclass="math display">\[\left[\begin{matrix}^{A}P_2 \\1\end{matrix}\right]=T\left[\begin{matrix}^{A}P_1 \\1\end{matrix}\right]\]</span></li></ol><h2 id="transformation-matrix运算">Transformation Matrix运算</h2><p><strong>逆矩阵：</strong></p><p><spanclass="math display">\[^{A}_{B}T^{B}_{A}T=^{A}_{B}T^{A}_{B}T^{-1}=I_{4\times4}\]</span></p><p><spanclass="math display">\[^{A}_{B}T^{-1}=\left[\begin{matrix}^{A}_{B}R^{T}&amp; -^{A}_{B}{R^{T}}^{A}P_{B_{org}} \\ 0_{1\times3} &amp;1\end{matrix}\right]\]</span> <strong>连续运算法则：</strong></p><ol type="1"><li>{B}对{A}的转轴旋转：用"premultiply"，先转的放在后面</li><li>{B}对{B}自身的转轴旋转：用"postmultiply"，先转的放在前面</li></ol><h2 id="links">links</h2><p><a href="https://www.coursera.org/learn/robotics1">機器人學一(Robotics (1))</a></p>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CLF-CBF</title>
    <link href="/2024/09/04/CLF-CBF/"/>
    <url>/2024/09/04/CLF-CBF/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2id="动态控制仿射系统dynamics-control-affine-system">1.动态控制仿射系统(DynamicsControl Affine System)</h2><p>对于<span class="math inline">\(\dot{x} =F(t,x,u)\)</span>，其中系统状态<spanclass="math inline">\(x\in{\mathbb{R}^n}\)</span>，系统输入<spanclass="math inline">\(u \in{\mathbb{R}^m}\)</span>，如果<spanclass="math inline">\(F\)</span>对于<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(u\)</span>是Lipschitz连续的，时间<spanclass="math inline">\(t\)</span>是piecewise连续的，那么在给定的初始条件<spanclass="math inline">\(x_0\)</span>下，轨迹<spanclass="math inline">\(x(t)\)</span>是存在并且unique的。</p><p>一般写成如下形式：</p><p><span class="math display">\[\dot{x} = f(x) + g(x)u\]</span></p><p>其中<spanclass="math inline">\(f:\mathbb{R}^n\rightarrow{\mathbb{R}^n},g:\mathbb{R}^n\rightarrow{\mathbb{R}^{n*m}}\)</span>，<spanclass="math inline">\(x\)</span>是Lipschitz连续，<spanclass="math inline">\(x_e = 0\)</span>。</p><h2 id="clfcontrol-lyapunov-function">2.CLF(Control LyapunovFunction)</h2><p>Lyapunove Function数学定义如下：</p><p><span class="math display">\[V(x)\]</span> <spanclass="math display">\[s.t. V(x_e) = 0, V(x) &gt; 0 \ for \ x \neqx_e\]</span> <span class="math display">\[\dot{V(x)} = \frac{\partialV}{\partial x}f(x) &lt; 0 \ for \ x \neq x_e\]</span></p><p><spanclass="math inline">\(V(x)\)</span>是定义的Lyapunov函数，下面的是约束条件，当满足上述两个约束时，我们可以认为x渐近稳定。</p><p>将输入<span class="math inline">\(u\)</span>引入到LyapunoveFunction，得到新的方程。 使<spanclass="math inline">\(V(x):\mathbb{R}^n\rightarrow{\mathbb{R}}\)</span>是连续Differential函数，如果存在一个常数<spanclass="math inline">\(c&gt;0\)</span>使得<spanclass="math inline">\(V(x)\)</span>满足如下条件，那么<spanclass="math inline">\(V(x)\)</span>就是一个关于<spanclass="math inline">\(x\)</span>的Control Lyapunov Function。</p><p><span class="math inline">\(1)\ \Omega := \{x\in{\mathbb{R}^n}:V(x)\le{c}\}\)</span>，<spanclass="math inline">\(V(x)\)</span>是有界的</p><p><span class="math inline">\(2)\ V(x)&gt;0\)</span>，对于所有的<spanclass="math inline">\(s\in{R^n}\backslash \{x_e\}\)</span>，<spanclass="math inline">\(V(e_e)=0\)</span></p><p><span class="math inline">\(3)\inf_{u\in{U}}\dot{V}(x,u)&lt;0\)</span>，对于所有的<spanclass="math inline">\(x\in{\Omega_c}\backslash\{x_e\}\)</span></p><p>为了简化<spanclass="math inline">\(\dot{V}(x,u)\)</span>的表达，用Lie括号描述：</p><p><span class="math display">\[\dot{V}(x,u) = \nabla{V}(x) * \dot{x} =\nabla{V}(x) * f(x) + \nabla{V}(x) * g(x)*u = L_fV(x) +L_gV(x)u\]</span> <spanclass="math display">\[(L_pq(x):=\nabla{q(x)}*p(x))\]</span></p><p>CLF保证系统最终会稳定，但不能确定多快才能稳定，这时候引入指数稳定CLF(ESCLF)。</p><p>如果存在常数<span class="math inline">\(\lambda &gt;0\)</span>使得<span class="math inline">\(inf_{u\in{U}}\dot{V}(x,u)+{\lambda}{V(x)}\le0\)</span> ，那么<spanclass="math inline">\(V(x)\)</span>就是ESCLF。</p><p><img src="/img/CLF-CBF/ESCLF.png" /></p><h2 id="clf-qp">3.CLF-QP</h2><p>将CLF转化为QP问题，搜索满足CLF-QP问题的输入u。</p><p><span class="math display">\[argmin\  (u-u_ref)^{T}{H(u-u_ref)}+p\delta^2\]</span> <spanclass="math display">\[subject\ to :\L_fV(x)+L_gV(x)u+\lambda{V(x)}\le{\delta}\]</span></p><p>其中<span class="math inline">\(\delta\)</span>是松弛变量，<spanclass="math inline">\(p\)</span>是惩罚因子，设置松弛变量的目的是在实际搜索中，较难找到一个合适的解，增加松弛变量后会放松CLF条件，在允许的情况下不满足CLF约束，但获得一个解。</p><p>另外，这里的H是Hassian矩阵，表示二次项系数，将<spanclass="math inline">\((u-u_ref)^{T}{H(u-u_ref)}\)</span>理解为二次的cost函数(或者能量函数？)，是人为构建的，二次保证解的u的输入使系统收敛较快。</p><h2 id="cbf">4.CBF</h2><p>CLF约束确保系统渐趋稳定，而CBF的作用是确保系统安全，使系统处于规定的安全集合约束内。</p><pre><code class="hljs">//TODO:补充CBF原理</code></pre><p>当<span class="math inline">\(B(x):\mathbb{R}^n \rightarrow\mathbb{R}\)</span>是连续可微的，零超水平集(zero-superlevel)为<spanclass="math inline">\(C\)</span>，<spanclass="math inline">\(C=\{x|B(x)\ge0\}\)</span>，对于所有<spanclass="math inline">\(x\in{\partial{C}}\)</span>，<spanclass="math inline">\(\nabla{B(x)\ne0}\)</span>，如果存在一个扩展<spanclass="math inline">\(Class \ K_\infty\)</span>函数<spanclass="math inline">\(\alpha\)</span>（工程中一般使用正常数和<spanclass="math inline">\(B(x)\)</span>的线性组合获取，如：<spanclass="math inline">\(\gamma{B(x)},\gamma&gt;0\)</span>），存在一个集合<spanclass="math inline">\(D\subset{\mathbb{R}^n}\)</span>，使得<spanclass="math inline">\(C\subset{D}\)</span>满足：</p><p><spanclass="math display">\[sup_{u\in{U}}[L_f{B(x)}+L_g{B(x)}u]+\alpha({B(x)})\ge0\]</span></p><p>那么对于所有<span class="math inline">\(x\in{D}\)</span>，<spanclass="math inline">\(B(x)\)</span>是一个CBF。</p><p><img src="/img/CLF-CBF/CBF.png" /></p><h2 id="clf-cbf-qp">5.CLF-CBF-QP</h2><p>将CLF和CBF都转化为QP问题的约束条件，其中CLF保证控制器稳定，CBF保证控制满足安全条件。</p><p><span class="math display">\[argmin\  (u-u_ref)^{T}{H(u-u_ref)}+p\delta^2\]</span> <spanclass="math display">\[subject\ to :\]</span> <spanclass="math display">\[\L_fV(x)+L_gV(x)u+\lambda{V(x)}\le{\delta}\]</span> <spanclass="math display">\[L_f{B(x)}+L_g{B(x)}u]+\gamma{B(x)}\ge0\]</span></p><h2 id="links">links</h2><ul><li><em><ahref="https://zhuanlan.zhihu.com/p/568328445">根据自适应巡航系统(ACC)来理解CBF(ControlBarrier Function)-入门知识</a></em><br /></li><li><em><a href="https://zhuanlan.zhihu.com/p/277326421">CLF-CBFController</a></em><br /></li><li><em><ahref="https://github.com/HybridRobotics/CBF-CLF-Helper">HybridRobotics/CBF-CLF-Helper</a></em><br /></li><li><em><a href="https://www.youtube.com/watch?v=_Tkn_Hzo4AA">Jason Choi-- Introduction to Control Lyapunov Functions and Control BarrierFunctions</a></em></li></ul>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反步控制</title>
    <link href="/2024/09/04/%E5%8F%8D%E6%AD%A5%E6%8E%A7%E5%88%B6/"/>
    <url>/2024/09/04/%E5%8F%8D%E6%AD%A5%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="物理模型">1.1 物理模型</h2><p>令期望轨迹为<span class="math inline">\(sint\)</span>曲线：<br /><span class="math display">\[x_d = \sin{t}\]</span> <spanclass="math display">\[\dot{x_d} = \cos{t}\]</span></p><p>写出状态方程：<br /><span class="math display">\[\dot{x_1} = x_2 + f_1(x_1)\]</span> <spanclass="math display">\[\dot{x_2} = u + f_2(x_1,x_2) = u + \frac{(M * g *l)}{J} * \sin{x_1} - \frac{D}{J} * x_2\]</span></p><p><span class="math display">\[f_1(x_1) = 0\]</span> <spanclass="math display">\[f_2(x_1,x_2) = \frac{(M * g * l)}{J} * \sin{x_1}- \frac{D}{J} * x_2\]</span>其中第一项为重力对系统的影响，第二项为摩擦力对系统的影响。</p><p><em>其中M为质量，g为重力加速度，l为臂长，J为转动惯量，D为阻尼系数。</em><em><span class="math inline">\(\dot{x_1}\)</span>为角速度，<spanclass="math inline">\(\dot{x_2}\)</span>为角加速度，<spanclass="math inline">\(x_1\)</span>为角度，<spanclass="math inline">\(x_2\)</span>为角速度。</em></p><h2 id="知识补充">1.2 知识补充</h2><p>力矩<span class="math inline">\(M = |F| * |r| *\sin{\varphi}\)</span>力矩除以转动惯量可以描述一个物体收到的外部力矩对其角加速度的影响。阻尼系数除以转动惯量乘以角速度描述了在转动运动中由阻尼产生的转动摩擦力的效应。这个物理量通常被称为阻尼比。</p><p><em>*部分解释来自chatgpt</em></p><h2 id="反步控制">2.1 反步控制</h2><p>构造误差 <span class="math display">\[e_1 = x_1 - x_d\]</span> <spanclass="math display">\[e_2 = x_2 - \alpha_1\]</span> 其中<spanclass="math inline">\(\alpha_1\)</span>为虚拟控制律，即中间状态的控制量。</p><p>构造Lyapunov函数 <span class="math display">\[V_1 =\frac{1}{2}{e_1}^2\]</span> <span class="math display">\[V_2 =\frac{1}{2}{e_1}^2 + \frac{1}{2}{e_2}^2\]</span></p><p>由Lyapunov方法可知，需令<spanclass="math inline">\(\dot{V_1}\)</span> ,<spanclass="math inline">\(\dot{V_2}\)</span>负定使得系统渐趋稳定。</p><p><span class="math display">\[\dot{V_1} = {e_1}\dot{e_1} ={e_1}(\dot{x_1} - \dot{x_d}) = {e_1}(x_2 + f_1(x_1) -\cos{t})\]</span></p><p>故令<span class="math inline">\(\alpha_1 = \cos{t} - e_1 -f_1(x_1)\)</span>，注意此时<spanclass="math inline">\(\alpha_1\)</span>为虚拟控制律，<spanclass="math inline">\(x_2\)</span>为实际控制</p><p><span class="math display">\[\dot{V_1} = {e_1}\dot{e_1} ={e_1}(\dot{x_1} - \dot{x_d})\]</span> <span class="math display">\[ ={e_1}(x_2 + f_1(x_1) - \cos{t}) = {e_1}(e_2 + \alpha_1 + f_1(x_1) -\cos{t}) = {e_1}(e_2 - e_1)\]</span></p><p><span class="math display">\[\dot{e_2} = \dot{x_2} - \dot{\alpha_1} =u + f_2(x_1,x_2) - \dot{\alpha_1}\]</span></p><p><span class="math display">\[\dot{V_2} = e_1(e_2 - e_1) +{e_2}\dot{e_2} = -{e_1}^2 + {e_2}({e_1} + \dot{e_2})\]</span></p><p>需令<span class="math inline">\(\dot{V_2}\)</span>负定，令<spanclass="math inline">\(e_1 + \dot{e_2} = -e_2\)</span>即可，此时<spanclass="math inline">\(\dot{V_2} = -{e_1}^2 - {e_2}^2\)</span>负定 代入得<span class="math inline">\(e_1 + u + f_2(x_1,x_2) - \alpha_1 =-e_2\)</span> 得到最终控制量<span class="math inline">\(u = -e_1 - e_2 -f_2(x_1,x_2) + \dot{\alpha_1}\)</span></p><p>上面得到 <span class="math display">\[f_1(x_1) = 0\]</span> <spanclass="math display">\[f_2(x_1,x_2) = \frac{(M * g * l)}{J} * \sin{x_1}- \frac{D}{J} * x_2\]</span></p><p>所以<span class="math display">\[u = -e_1 - e_2 + \dot{\alpha_1} -(\frac{(M * g * l)}{J} * \sin{x_1} - \frac{D}{J} * x_2)\]</span></p><h2 id="links">links</h2><ul><li><em><ahref="https://haosutopia.github.io/2018/01/Backstepping-01/">Backstepping（反步控制）</a></em></li><li><em><ahref="https://zh.wikipedia.org/wiki/%E5%8F%8D%E6%8E%A8%E6%8E%A7%E5%88%B6">wiki反推控制</a></em></li></ul>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>裂痕</title>
    <link href="/2024/09/03/%E8%A3%82%E7%97%95/"/>
    <url>/2024/09/03/%E8%A3%82%E7%97%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>裂痕</center><center>边缘纹路生长，</center><center>哭泣的笑容，</center><center>过去的完整再无有几分存在。</center><center>爱或未来，</center><center>自甘地遗忘。</center><center>燃烧一盎司灵魂也无法弥补这急转隔断，</center><center>都不足一千公里的时间长。</center><center>笨拙的花张口结舌，</center><center>眼泪流淌。</center><center>几缕薄影倏忽而过，</center><center>哀荣四泻。</center><center>破碎，</center><center>月和目光。</center><center>源头是廉价的情感理想，</center><center>尾流入地海。</center><center>二到一到二，</center><center>无到有到无。</center><center>过度或翼翼滋生裂隙，</center><center>自产怒火惊雷，</center><center>静静撕咬。</center><center>曾是永远完整永远一起，</center><center>无有输赢，</center><center>而今却是谢幕时光。</center><center>痛苦急速转换，</center><center>一道无形的裂痕悄然而生，</center><center>自此疾驰。</center><center>幻想和秋风，</center><center>由我亲手斩断，</center><center>显现的裂痕，</center><center>存于你我各自世界之间</center>]]></content>
    
    
    <categories>
      
      <category>发电</category>
      
    </categories>
    
    
    <tags>
      
      <tag>poem</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
